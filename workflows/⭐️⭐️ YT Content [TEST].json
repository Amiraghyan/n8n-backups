{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        []
      ]
    },
    "Read_Videos": {
      "main": [
        [
          {
            "node": "Process_video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Channels": {
      "main": [
        [
          {
            "node": "Initial Channel Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process_video": {
      "main": [
        [
          {
            "node": "YT Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Channel Data": {
      "main": [
        [
          {
            "node": "processChannel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript": {
      "main": [
        [
          {
            "node": "Videos Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT_Channels": {
      "main": [
        [
          {
            "node": "Update Channels",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Limit2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processChannel": {
      "main": [
        [
          {
            "node": "YT_Channels",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID": {
      "main": [
        [
          {
            "node": "VID SUCCEED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VID SUCCEED": {
      "main": [
        [
          {
            "node": "Video Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not SUCCEEDED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Results": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Fields for Video Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit2": {
      "main": [
        [
          {
            "node": "Write_Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields for Video Update": {
      "main": [
        [
          {
            "node": "Update_Videos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments Sentiment Analysis Agent": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If zero comments": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Classifier": {
      "main": [
        [],
        [],
        []
      ]
    },
    "Edit Fields": {
      "main": [
        []
      ]
    },
    "OpenAI4": {
      "ai_languageModel": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript Ninja": {
      "main": [
        [
          {
            "node": "Video #streamers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Results": {
      "main": [
        [
          {
            "node": "Set Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cSummary": {
      "main": [
        [
          {
            "node": "Top Comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cStrengths": {
      "main": [
        [
          {
            "node": "cOpportunities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cOpportunities": {
      "main": [
        [
          {
            "node": "cRecommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top Comments": {
      "main": [
        [
          {
            "node": "Transcript Excerpts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cRecommendations": {
      "main": [
        [
          {
            "node": "Get Comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript Excerpts": {
      "main": [
        [
          {
            "node": "cStrengths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Fields": {
      "main": [
        [
          {
            "node": "Copy Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Copy Template": {
      "main": [
        [
          {
            "node": "VarToValues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VarToValues": {
      "main": [
        [
          {
            "node": "Share Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Share Link": {
      "main": [
        []
      ]
    },
    "Google Docs": {
      "main": [
        [
          {
            "node": "Text → Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text → Audio": {
      "main": [
        []
      ]
    },
    "Prepare Content": {
      "main": [
        [
          {
            "node": "Eleven Labs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Comments": {
      "main": [
        [
          {
            "node": "If zero comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments": {
      "main": [
        [
          {
            "node": "cSummary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #streamers": {
      "main": [
        [
          {
            "node": "Comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Sentiment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-07T22:59:14.687Z",
  "id": "iK0HfAIjts4uk2N9",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "⭐️⭐️ YT Content [TEST]",
  "nodes": [
    {
      "parameters": {},
      "id": "794dc8d7-c392-40c0-a588-dca9b4b8d425",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        2120,
        1680
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "options": {
          "fields": [
            "vid#",
            "videoURL",
            "vid_id",
            "processVideo",
            "dateProcessed",
            "commentCount",
            "channel",
            "channelName (from Channel)",
            "channelURL (from Channel)"
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2320,
        1680
      ],
      "id": "f3dd61c4-46c0-438d-ae6f-e99b9c39e6f1",
      "name": "Read_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "filterByFormula": "{processChannel} = 1",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2280,
        1020
      ],
      "id": "80113562-3783-4487-bd8b-1b9a0292e1f6",
      "name": "Read_Channels",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processVideo": true,
            "Title": "={{ $json.title }}",
            "videoURL": "={{ $json.url }}",
            "dateProcessed": "={{ $now.format('yyyy-MM-dd T')}}",
            "Status": "Todo",
            "Duration": "={{ $json.duration }}",
            "viewCount": "={{ $json.viewCount }}",
            "publishDate": "={{ $json.date }}",
            "id": "={{ $json.id }}",
            "positive": 0,
            "neutral": 0,
            "negative": 0,
            "thumbnailUrl": "={{ $json.thumbnailUrl }}",
            "Likes": 0,
            "commentCount": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "options": [],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "wordless",
                  "value": "wordless"
                },
                {
                  "name": "advertising",
                  "value": "advertising"
                },
                {
                  "name": "content",
                  "value": "content"
                },
                {
                  "name": "",
                  "value": ""
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Todo",
                  "value": "Todo"
                },
                {
                  "name": "In progress",
                  "value": "In progress"
                },
                {
                  "name": "Done",
                  "value": "Done"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": false,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3660,
        1100
      ],
      "id": "d9b3ddc3-16b6-4361-9206-9c76c5e4cd7c",
      "name": "Write_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $json.processVideo }}",
              "rightValue": "={{ 1 }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2520,
        1680
      ],
      "id": "5c87f4cd-80d4-4eac-80c8-b39665b1e1af",
      "name": "Process_video",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Process Channels\nOldestPostDate: \"2024-01-01\"",
        "height": 480,
        "width": 2680,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        880
      ],
      "typeVersion": 1,
      "id": "ca294bd2-3693-4d45-8d97-a4c03c9f431f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 560,
        "width": 2680,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        1420
      ],
      "typeVersion": 1,
      "id": "3d527646-18d4-4508-8d37-e80796a4ef4b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2980,
        1180
      ],
      "id": "978b1306-062d-4e7c-9489-7eb2d9ab5cff",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "channelName": "={{ $json.body[0].channelName }}",
            "channelURL": "={{ $json.body[0].channelUrl }}",
            "processDate": "={{ $now.format('yyyy-MM-dd hh:mm:ss') }}",
            "channelDescription": "=}{{ $json.body[0].channelDescription }}",
            "id": "={{ $('Read_Channels').item.json.id }}",
            "fromYTUrl": "={{ $json.body[0].fromYTUrl }}",
            "input": "={{ $json.body[0].input }}",
            "fromChannelListPage": "={{ $json.body[0].fromChannelListPage }}",
            "channelAvatarUrl": "={{ $json.body[0].channelAvatarUrl }}",
            "channelBannerUrl": "={{ $json.body[0].channelBannerUrl }}",
            "channelId": "={{ $json.body[0].channelId }}",
            "inputChannelUrl": "={{ $json.body[0].inputChannelUrl }}",
            "chNumOfSubs": "={{ $json.body[0].aboutChannelInfo.numberOfSubscribers }}",
            "chTotalViews": "={{ $json.body[0].aboutChannelInfo.channelTotalViews }}",
            "chTotalVideos": "={{ $json.body[0].aboutChannelInfo.channelTotalVideos }}",
            "chJoinedDate": "={{ $json.body[0].aboutChannelInfo.channelJoinedDate }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch_id",
              "displayName": "ch_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch#",
              "displayName": "ch#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "processChannel",
              "displayName": "processChannel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName",
              "displayName": "channelName",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelURL",
              "displayName": "channelURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelDescription",
              "displayName": "channelDescription",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chJoinedDate",
              "displayName": "chJoinedDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processDate",
              "displayName": "processDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalVideos",
              "displayName": "chTotalVideos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalViews",
              "displayName": "chTotalViews",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chNumOfSubs",
              "displayName": "chNumOfSubs",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelId",
              "displayName": "channelId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "fromYTUrl",
              "displayName": "fromYTUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "fromChannelListPage",
              "displayName": "fromChannelListPage",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelAvatarUrl",
              "displayName": "channelAvatarUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelBannerUrl",
              "displayName": "channelBannerUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "inputChannelUrl",
              "displayName": "inputChannelUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Videos",
              "displayName": "Videos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3260,
        920
      ],
      "id": "76878d59-3612-4ad3-b01a-77139ac74d22",
      "name": "Update Channels",
      "executeOnce": false,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "295f3269-0310-4f40-a5b5-ce79dfa811ec",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "ee62a5ec-b104-44fc-b487-1326fba8dd73",
              "name": "channelName",
              "value": "={{ $json.channelName }}",
              "type": "string"
            },
            {
              "id": "ef1e4a11-fa6f-48ca-90e6-0c76ed382f9d",
              "name": "ch#",
              "value": "={{ $json[\"ch#\"] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2500,
        1020
      ],
      "id": "c2914754-764a-4ae9-b81f-d8d99423d400",
      "name": "Initial Channel Data"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/actor-runs/9JEG4AbMU0RbeHx1M?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"dateFilter\": \"year\",\n  \"downloadSubtitles\": true,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": true,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 100,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"scrapeLastNDays\": 400,\n  \"searchQueries\": [\n    \"https://www.youtube.com/watch?v=Q13QOgwoF0E\"\n  ],\n  \"sortVideosBy\": \"NEWEST\",\n  \"startUrls\": [\n    {\n      \"url\": \"https://www.youtube.com/watch?v=qV7xOEKEBDA\",\n      \"method\": \"GET\"\n    }\n  ],\n  \"subtitlesLanguage\": \"en\",\n  \"subtitlesFormat\": \"srt\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "3f5d26b8-a390-4b26-ad20-545bd1fa6dd9",
      "name": "YT Transcript",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1580
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    { \n      \"url\": \"{{ $('Read_Channels').item.json.channelURL }}\" \n    }\n  ],\n  \"maxResults\": 100\n}\n",
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 5
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2980,
        1000
      ],
      "id": "e66d9248-8df9-464c-a73f-e3dc711149f7",
      "name": "YT_Channels",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3260,
        1100
      ],
      "id": "0eb6d540-1be0-4af1-bc11-058350130a84",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $('Read_Channels').item.json.processChannel }}",
              "rightValue": "TRUE",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2740,
        1020
      ],
      "id": "69e8f8e3-0008-4b20-a879-5daf37b60b13",
      "name": "processChannel",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75b181be-d768-45cc-918b-eea4a3cb6c2e",
              "name": "id",
              "value": "={{ $('Read_Videos').item.json.id }}",
              "type": "string"
            },
            {
              "id": "37df7a9c-5e04-4925-b0b9-7697fb70ac59",
              "name": "data.id",
              "value": "={{ $json.body.data.id }}",
              "type": "string"
            },
            {
              "id": "db3c2b19-76d5-42ea-959e-ffb7986c6199",
              "name": "body.data.status",
              "value": "={{ $json.body.data.status }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            },
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2960,
        1580
      ],
      "id": "6c0f2dad-8127-4911-b542-0004d441df2f",
      "name": "Videos Run ID"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2453d745-17ff-41cf-8d67-afd8f766549c",
              "leftValue": "={{ $json.body.data.status }}",
              "rightValue": "={{\"SUCCEEDED\"}}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3160,
        1580
      ],
      "id": "901d6051-b313-41fb-b3a2-ca08555d063a",
      "name": "VID SUCCEED"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/datasets/xAeWiWXwzKOJV4Csa/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "={{ $json.body.data.status }}"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 25
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3400,
        1540
      ],
      "id": "3ff3db22-55d0-4d1d-9511-9c628a7948a8",
      "name": "Video Results",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2000,
        1460
      ],
      "id": "89b70943-b279-432a-8114-e5b17ddf95eb",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        4100,
        1480
      ],
      "id": "41075a45-34f9-434c-9777-62cfa88e38ea",
      "name": "Update_Videos1",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2800,
        1780
      ],
      "id": "21011ccd-af3f-4aaf-8595-fbb2e9f38b7d",
      "name": "not Processed"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3400,
        1700
      ],
      "id": "9958cd9c-f4fc-4bc7-93d0-c356a23cfd4f",
      "name": "Not SUCCEEDED"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3680,
        1480
      ],
      "id": "8d8236e3-8f31-4e39-b2da-ca51f0186956",
      "name": "Limit"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3460,
        1100
      ],
      "id": "61ba0796-9904-445f-8d03-fb91a74cd1f0",
      "name": "Limit2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3bc4a4b5-c908-4a8a-b4d9-175ab5bd77f9",
              "name": "id",
              "value": "={{ $('VID SUCCEED').item.json.id }}",
              "type": "string"
            },
            {
              "id": "2a08d754-d179-45c8-8513-b1d7c460ce23",
              "name": "fields",
              "value": "={{ $('Video Results').item.json.body[0] }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3900,
        1480
      ],
      "id": "c427be34-1c72-41e8-b40d-ec0d0114575a",
      "name": "Fields for Video Update"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 1160,
        "width": 2680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        2180
      ],
      "typeVersion": 1,
      "id": "bb8e3b37-dfe2-4cde-9bcb-7a37df0b427c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2020,
        2240
      ],
      "id": "7f32e1c4-0420-432e-b515-02d58878ece2",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "formTitle": "Youtube Video Process",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Youtube Video URL",
              "placeholder": "Paste the link to a Youtube Video",
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "ignoreBots": true,
          "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 14px;\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 14px;\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\n\t/* Colors */\n\t--color-background: #fbfcfe;\n\t--color-test-notice-text: #e6a23d;\n\t--color-test-notice-bg: #fefaf6;\n\t--color-test-notice-border: #f6dcb7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #dbdfe7;\n\t--color-card-shadow: rgba(99, 77, 255, 0.06);\n\t--color-link: #7e8186;\n\t--color-header: #525356;\n\t--color-label: #555555;\n\t--color-input-border: #dbdfe7;\n\t--color-input-text: #71747A;\n\t--color-focus-border: rgb(90, 76, 194);\n\t--color-submit-btn-bg: #ff6d5a;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #ea1f30;\n\t--color-required: #ff6d5a;\n\t--color-clear-button-bg: #7e8186;\n\t--color-html-text: #555;\n\t--color-html-link: #ff6d5a;\n\t--color-header-subtext: #7e8186;\n\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 12px;\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\n\t/* Dimensions */\n\t--container-width: 448px;\n\t--submit-btn-height: 48px;\n\t--checkbox-size: 18px;\n\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n}"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        2220,
        2360
      ],
      "id": "9b21b368-2fb1-4ded-a7e6-8ff41212be6d",
      "name": "On form submission",
      "webhookId": "61c131c3-7c60-4418-9f04-77a712ea6e87"
    },
    {
      "parameters": {
        "fieldToSplitOut": "pageUrl, comment",
        "options": {
          "destinationFieldName": ""
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2680,
        2940
      ],
      "id": "f385b36c-6e5a-49d7-846d-2b57b9c97f86",
      "name": "Split Out"
    },
    {
      "parameters": {
        "resource": "audio",
        "input": "={{ $json.content }}",
        "options": {
          "response_format": "mp3",
          "binaryPropertyOutput": ""
        }
      },
      "id": "e779edb7-a666-42ad-beed-51fd1942694e",
      "name": "Text → Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        5520,
        3120
      ],
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "inputText": "={{ $json.comment }}",
        "options": {
          "categories": "Positive, Neutral, Negative",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": false,
          "enableAutoFixing": false
        }
      },
      "id": "c848fc0b-ee7a-4c97-bac1-31ce0fc90a1d",
      "name": "Comments Sentiment Analysis Agent",
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        2860,
        2940
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "adad4ab3-6a87-493b-8a65-98afd8ff7ca7",
              "leftValue": "={{ $json.commentsCount }}",
              "rightValue": "={{0}}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2480,
        2840
      ],
      "id": "81ab854e-61de-4cb0-a1bc-594f652799b3",
      "name": "If zero comments"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3200,
        2940
      ],
      "id": "ec0a1a80-0674-4237-a38c-05e21f5cc72a",
      "name": "Aggregate",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "0b4dc8d1-6497-45d6-af95-1d92fe11b250",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6120,
        2480
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.body[0].transcript || '[null]' }}",
        "categories": {
          "categories": [
            {
              "category": "Wordless",
              "description": "there is no transcript"
            },
            {
              "category": "Ad",
              "description": "transcript is an advertisement"
            },
            {
              "category": "Content",
              "description": "When transcript is not an ad. It is real content."
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "=You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\n\nYour goal is to help clasify the youtube videos that fall in the following categories:\n\"ad\", \"wordless\", \"content\"\n\nIf the transcript is empty, respond \"wordless\"\nIf the transcript is all about an ad, respond \"ad\". \nIf the transcript has relevant content which is not advertising, respond \"content\"",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        6180,
        2320
      ],
      "id": "270480b1-6dff-48f5-ae6d-e5e39ab0d62f",
      "name": "Classifier",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3d87a111-84f3-4e45-a964-fcb18f319790",
              "name": "Youtube Video URL",
              "value": "https://www.youtube.com/watch?v=62SA_YwUg5Q",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1820,
        2040
      ],
      "id": "287b5c8e-0b85-4926-8a7d-f06a25480741",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "ccac1282-79b3-4de7-b22c-68c8c1a65478",
      "name": "OpenAI4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2920,
        3100
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/topaz_sharingan~youtube-transcript-scraper-1/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    \"{{ $json['Youtube Video URL'] }}\"\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "49c1f4f6-a43c-4547-b29c-94317e704522",
      "name": "YT Transcript Ninja",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2420,
        2360
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Initialize counters for each sentiment category\nlet positiveCount = 0;\nlet neutralCount = 0;\nlet negativeCount = 0;\n\n// Get the data from the Aggregate node\nconst aggregateData = $input.first().json;\n\n// Check if we have data array\nif (aggregateData && aggregateData.data && Array.isArray(aggregateData.data)) {\n  const dataItems = aggregateData.data;\n  const totalComments = dataItems.length;\n  \n  // Loop through each data item\n  dataItems.forEach(item => {\n    // Access the sentiment category from the sentimentAnalysis field\n    if (item.sentimentAnalysis && item.sentimentAnalysis.category) {\n      const category = item.sentimentAnalysis.category.toLowerCase();\n      \n      // Count based on sentiment category\n      if (category.includes('positive')) {\n        positiveCount++;\n      } else if (category.includes('negative')) {\n        negativeCount++;\n      } else if (category.includes('neutral')) {\n        neutralCount++;\n      }\n    }\n  });\n  \n  // Calculate percentages\n  const percentPositive = totalComments > 0 ? (positiveCount / totalComments * 100).toFixed(1) : 0;\n  const percentNeutral = totalComments > 0 ? (neutralCount / totalComments * 100).toFixed(1) : 0;\n  const percentNegative = totalComments > 0 ? (negativeCount / totalComments * 100).toFixed(1) : 0;\n  \n  // Return the summary\n  return {\n    json: {\n      summary: {\n        totalComments,\n        positive: {\n          count: positiveCount,\n          percentage: parseFloat(percentPositive)\n        },\n        neutral: {\n          count: neutralCount,\n          percentage: parseFloat(percentNeutral)\n        },\n        negative: {\n          count: negativeCount,\n          percentage: parseFloat(percentNegative)\n        }\n      }\n    }\n  };\n} else {\n  // Handle case where there's no data\n  return {\n    json: {\n      summary: {\n        totalComments: 0,\n        positive: { count: 0, percentage: 0 },\n        neutral: { count: 0, percentage: 0 },\n        negative: { count: 0, percentage: 0 }\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3560,
        2840
      ],
      "id": "1c51a485-7d5d-4fdd-95a9-60f09fdf416d",
      "name": "Sentiment Results",
      "executeOnce": true
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and create a concise, professional summary (250-300 words) that describes:\n\n1. The main topic and purpose of the video\n2. The key points or sections covered \n3. The presenter's communication approach\n4. 3-4 specific notable insights from the content\n5. Who would benefit most from this video\n\nUse only the information provided: \nTitle: \"{{ $('YT Transcript Ninja').item.json.body[0].videoTitle }}, \nDescription: {{ $('Video #streamers').item.json.text }}, \nTags: {{ $('Video #streamers').item.json.hashtags }}, \nand these transcript excerpts: {{ $('YT Transcript Ninja').item.json.body[0].transcript }}\n\nFormat your response as a neutral, analytical paragraph without using first-person language. Do not be verbose. Keep in mind that this content is part of a report where the user has become familiar with the Title of the video, and other metadata. Get right into topic not making introductions like \"The analysis on the video called The 30-Day Mindset is killing your dealership with Don Hall\" just get straight into the analysis.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2260,
        2600
      ],
      "id": "9cd21e03-08f1-40c8-8a1a-7ab72a3d9b90",
      "name": "cSummary",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and generate 5 specific content strengths for a video titled \"{{ $('YT Transcript Ninja').item.json.body[0].videoTitle }}\" with these details:\n- Description: \"{{ $('Video #streamers').item.json.text }}\"\n- Tags: {{ $('Video #streamers').item.json.hashtags }}\n- Duration: {{ $('Video #streamers').item.json.duration }}\n- Top comments: {{ $('Top Comments').item.json.message.content }}\n\nFor each strength:\n1. Identify a specific aspect of the content that appears to be executed well\n2. Format as \"Category: Detailed explanation\" (e.g., \"Visual Presentation: High-quality graphics with clear annotations make complex concepts easy to understand.\")\n3. Focus on content quality, structure, presentation style, information value, or audience engagement\n4. Base your analysis on the video's topic, structure, and audience reception\n5. Provide specific, substantive analysis rather than generic praise\n\nEnsure each strength is distinct and focuses on a different aspect of the content.\nDeliver response in plain style. No ** markdown for bold.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3360,
        2600
      ],
      "id": "0fe073b2-bb89-464b-9dee-cf7c638d2ecd",
      "name": "cStrengths",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Based on this YouTube video information, identify 5 specific improvement opportunities for a video titled \"\" with:\n- Description: \"{{ $('Video #streamers').item.json.text }}\"\n- Tags: {{ $('Video #streamers').item.json.hashtags }}\n- View-to-like ratio: {{$json[\"likesToViewsRatio\"]}}\n- Comments: {{ $('Top Comments').item.json.message.content }}\n\nFor each opportunity:\n1. Identify a specific aspect that could be enhanced or expanded\n2. Format as \"Area: Detailed explanation\" (e.g., \"Technical Depth: The encryption section could benefit from more detailed examples showing practical implementation.\")\n3. Base your suggestions on viewer feedback in comments and content gaps based on the topic\n4. Be constructive and specific rather than critical\n5. Focus on content expansion, audience engagement, technical clarifications, or additional value-add elements\n\nEach opportunity should offer actionable insight that would meaningfully improve the video content.\nDeliver response in plain style. No ** markdown for bold.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3740,
        2600
      ],
      "id": "c7e54c0d-7f68-43e1-9bea-bee97c83f325",
      "name": "cOpportunities",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Create 5 strategic, actionable recommendations for a YouTube creator to improve and expand upon their video \"{{ $('YT Transcript Ninja').item.json.body[0].videoTitle }}\" based on this data:\n- Video metrics: {{ $('Video #streamers').item.json.viewCount }} views, {{ $('Video #streamers').item.json.likes }} likes, {{ $('Video #streamers').item.json.commentsCount }} comments\n- Description: \"{{ $('Video #streamers').item.json.text }}\"\n- Tags: {{ $('Video #streamers').item.json.hashtags }}\n- Content strengths: {{ $('cStrengths').item.json.message.content }}\n- Content opportunities: {{ $json.message.content }}\n- Top comments: {{ $('Top Comments').item.json.message.content }}\n\nEach recommendation should:\n1. Start with a clear, action-oriented title (e.g., Develop Series Extension:)\n2. Include a detailed, specific explanation (approximately 30-50 words)\n3. Address a strategic opportunity to increase engagement, viewership, or content value\n4. Connect directly to insights from the data provided\n5. Include a specific potential outcome or benefit\n\nFormat each as \n\nAction Title: Detailed explanation with strategic rationale.\nDo not include the workds \"Action Title:\"\n\n\nRecommendations should be tailored to this specific video and channel context, not generic YouTube advice.\nDeliver response in plain style. No ** markdown for bold.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4120,
        2600
      ],
      "id": "75305522-c594-4eba-9c71-d76bfef2a4bf",
      "name": "cRecommendations",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate 5 realistic YouTube comments for a video titled \"{{ $('Video #streamers').item.json.title }}\" with description \"{{ $('Video #streamers').item.json.text }}\".\n\nThe video has {{ $('Video #streamers').item.json.viewCount }} views, {{ $('Video #streamers').item.json.likes }} likes, and {{ $('Video #streamers').item.json.commentsCount }} comments, suggesting it's a popular video with good engagement.\n\nCreate comments that:\n1. Reflect diverse viewer perspectives (positive feedback, constructive criticism, expert insights, beginner questions, etc.)\n2. Reference specific content that would likely be in the video based on its title and description\n3. Include reasonable usernames that match the likely audience for this content\n4. Show varying levels of detail and engagement with the content\n5. Include at least one comment that mentions a minor correction or suggestion for improvement\n\nFormat each comment as a JSON object with \"user\" and \"comment\" properties. The comments should be highly realistic and specific to this video's content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2620,
        2600
      ],
      "id": "857b9872-0b43-48f6-a159-5ebe202f7387",
      "name": "Top Comments",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Given the YouTube video title \"{{ $('Video #streamers').item.json.title }}\" about {{ $('Video #streamers').item.json.hashtags }}, generate 7 realistic transcript excerpts that would appear throughout an educational video on this topic.\n\nEach excerpt should:\n1. Include a timestamp (starting with 0:00 and ending near the video duration of {{ $('Video #streamers').item.json.duration }})\n2. Reflect natural speaking patterns of an educational content creator\n3. Represent key moments in the video's narrative structure\n4. Include an introduction, key points for each major section, and a conclusion\n5. Match the tone and style suggested by the video description: \n\"{{ $('Video #streamers').item.json.text }}\"\n\nFormat each excerpt as a JSON object with \"time\" and \"text\" properties. \nKeep the time and text plain style.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2980,
        2600
      ],
      "id": "a8f0d78e-7ba0-4b76-89e1-37ac528970c7",
      "name": "Transcript Excerpts",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a6d2bb42-9851-4bcf-88c9-a0a64a8b1a66",
              "name": "id",
              "value": "={{ $('Video #streamers').item.json.id }}",
              "type": "string"
            },
            {
              "id": "98d5d864-30b2-479f-821c-5c6e84f44816",
              "name": "url",
              "value": "={{ $('Video #streamers').item.json.url }}",
              "type": "string"
            },
            {
              "id": "d5b69112-36aa-4f73-a9c8-ff36a3a0186c",
              "name": "title",
              "value": "={{ $('Video #streamers').item.json.title }}",
              "type": "string"
            },
            {
              "id": "6f0044dc-6c54-4486-a987-baffd687be72",
              "name": "description",
              "value": "={{ $('Video #streamers').item.json.text }}",
              "type": "string"
            },
            {
              "id": "76cd2bb4-ae7b-4b04-b100-5571b4916f5b",
              "name": "lengthInSeconds",
              "value": "={{ $('Video #streamers').item.json.duration }}",
              "type": "string"
            },
            {
              "id": "4b37d727-0d53-435c-bf34-2ab80c300d3b",
              "name": "duration",
              "value": "={{ $('Video #streamers').item.json.duration }}",
              "type": "string"
            },
            {
              "id": "082eafe5-86dc-4b37-9a56-4b49d76c169d",
              "name": "publishedDate",
              "value": "={{ $('Video #streamers').item.json.date }}",
              "type": "string"
            },
            {
              "id": "a7069bcd-90e3-45d5-88b2-e012075ea0dc",
              "name": "reportDate",
              "value": "={{ $now.format('LLL dd,yyyy') }}",
              "type": "string"
            },
            {
              "id": "6de1dd9c-9212-42a0-af77-469a0d99bf37",
              "name": "tags",
              "value": "={{ $('Video #streamers').item.json.hashtags }}",
              "type": "string"
            },
            {
              "id": "2813f62a-2330-43f9-a373-8735f6e57355",
              "name": "channelID",
              "value": "={{ $('Video #streamers').item.json.channelId }}",
              "type": "string"
            },
            {
              "id": "1c10857e-9efe-412f-9c5c-9a5bbaa540fe",
              "name": "channelURL",
              "value": "={{ $('Video #streamers').item.json.channelUrl }}",
              "type": "string"
            },
            {
              "id": "d1a68eda-757d-441a-bfae-e78ace8d8a7b",
              "name": "channelUsername",
              "value": "={{ $('Video #streamers').item.json.channelUsername }}",
              "type": "string"
            },
            {
              "id": "a4b1921f-dfcd-4ff8-80eb-25909ae19a52",
              "name": "channelDisplayName",
              "value": "={{ $('Video #streamers').item.json.channelName }}",
              "type": "string"
            },
            {
              "id": "56394597-3c6b-4a42-988d-72970969f034",
              "name": "channelSubscribers",
              "value": "={{ $('Video #streamers').item.json.numberOfSubscribers }}",
              "type": "string"
            },
            {
              "id": "f7e4fae0-3b3d-422b-85dc-c8519bb72021",
              "name": "viewCount",
              "value": "={{ $('Video #streamers').item.json.viewCount }}",
              "type": "number"
            },
            {
              "id": "f64b2963-d190-41bf-8c83-62f9cff210c0",
              "name": "likeCount",
              "value": "={{ $('Video #streamers').item.json.likes }}",
              "type": "number"
            },
            {
              "id": "e1254a80-e9e5-4c3a-97ca-98cce0e3a1e6",
              "name": "commentsCount",
              "value": "={{ $('Video #streamers').item.json.commentsCount }}",
              "type": "number"
            },
            {
              "id": "c7d901d4-7479-48b7-87f4-2b2c15d463ef",
              "name": "description",
              "value": "={{ $('Video #streamers').item.json.text }}",
              "type": "string"
            },
            {
              "id": "22500735-332c-4b2d-994a-9cf5cb8f2c09",
              "name": "cSummary - raw",
              "value": "={{ $('cSummary').item.json.message.content }}",
              "type": "string"
            },
            {
              "id": "542c07d2-2c39-4c73-ac6d-e7bddd68b516",
              "name": "summary.positive",
              "value": "={{ $json.summary.positive }}",
              "type": "object"
            },
            {
              "id": "f79122c8-7a71-4b98-8b8d-0f8ddff3f0d7",
              "name": "summary.neutral",
              "value": "={{ $json.summary.neutral }}",
              "type": "object"
            },
            {
              "id": "71042534-79be-421c-8b25-81d3e3d68745",
              "name": "summary.negative",
              "value": "={{ $json.summary.negative }}",
              "type": "object"
            },
            {
              "id": "46ac712c-59b9-475d-8af3-1f5679496a16",
              "name": "content.Strengths",
              "value": "={{ $('cStrengths').item.json.message.content }}",
              "type": "string"
            },
            {
              "id": "dda1fd3f-e35d-4b87-bcb1-260c1754e3c6",
              "name": "content.Opportunities",
              "value": "={{ $('cOpportunities').item.json.message.content }}",
              "type": "string"
            },
            {
              "id": "efc7ebd4-ec40-4a86-9b9e-7648cd1b583d",
              "name": "=content.Recommendations",
              "value": "={{ $('cRecommendations').item.json.message.content }}",
              "type": "string"
            },
            {
              "id": "b9120961-31a6-4669-8083-838c51eef96b",
              "name": "=content.Tscripts",
              "value": "={{\n  (function() {\n    try {\n      // Parse the JSON string from message.content\n      let content = $('Transcript Excerpts').item.json.message.content;\n      \n      // Clean up any escape characters or formatting issues\n      content = content.replace(/\\\\n/g, '\\n').replace(/\\\\\"/g, '\"');\n      \n      // Try to extract time-text pairs using regex\n      const timeTextMatches = content.match(/\"time\":\\s*\"([^\"]+)\",\\s*\"text\":\\s*\"([^\"]+)\"/g);\n      \n      if (timeTextMatches && timeTextMatches.length > 0) {\n        return timeTextMatches.map(match => {\n          const time = match.match(/\"time\":\\s*\"([^\"]+)\"/)[1];\n          const text = match.match(/\"text\":\\s*\"([^\"]+)\"/)[1];\n          return `${time}:\n${text}`;\n        }).join('\\n\\n');\n      }\n      \n      return 'Could not extract transcript excerpts';\n    } catch (error) {\n      return 'Error processing transcript excerpts';\n    }\n  })()\n}}",
              "type": "string"
            },
            {
              "id": "285d5aa0-ca5c-48d9-9ec7-5ff2fc1d0780",
              "name": "=content.TopComments",
              "value": "={{\n  (function() {\n    try {\n      // Get the content string\n      let content = $('Top Comments').item.json.message.content;\n      \n      // Regular expression to match user-comment pairs\n      const regex = /\"user\":\\s*\"([^\"]+)\",\\s*\"comment\":\\s*\"([^\"]+)\"/g;\n      const matches = [];\n      let match;\n      \n      // Find all matches\n      while ((match = regex.exec(content)) !== null) {\n        if (match.length >= 3) {\n          matches.push({\n            user: match[1],\n            comment: match[2]\n          });\n        }\n      }\n      \n      // If we found matches, format them\n      if (matches.length > 0) {\n        return matches.map(m => `${m.user}: \n\"${m.comment}\"`).join('\\n\\n');\n      }\n      \n      // Alternative method if the regex approach doesn't work\n      const userRegex = /\"user\":\\s*\"([^\"]+)\"/g;\n      const commentRegex = /\"comment\":\\s*\"([^\"]+)\"/g;\n      \n      const users = [];\n      const comments = [];\n      \n      while ((match = userRegex.exec(content)) !== null) {\n        users.push(match[1]);\n      }\n      \n      while ((match = commentRegex.exec(content)) !== null) {\n        comments.push(match[1]);\n      }\n      \n      if (users.length === comments.length && users.length > 0) {\n        return users.map((user, i) => \n          `**${user}:** \"${comments[i]}\"`\n        ).join('\\n\\n');\n      }\n      \n      return 'No comments available';\n    } catch (error) {\n      return 'Error processing comments';\n    }\n  })()\n}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3740,
        2840
      ],
      "id": "7610fa39-e707-4745-9865-23118c93f9de",
      "name": "Set Fields"
    },
    {
      "parameters": {
        "operation": "copy",
        "fileId": {
          "__rl": true,
          "value": "1nzSNHzpkJb0GDUSjANnSd_vg-C2hwj3zc-Nbc6x6k58",
          "mode": "id"
        },
        "name": "={{ $json.id }}.Youtube.{{ $now.format('yymmdd-HHmmss') }}",
        "sameFolder": false,
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "17dincwYmqZk4qVU-GQIy-lcmgZIBXzSs",
          "mode": "list",
          "cachedResultName": "zCONTENT TEST",
          "cachedResultUrl": "https://drive.google.com/drive/folders/17dincwYmqZk4qVU-GQIy-lcmgZIBXzSs"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3920,
        2840
      ],
      "id": "6ada38c8-9a56-4d41-8c22-387fd7a43106",
      "name": "Copy Template",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.documentId }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        4280,
        2840
      ],
      "id": "d9403ff0-9a18-48c1-b93b-067bfa9cdcc1",
      "name": "Share Link",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "replaceAll",
              "text": "{{videoID}}",
              "replaceText": "={{ $('Set Fields').item.json.id }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoTitle}}",
              "replaceText": "={{ $('Set Fields').item.json.title }}"
            },
            {
              "action": "replaceAll",
              "text": "{{reportDate}}",
              "replaceText": "={{ $('Set Fields').item.json.reportDate }}"
            },
            {
              "action": "replaceAll",
              "text": "{{viewCount}}",
              "replaceText": "={{ $('Set Fields').item.json.viewCount.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{likeCount}}",
              "replaceText": "={{ $('Set Fields').item.json.likeCount.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{commentCount}}",
              "replaceText": "={{ String($(\"Video #streamers\").item.json.commentCount || 0) }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoUrl}}",
              "replaceText": "={{ $('Set Fields').item.json.url }}"
            },
            {
              "action": "replaceAll",
              "text": "{{publishDate}}",
              "replaceText": "={{ $('Set Fields').item.json.publishedDate.toDateTime().format('LLL dd,yyyy') }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoDuration}}",
              "replaceText": "={{ $('Set Fields').item.json.lengthInSeconds.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{channelName}}",
              "replaceText": "={{ $('Set Fields').item.json.channelDisplayName }}"
            },
            {
              "action": "replaceAll",
              "text": "{{subscriberCount}}",
              "replaceText": "={{ $('Set Fields').item.json.channelSubscribers.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoDescription}}",
              "replaceText": "={{ $('Set Fields').item.json.description }}"
            },
            {
              "action": "replaceAll",
              "text": "{{#each videoTags}}#{{this}} {{/each}}",
              "replaceText": "={{ $('Set Fields').item.json.tags && $('Set Fields').item.json.tags.length > 0 \n   ? $('Set Fields').item.json.tags.map(tag => `#${tags}`).join(' ') \n   : \"No tags available\" }}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentSummary}}",
              "replaceText": "={{ $('cSummary').item.json.message.content }}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentStrengths}}",
              "replaceText": "={{ $('Set Fields').item.json.content.Strengths }}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentOpportunities}}",
              "replaceText": "={{ $('Set Fields').item.json.content.Opportunities }}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentRecommendations}}",
              "replaceText": "={{ $('Set Fields').item.json.content.Recommendations }}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentTscripts}}",
              "replaceText": "={{ $('Set Fields').item.json.content.Tscripts }}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentTopComments}}",
              "replaceText": "={{ $('Set Fields').item.json.content.TopComments }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        4100,
        2840
      ],
      "id": "e834e35a-27c3-4ddb-9e33-c1ce8eb6d308",
      "name": "VarToValues",
      "alwaysOutputData": true,
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $('VarToValues').item.json.documentId }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        5320,
        3120
      ],
      "id": "d0010bc1-65e2-442b-a0ec-93cb1d9ab2e1",
      "name": "Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63380b27-9b81-4f59-b317-5746933ad65b",
              "name": "voiceId",
              "value": "={{ \"21m00Tcm4TlvDq8ikWAM\" }}",
              "type": "string"
            },
            {
              "id": "f020f5ac-79f7-4568-882b-aafee8062c6a",
              "name": "speechContent",
              "value": "={{ $json.title }}\n{{ $json.content.Strengths }}\n{{ $json.content.Opportunities }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5280,
        2580
      ],
      "id": "8ac36932-da46-483f-99fe-46a5bd6164db",
      "name": "Prepare Content"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{$node[\"Prepare Content\"].json.voiceId}}/stream",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "=sk_6027c7e548a7926601e152fae73061cf6fcb6c73fdbfaa6f"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ $json.speechContent }},\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.75\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5480,
        2580
      ],
      "id": "810885b3-3973-4590-b2fe-78bd752d06ee",
      "name": "Eleven Labs"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/insight_api_labs~youtube-comments-1-month---reliable-efficient/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"video_urls\": [\n    {\n      \"url\": \"{{ $('YT Transcript Ninja').item.json.body[0].url }}\",\n      \"method\": \"GET\"\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {}
          }
        }
      },
      "id": "9f6b403c-48ee-49c8-814d-17eecd8473a9",
      "name": "Get Comments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2280,
        2840
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\n    \"<{{ $json.body[0].url }}>\"\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2820,
        2360
      ],
      "id": "d29ae456-9652-46c2-845a-b7ff20b7af8e",
      "name": "Comments"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"dateFilter\": \"year\",\n    \"downloadSubtitles\": true,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": true,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"maxResultStreams\": 0,\n    \"maxResults\": 100,\n    \"maxResultsShorts\": 0,\n    \"preferAutoGeneratedSubtitles\": false,\n    \"saveSubsToKVS\": false,\n    \"scrapeLastNDays\": 400,\n    \"sortVideosBy\": \"NEWEST\",\n    \"startUrls\": [\n        {\n            \"url\": \"{{ $json.body[0].url }}\",\n            \"method\": \"GET\"\n        }\n    ],\n    \"subtitlesLanguage\": \"en\"\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2620,
        2360
      ],
      "id": "b5a62cff-4e91-476d-94c2-0a31f3696da6",
      "name": "Video #streamers"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3380,
        2840
      ],
      "id": "25b61b4b-2c09-43f4-a717-f286f29fda92",
      "name": "Merge"
    }
  ],
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {}
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-16T01:14:52.000Z",
  "versionId": "7263764c-97ff-41a7-ad4c-4e92ca715527"
}