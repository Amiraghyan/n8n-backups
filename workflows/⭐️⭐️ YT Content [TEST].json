{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Videos": {
      "main": [
        [
          {
            "node": "Process_video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Channels": {
      "main": [
        [
          {
            "node": "Initial Channel Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process_video": {
      "main": [
        [
          {
            "node": "YT Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Channel Data": {
      "main": [
        [
          {
            "node": "processChannel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript": {
      "main": [
        [
          {
            "node": "Videos Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT_Channels": {
      "main": [
        [
          {
            "node": "Update Channels",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Limit2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processChannel": {
      "main": [
        [
          {
            "node": "YT_Channels",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID": {
      "main": [
        [
          {
            "node": "VID SUCCEED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VID SUCCEED": {
      "main": [
        [
          {
            "node": "Video Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not SUCCEEDED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Results": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Fields for Video Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit2": {
      "main": [
        [
          {
            "node": "Write_Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields for Video Update": {
      "main": [
        [
          {
            "node": "Update_Videos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID1": {
      "main": [
        [
          {
            "node": "Video #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments": {
      "main": [
        [
          {
            "node": "If zero comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments Sentiment Analysis Agent": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Text → Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        []
      ]
    },
    "If zero comments": {
      "main": [
        [],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "html_summary_audio": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Sentiment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript w/TS": {
      "main": [
        [
          {
            "node": "Summarization Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI2": {
      "ai_languageModel": [
        [
          {
            "node": "Summarization Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Classifier": {
      "main": [
        [],
        [],
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI4": {
      "ai_languageModel": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript Ninja": {
      "main": [
        [
          {
            "node": "Videos Run ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Results": {
      "main": [
        [
          {
            "node": "markdown_report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #1": {
      "main": [
        [
          {
            "node": "Video #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #2": {
      "main": [
        [
          {
            "node": "Video #3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #3": {
      "main": [
        [
          {
            "node": "Comments - more1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments - more1": {
      "main": [
        [
          {
            "node": "cSummary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cSummary": {
      "main": [
        [
          {
            "node": "Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cStrengths": {
      "main": [
        [
          {
            "node": "cOpportunities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cOpportunities": {
      "main": [
        [
          {
            "node": "cRecommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top Comments": {
      "main": [
        []
      ]
    },
    "cRecommendations": {
      "main": [
        []
      ]
    },
    "Editor": {
      "main": [
        [
          {
            "node": "Comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript Excerpts": {
      "main": [
        [
          {
            "node": "cStrengths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs": {
      "main": [
        [
          {
            "node": "Google Docs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown1": {
      "main": [
        [
          {
            "node": "Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "markdown_report": {
      "main": [
        [
          {
            "node": "Markdown1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "set_fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_fields": {
      "main": [
        [
          {
            "node": "Prepare_Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare_Request": {
      "main": [
        [
          {
            "node": "CreateGoogleDoc1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-07T22:59:14.687Z",
  "id": "iK0HfAIjts4uk2N9",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "⭐️⭐️ YT Content [TEST]",
  "nodes": [
    {
      "parameters": {},
      "id": "794dc8d7-c392-40c0-a588-dca9b4b8d425",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        2120,
        1640
      ]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "options": {
          "fields": [
            "vid#",
            "videoURL",
            "vid_id",
            "processVideo",
            "dateProcessed",
            "commentCount",
            "channel",
            "channelName (from Channel)",
            "channelURL (from Channel)"
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2320,
        1640
      ],
      "id": "f3dd61c4-46c0-438d-ae6f-e99b9c39e6f1",
      "name": "Read_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "filterByFormula": "{processChannel} = 1",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2280,
        1020
      ],
      "id": "80113562-3783-4487-bd8b-1b9a0292e1f6",
      "name": "Read_Channels",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processVideo": true,
            "Title": "={{ $json.title }}",
            "videoURL": "={{ $json.url }}",
            "dateProcessed": "={{ $now.format('yyyy-MM-dd T')}}",
            "Status": "Todo",
            "Duration": "={{ $json.duration }}",
            "viewCount": "={{ $json.viewCount }}",
            "publishDate": "={{ $json.date }}",
            "id": "={{ $json.id }}",
            "positive": 0,
            "neutral": 0,
            "negative": 0,
            "thumbnailUrl": "={{ $json.thumbnailUrl }}",
            "Likes": 0,
            "commentCount": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "options": [],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "wordless",
                  "value": "wordless"
                },
                {
                  "name": "advertising",
                  "value": "advertising"
                },
                {
                  "name": "content",
                  "value": "content"
                },
                {
                  "name": "",
                  "value": ""
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Todo",
                  "value": "Todo"
                },
                {
                  "name": "In progress",
                  "value": "In progress"
                },
                {
                  "name": "Done",
                  "value": "Done"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": false,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3660,
        1100
      ],
      "id": "d9b3ddc3-16b6-4361-9206-9c76c5e4cd7c",
      "name": "Write_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $json.processVideo }}",
              "rightValue": "={{ 1 }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2520,
        1640
      ],
      "id": "5c87f4cd-80d4-4eac-80c8-b39665b1e1af",
      "name": "Process_video",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Process Channels\nOldestPostDate: \"2024-01-01\"",
        "height": 480,
        "width": 3040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        880
      ],
      "typeVersion": 1,
      "id": "ca294bd2-3693-4d45-8d97-a4c03c9f431f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 480,
        "width": 3040,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        1420
      ],
      "typeVersion": 1,
      "id": "3d527646-18d4-4508-8d37-e80796a4ef4b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2980,
        1180
      ],
      "id": "978b1306-062d-4e7c-9489-7eb2d9ab5cff",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "channelName": "={{ $json.body[0].channelName }}",
            "channelURL": "={{ $json.body[0].channelUrl }}",
            "processDate": "={{ $now.format('yyyy-MM-dd hh:mm:ss') }}",
            "channelDescription": "=}{{ $json.body[0].channelDescription }}",
            "id": "={{ $('Read_Channels').item.json.id }}",
            "fromYTUrl": "={{ $json.body[0].fromYTUrl }}",
            "input": "={{ $json.body[0].input }}",
            "fromChannelListPage": "={{ $json.body[0].fromChannelListPage }}",
            "channelAvatarUrl": "={{ $json.body[0].channelAvatarUrl }}",
            "channelBannerUrl": "={{ $json.body[0].channelBannerUrl }}",
            "channelId": "={{ $json.body[0].channelId }}",
            "inputChannelUrl": "={{ $json.body[0].inputChannelUrl }}",
            "chNumOfSubs": "={{ $json.body[0].aboutChannelInfo.numberOfSubscribers }}",
            "chTotalViews": "={{ $json.body[0].aboutChannelInfo.channelTotalViews }}",
            "chTotalVideos": "={{ $json.body[0].aboutChannelInfo.channelTotalVideos }}",
            "chJoinedDate": "={{ $json.body[0].aboutChannelInfo.channelJoinedDate }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch_id",
              "displayName": "ch_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch#",
              "displayName": "ch#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "processChannel",
              "displayName": "processChannel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName",
              "displayName": "channelName",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelURL",
              "displayName": "channelURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelDescription",
              "displayName": "channelDescription",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chJoinedDate",
              "displayName": "chJoinedDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processDate",
              "displayName": "processDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalVideos",
              "displayName": "chTotalVideos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalViews",
              "displayName": "chTotalViews",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chNumOfSubs",
              "displayName": "chNumOfSubs",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelId",
              "displayName": "channelId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "fromYTUrl",
              "displayName": "fromYTUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "fromChannelListPage",
              "displayName": "fromChannelListPage",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelAvatarUrl",
              "displayName": "channelAvatarUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelBannerUrl",
              "displayName": "channelBannerUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "inputChannelUrl",
              "displayName": "inputChannelUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Videos",
              "displayName": "Videos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3260,
        920
      ],
      "id": "76878d59-3612-4ad3-b01a-77139ac74d22",
      "name": "Update Channels",
      "executeOnce": false,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "295f3269-0310-4f40-a5b5-ce79dfa811ec",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "ee62a5ec-b104-44fc-b487-1326fba8dd73",
              "name": "channelName",
              "value": "={{ $json.channelName }}",
              "type": "string"
            },
            {
              "id": "ef1e4a11-fa6f-48ca-90e6-0c76ed382f9d",
              "name": "ch#",
              "value": "={{ $json[\"ch#\"] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2500,
        1020
      ],
      "id": "c2914754-764a-4ae9-b81f-d8d99423d400",
      "name": "Initial Channel Data"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/actor-runs/9JEG4AbMU0RbeHx1M?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"dateFilter\": \"year\",\n  \"downloadSubtitles\": true,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": true,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 100,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"scrapeLastNDays\": 400,\n  \"searchQueries\": [\n    \"https://www.youtube.com/watch?v=Q13QOgwoF0E\"\n  ],\n  \"sortVideosBy\": \"NEWEST\",\n  \"startUrls\": [\n    {\n      \"url\": \"https://www.youtube.com/watch?v=qV7xOEKEBDA\",\n      \"method\": \"GET\"\n    }\n  ],\n  \"subtitlesLanguage\": \"en\",\n  \"subtitlesFormat\": \"srt\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "3f5d26b8-a390-4b26-ad20-545bd1fa6dd9",
      "name": "YT Transcript",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1540
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    { \n      \"url\": \"{{ $('Read_Channels').item.json.channelURL }}\" \n    }\n  ],\n  \"maxResults\": 100\n}\n",
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 5
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2980,
        1000
      ],
      "id": "e66d9248-8df9-464c-a73f-e3dc711149f7",
      "name": "YT_Channels",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3260,
        1100
      ],
      "id": "0eb6d540-1be0-4af1-bc11-058350130a84",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $('Read_Channels').item.json.processChannel }}",
              "rightValue": "TRUE",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2740,
        1020
      ],
      "id": "69e8f8e3-0008-4b20-a879-5daf37b60b13",
      "name": "processChannel",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75b181be-d768-45cc-918b-eea4a3cb6c2e",
              "name": "id",
              "value": "={{ $('Read_Videos').item.json.id }}",
              "type": "string"
            },
            {
              "id": "37df7a9c-5e04-4925-b0b9-7697fb70ac59",
              "name": "data.id",
              "value": "={{ $json.body.data.id }}",
              "type": "string"
            },
            {
              "id": "db3c2b19-76d5-42ea-959e-ffb7986c6199",
              "name": "body.data.status",
              "value": "={{ $json.body.data.status }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            },
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2960,
        1540
      ],
      "id": "6c0f2dad-8127-4911-b542-0004d441df2f",
      "name": "Videos Run ID"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2453d745-17ff-41cf-8d67-afd8f766549c",
              "leftValue": "={{ $json.body.data.status }}",
              "rightValue": "={{\"SUCCEEDED\"}}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3160,
        1540
      ],
      "id": "901d6051-b313-41fb-b3a2-ca08555d063a",
      "name": "VID SUCCEED"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/datasets/xAeWiWXwzKOJV4Csa/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "={{ $json.body.data.status }}"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 25
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3400,
        1500
      ],
      "id": "3ff3db22-55d0-4d1d-9511-9c628a7948a8",
      "name": "Video Results",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2000,
        1460
      ],
      "id": "89b70943-b279-432a-8114-e5b17ddf95eb",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        4100,
        1440
      ],
      "id": "41075a45-34f9-434c-9777-62cfa88e38ea",
      "name": "Update_Videos1",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2800,
        1740
      ],
      "id": "21011ccd-af3f-4aaf-8595-fbb2e9f38b7d",
      "name": "not Processed"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3400,
        1660
      ],
      "id": "9958cd9c-f4fc-4bc7-93d0-c356a23cfd4f",
      "name": "Not SUCCEEDED"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3680,
        1440
      ],
      "id": "8d8236e3-8f31-4e39-b2da-ca51f0186956",
      "name": "Limit"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3460,
        1100
      ],
      "id": "61ba0796-9904-445f-8d03-fb91a74cd1f0",
      "name": "Limit2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3bc4a4b5-c908-4a8a-b4d9-175ab5bd77f9",
              "name": "id",
              "value": "={{ $('VID SUCCEED').item.json.id }}",
              "type": "string"
            },
            {
              "id": "2a08d754-d179-45c8-8513-b1d7c460ce23",
              "name": "fields",
              "value": "={{ $('Video Results').item.json.body[0] }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3900,
        1440
      ],
      "id": "c427be34-1c72-41e8-b40d-ec0d0114575a",
      "name": "Fields for Video Update"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 1100,
        "width": 4260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        2180
      ],
      "typeVersion": 1,
      "id": "bb8e3b37-dfe2-4cde-9bcb-7a37df0b427c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2680,
        2360
      ],
      "id": "d51c0d8e-20cc-4f81-b40a-824c0c523e3e",
      "name": "Videos Run ID1"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2020,
        2240
      ],
      "id": "7f32e1c4-0420-432e-b515-02d58878ece2",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "formTitle": "Youtube Video Process",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Youtube Video URL",
              "placeholder": "Paste the link to a Youtube Video",
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "ignoreBots": true,
          "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 14px;\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 14px;\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\n\t/* Colors */\n\t--color-background: #fbfcfe;\n\t--color-test-notice-text: #e6a23d;\n\t--color-test-notice-bg: #fefaf6;\n\t--color-test-notice-border: #f6dcb7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #dbdfe7;\n\t--color-card-shadow: rgba(99, 77, 255, 0.06);\n\t--color-link: #7e8186;\n\t--color-header: #525356;\n\t--color-label: #555555;\n\t--color-input-border: #dbdfe7;\n\t--color-input-text: #71747A;\n\t--color-focus-border: rgb(90, 76, 194);\n\t--color-submit-btn-bg: #ff6d5a;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #ea1f30;\n\t--color-required: #ff6d5a;\n\t--color-clear-button-bg: #7e8186;\n\t--color-html-text: #555;\n\t--color-html-link: #ff6d5a;\n\t--color-header-subtext: #7e8186;\n\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 12px;\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\n\t/* Dimensions */\n\t--container-width: 448px;\n\t--submit-btn-height: 48px;\n\t--checkbox-size: 18px;\n\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n}"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        2100,
        2360
      ],
      "id": "9b21b368-2fb1-4ded-a7e6-8ff41212be6d",
      "name": "On form submission",
      "webhookId": "61c131c3-7c60-4418-9f04-77a712ea6e87",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/insight_api_labs~youtube-comments-1-month---reliable-efficient/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"video_urls\": [\n    {\n      \"url\": \"{{ $('Edit Fields').item.json['Youtube Video URL'] }}\",\n      \"method\": \"GET\"\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {}
          }
        }
      },
      "id": "9f6b403c-48ee-49c8-814d-17eecd8473a9",
      "name": "Comments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2780,
        2900
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "pageUrl, comment",
        "options": {
          "destinationFieldName": ""
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3200,
        2920
      ],
      "id": "f385b36c-6e5a-49d7-846d-2b57b9c97f86",
      "name": "Split Out"
    },
    {
      "parameters": {
        "resource": "audio",
        "input": "={{ $json.Markdown }}",
        "voice": "nova",
        "options": {
          "response_format": "aac",
          "binaryPropertyOutput": "audio"
        }
      },
      "id": "e779edb7-a666-42ad-beed-51fd1942694e",
      "name": "Text → Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        5180,
        2800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "n6jJpStEewoZQA9T",
          "name": "OpenAi account 6"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "inputText": "={{ $json.comment }}",
        "options": {
          "categories": "Positive, Neutral, Negative",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": false,
          "enableAutoFixing": false
        }
      },
      "id": "c848fc0b-ee7a-4c97-bac1-31ce0fc90a1d",
      "name": "Comments Sentiment Analysis Agent",
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        3400,
        2920
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "html": "={{ $json.html }}",
        "destinationKey": "Markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        4980,
        2800
      ],
      "id": "8f6fe8ff-adf8-4e24-9e9a-5a396dfea5dc",
      "name": "Markdown"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4940,
        2260
      ],
      "id": "b8ef0c2d-86f1-4577-bbff-cb4bdd52e64b",
      "name": "Merge2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "adad4ab3-6a87-493b-8a65-98afd8ff7ca7",
              "leftValue": "={{ $json.commentsCount }}",
              "rightValue": "={{0}}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3000,
        2900
      ],
      "id": "81ab854e-61de-4cb0-a1bc-594f652799b3",
      "name": "If zero comments"
    },
    {
      "parameters": {
        "html": "<html>\n  <head>\n    <style>\n      body { font-family: Arial, sans-serif; padding: 20px; }\n      img { max-width: 100%; height: auto; }\n      .key-points { margin: 20px 0; }\n      .metadata { color: #888; }\n      .separator {border-bottom: 1px solid #ccc; margin: 20px 0;}\n    </style>\n  </head>\n  <body>\n    <h2>{{ $('Youtube Transcript').first().json.videoTitle }}</h2>\n    <h3>Summary</h3>\n    <p>{{ $('Summary Agent').first().json.text }}</p>\n    <hr></hr>          \n    <div class=\"metadata\">             \n      <h4>Video Information</h4>\n      <ul>               \n        <li>Published: {{ $now.format('yyyy-MMM-dd') }} </li>\n        <li>Duration: under {{ $('Read_Videos').first().json.Duration.toDateTime().minute+1}} minutes</li>\n        <li>Views: {{ $('Read_Videos').first().json.Viewcount }}</li>\n        <li>Likes: {{ $('Read_Videos').first().json.Likes }}</li> </ul>\n    </div>            \n    <div class=\"metadata\">\n      <h4>Comment Sentiment Analysis</h4>\n      <ul>\n        <li>Sentiment NPS: {{ $('Sentiment Stats').item.json.snps }}\" %\"</li>\n      </ul>\n    </div>\n    <hr></hr>\n  </body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        4800,
        2800
      ],
      "id": "bc4d00f9-3c8e-4058-8b71-b02a74442f8a",
      "name": "html_summary_audio"
    },
    {
      "parameters": {
        "folderId": "1gSu4CuUtNEuoqfguuBZw5YCloEjKf9VH",
        "title": "={{ $('Video #1').item.json.videoId }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        5220,
        2500
      ],
      "id": "fdd27649-12cf-404a-88d9-33a071e1f0db",
      "name": "Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3820,
        2920
      ],
      "id": "ec0a1a80-0674-4237-a38c-05e21f5cc72a",
      "name": "Aggregate",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "summarizationMethodAndPrompts": {
            "values": {
              "combineMapPrompt": "=Write a concise summary of the following:\n\n\"{{ $json.transcript }}\"\n\nCONCISE SUMMARY: ",
              "prompt": "=Write a concise summary of the following:\n\n\n\"{{ $json.transcript }}\"\n\n\nCONCISE SUMMARY:"
            }
          }
        }
      },
      "id": "f1308e54-d451-4980-ba40-8ba0124b6257",
      "name": "Summarization Chain2",
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 2,
      "position": [
        6800,
        2400
      ]
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/acts/streamers~youtube-scraper/runs/last?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"startUrls\": \"[{{ $('Process_video').first().json.videoURL }}]\",\n    \"includeTimestamps\": \"Yes\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6640,
        2380
      ],
      "id": "06252a93-395a-494e-9873-1c8306b24344",
      "name": "Transcript w/TS"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f617cd27-847a-4c21-89e7-21ebfe83d8aa",
      "name": "OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6820,
        2580
      ],
      "credentials": {
        "openAiApi": {
          "id": "pZ4IJBXWzhYzZfRs",
          "name": "OpenAi _Blue&"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "0b4dc8d1-6497-45d6-af95-1d92fe11b250",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6380,
        2140
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.body[0].transcript || '[null]' }}",
        "categories": {
          "categories": [
            {
              "category": "Wordless",
              "description": "there is no transcript"
            },
            {
              "category": "Ad",
              "description": "transcript is an advertisement"
            },
            {
              "category": "Content",
              "description": "When transcript is not an ad. It is real content."
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "=You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\n\nYour goal is to help clasify the youtube videos that fall in the following categories:\n\"ad\", \"wordless\", \"content\"\n\nIf the transcript is empty, respond \"wordless\"\nIf the transcript is all about an ad, respond \"ad\". \nIf the transcript has relevant content which is not advertising, respond \"content\"",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        6100,
        1980
      ],
      "id": "270480b1-6dff-48f5-ae6d-e5e39ab0d62f",
      "name": "Classifier",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3d87a111-84f3-4e45-a964-fcb18f319790",
              "name": "Youtube Video URL",
              "value": "https://www.youtube.com/watch?v=62SA_YwUg5Q",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2300,
        2000
      ],
      "id": "287b5c8e-0b85-4926-8a7d-f06a25480741",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "ccac1282-79b3-4de7-b22c-68c8c1a65478",
      "name": "OpenAI4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3380,
        3080
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/9PPh3FVGsPLtVqWLb/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    \"{{ $json['Youtube Video URL'] }}\"\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "49c1f4f6-a43c-4547-b29c-94317e704522",
      "name": "YT Transcript Ninja",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        2360
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Initialize counters for each sentiment category\nlet positiveCount = 0;\nlet neutralCount = 0;\nlet negativeCount = 0;\n\n// Get the data from the Aggregate node\nconst aggregateData = $input.first().json;\n\n// Check if we have data array\nif (aggregateData && aggregateData.data && Array.isArray(aggregateData.data)) {\n  const dataItems = aggregateData.data;\n  const totalComments = dataItems.length;\n  \n  // Loop through each data item\n  dataItems.forEach(item => {\n    // Access the sentiment category from the sentimentAnalysis field\n    if (item.sentimentAnalysis && item.sentimentAnalysis.category) {\n      const category = item.sentimentAnalysis.category.toLowerCase();\n      \n      // Count based on sentiment category\n      if (category.includes('positive')) {\n        positiveCount++;\n      } else if (category.includes('negative')) {\n        negativeCount++;\n      } else if (category.includes('neutral')) {\n        neutralCount++;\n      }\n    }\n  });\n  \n  // Calculate percentages\n  const percentPositive = totalComments > 0 ? (positiveCount / totalComments * 100).toFixed(1) : 0;\n  const percentNeutral = totalComments > 0 ? (neutralCount / totalComments * 100).toFixed(1) : 0;\n  const percentNegative = totalComments > 0 ? (negativeCount / totalComments * 100).toFixed(1) : 0;\n  \n  // Return the summary\n  return {\n    json: {\n      summary: {\n        totalComments,\n        positive: {\n          count: positiveCount,\n          percentage: parseFloat(percentPositive)\n        },\n        neutral: {\n          count: neutralCount,\n          percentage: parseFloat(percentNeutral)\n        },\n        negative: {\n          count: negativeCount,\n          percentage: parseFloat(percentNegative)\n        }\n      }\n    }\n  };\n} else {\n  // Handle case where there's no data\n  return {\n    json: {\n      summary: {\n        totalComments: 0,\n        positive: { count: 0, percentage: 0 },\n        neutral: { count: 0, percentage: 0 },\n        negative: { count: 0, percentage: 0 }\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4140,
        2920
      ],
      "id": "1c51a485-7d5d-4fdd-95a9-60f09fdf416d",
      "name": "Sentiment Results",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"proxy\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"RESIDENTIAL\"\n    ],\n    \"apifyProxyCountry\": \"US\"\n  },\n  \"startUrls\": [\n    \"{{ $json.body[0].url }}\"\n  ],\n  \"maxConcurrency\": 10,\n  \"minConcurrency\": 1,\n  \"maxRequestRetries\": 10\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2960,
        2360
      ],
      "id": "b5a62cff-4e91-476d-94c2-0a31f3696da6",
      "name": "Video #1"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/easyapi~youtube-video-metadata-scraper/runs?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\"https://www.youtube.com/watch?{{ $json.videoId }}\"]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3160,
        2360
      ],
      "id": "cc8a6f5a-1237-40cb-a04c-d728f70d8b09",
      "name": "Video #2"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/xZZCnxEXR5Igzeds2/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"proxy\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"RESIDENTIAL\"\n    ],\n    \"apifyProxyCountry\": \"US\"\n  },\n  \"startUrls\": [\n    \"{{ $('Videos Run ID1').first().json.body[0].url }}\"\n  ],\n  \"maxConcurrency\": 10,\n  \"minConcurrency\": 1,\n  \"maxRequestRetries\": 10\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3340,
        2360
      ],
      "id": "240f3002-e256-490b-8928-959d6a5e883d",
      "name": "Video #3"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\n    \"<{{ $json.body[0].url }}>\"\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3540,
        2360
      ],
      "id": "d29ae456-9652-46c2-845a-b7ff20b7af8e",
      "name": "Comments - more1"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and create a concise, professional summary (250-300 words) that describes:\n\n1. The main topic and purpose of the video\n2. The key points or sections covered \n3. The presenter's communication approach\n4. 3-4 specific notable insights from the content\n5. Who would benefit most from this video\n\nUse only the information provided: \nTitle: \"{{ $('Video #3').item.json.title }}\", \nDescription: \"{{ $('Video #3').item.json.description }}\", \nTags: {{ $('Video #3').item.json.tags }}, \nand these transcript excerpts: {{ $('Videos Run ID1').item.json.body[0].transcript }}\n\nFormat your response as a neutral, analytical paragraph without using first-person language.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3720,
        2360
      ],
      "id": "9cd21e03-08f1-40c8-8a1a-7ab72a3d9b90",
      "name": "cSummary",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and generate 5 specific content strengths for a video titled \"{{ $('Videos Run ID1').item.json.body[0].videoTitle }}\" with these details:\n- Description: \"{{ $('Video #3').item.json.description }}\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- Duration: {{ $('Video #3').item.json.lengthInSeconds }}\n- Top comments: {{topComments}}\n\nFor each strength:\n1. Identify a specific aspect of the content that appears to be executed well\n2. Format as \"Category: Detailed explanation\" (e.g., \"Visual Presentation: High-quality graphics with clear annotations make complex concepts easy to understand.\")\n3. Focus on content quality, structure, presentation style, information value, or audience engagement\n4. Base your analysis on the video's topic, structure, and audience reception\n5. Provide specific, substantive analysis rather than generic praise\n\nEnsure each strength is distinct and focuses on a different aspect of the content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3000,
        2620
      ],
      "id": "0fe073b2-bb89-464b-9dee-cf7c638d2ecd",
      "name": "cStrengths",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Based on this YouTube video information, identify 5 specific improvement opportunities for a video titled \"\" with:\n- Description: \"{{ $('Video #3').item.json.description }}\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- View-to-like ratio: {{$json[\"likesToViewsRatio\"]}}\n- Comments: {{topComments}}\n\nFor each opportunity:\n1. Identify a specific aspect that could be enhanced or expanded\n2. Format as \"Area: Detailed explanation\" (e.g., \"Technical Depth: The encryption section could benefit from more detailed examples showing practical implementation.\")\n3. Base your suggestions on viewer feedback in comments and content gaps based on the topic\n4. Be constructive and specific rather than critical\n5. Focus on content expansion, audience engagement, technical clarifications, or additional value-add elements\n\nEach opportunity should offer actionable insight that would meaningfully improve the video content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3360,
        2620
      ],
      "id": "c7e54c0d-7f68-43e1-9bea-bee97c83f325",
      "name": "cOpportunities",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Create 5 strategic, actionable recommendations for a YouTube creator to improve and expand upon their video \"{{ $('Video #3').item.json.title }}\" based on this data:\n- Video metrics: {{ $('Video #3').item.json.viewCount }} views, {{ $('Video #3').item.json.likeCount }} likes, {{ $('Video #3').item.json.commentCount }} comments\n- Description: \"\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- Content strengths: {{ $('cStrengths').item.json.message.content }}\n- Content opportunities: {{ $json.message.content }}\n- Top comments: {{topComments}}\n\nEach recommendation should:\n1. Start with a clear, action-oriented title (e.g., \"Develop Series Extension:\")\n2. Include a detailed, specific explanation (approximately 30-50 words)\n3. Address a strategic opportunity to increase engagement, viewership, or content value\n4. Connect directly to insights from the data provided\n5. Include a specific potential outcome or benefit\n\nFormat each as \"Action Title: Detailed explanation with strategic rationale.\"\n\nRecommendations should be tailored to this specific video and channel context, not generic YouTube advice.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3720,
        2620
      ],
      "id": "75305522-c594-4eba-9c71-d76bfef2a4bf",
      "name": "cRecommendations",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate 5 realistic YouTube comments for a video titled \"{{ $('Video #3').item.json.title }}\" with description \"{{ $('Video #3').item.json.description }}\".\n\nThe video has {{ $('Video #3').item.json.viewCount }} views, {{ $('Video #3').item.json.likeCount }} likes, and {{ $('Video #3').item.json.commentCount }} comments, suggesting it's a popular video with good engagement.\n\nCreate comments that:\n1. Reflect diverse viewer perspectives (positive feedback, constructive criticism, expert insights, beginner questions, etc.)\n2. Reference specific content that would likely be in the video based on its title and description\n3. Include reasonable usernames that match the likely audience for this content\n4. Show varying levels of detail and engagement with the content\n5. Include at least one comment that mentions a minor correction or suggestion for improvement\n\nFormat each comment as a JSON object with \"user\" and \"comment\" properties. The comments should be highly realistic and specific to this video's content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4080,
        2620
      ],
      "id": "857b9872-0b43-48f6-a159-5ebe202f7387",
      "name": "Top Comments",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert Editor specializing in refining and polishing content to ensure it meets the highest quality standards. Your role is to review and improve the written material produced by multiple Writers while maintaining academic integrity and proper source attribution. Your task is to provide a highly polished, SEO-optimized summary with proper citation management.\n\n## Content Review Instructions:\nCarefully read the entire content piece.\nCheck for grammar, spelling, and punctuation errors.\nEnsure consistency in tone, style, and voice throughout the piece.\nVerify that the content aligns with the original brief.\nImprove sentence structure and flow for better readability.\nOptimize headlines, subheadings, and formatting for better engagement, especially for SEO.\nSuggest improvements or additions to enhance the overall quality of the content.\n\nToday's date is: {{ $now }}\n\n{{ $json.message.content }}",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4060,
        2360
      ],
      "id": "63828795-63b7-4fad-a7b4-efde33781da6",
      "name": "Editor",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Given the YouTube video title \"{{ $('Video #3').item.json.title }}\" about {{ $('Video #3').item.json.tags }}, generate 7 realistic transcript excerpts that would appear throughout an educational video on this topic.\n\nEach excerpt should:\n1. Include a timestamp (starting with 0:00 and ending near the video duration of {{ $('Video #3').item.json.lengthInSeconds,\"seconds\"}})\n2. Reflect natural speaking patterns of an educational content creator\n3. Represent key moments in the video's narrative structure\n4. Include an introduction, key points for each major section, and a conclusion\n5. Match the tone and style suggested by the video description: \n\"{{ $('Video #3').item.json.description }}\"\n\nFormat each excerpt as a JSON object with \"time\" and \"text\" properties.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2640,
        2620
      ],
      "id": "a8f0d78e-7ba0-4b76-89e1-37ac528970c7",
      "name": "Transcript Excerpts",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"videoId\": \"{{ $('Video #1').item.json.videoId }}\",\n  \"videoTitle\": \"{{ $('Videos Run ID1').item.json.body[0].videoTitle }}\",\n  \"videoUrl\": \"{{ $('Videos Run ID1').item.json.body[0].url }}\",\n  \"publishDate\": \"{{ $('Videos Run ID1').item.json.body[0].videoPostDate }}\",\n  \"videoDuration\": \"{{ $('Video #3').item.json.lengthInSeconds }}\",\n  \"viewCount\": {{ $('Videos Run ID1').item.json.body[0].views }},\n  \"likeCount\": {{ $('Video #3').item.json.likeCount }},\n  \"commentCount\": {{ $('Video #3').item.json.commentCount }},\n  \"channelName\": \"{{ $('Videos Run ID1').item.json.body[0].channelName }}\",\n  \"channelUrl\": \"{{ $('Video #3').item.json.channelURL }}\",\n  \"subscriberCount\": \"{{ $('Video #3').item.json.channelSubscribers }}\",\n  \"videoDescription\": \"{{ $('Video #3').item.json.description }}\",\n  \"videoTags\": [{{ $('Video #3').item.json.tags }}],\n  \"reportDate\": {{$now.format('yyyy-MM-dd hh:mm:ss')}},\n  \"contentSummary\": \"{{ $('Editor').item.json.message.content }}\",\n\n  \"transcriptExcerpts\": [\n    {\n    {{ $('Transcript Excerpts').item.json.message.content }}\n    }\n  ],\n  \"contentStrengths\": [\n    {{ $('cStrengths').item.json.message.content }}\n  ],\n  \"contentOpportunities\": [\n   {{ $('cOpportunities').item.json.message.content }}\n  ],\n  \"recommendations\": [\n    {{ $('cRecommendations').item.json.message.content }}\n  ]\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5180,
        2240
      ],
      "id": "e03e917e-df9b-466e-9eb1-ed5bd612d504",
      "name": "gather_data1",
      "alwaysOutputData": false,
      "executeOnce": true
    },
    {
      "parameters": {
        "html": "# YouTube Video Analysis Report\n\n**Report Date:** {{$now.format('yyyy-MM-dd')}}\n\n---\n\n## Video Overview\n\n| | |\n|------------|-------------|\n| **Title** | {{ $('Videos Run ID1').item.json.body[0].videoTitle }} |\n| **URL** | {{ $('Videos Run ID1').item.json.body[0].url }} |\n| **Published** | {{ $('Videos Run ID1').item.json.body[0].videoPostDate }} |\n| **Duration** | {{ $('Video #3').item.json.lengthInSeconds/60 }} min |\n| **Channel** | [{{ $('Video #3').item.json.channelURL }}) |\n| **Subscribers** | {{ $('Video #3').item.json.channelSubscribers }} |\n\n![Video Thumbnail]({{$node[\"Set\"].json[\"thumbnailUrl\"]}})\n\n---\n\n## Performance Metrics\n\n| Metric | Count | Ratio | Assessment |\n|--------|-------|-------|------------|\n| **Views** | {{ $('Video #3').item.json.viewCount }} | - | {% if $node[\"Set\"].json[\"viewCount\"] > 100000 %}Strong{% elif $node[\"Set\"].json[\"viewCount\"] > 10000 %}Good{% else %}Moderate{% endif %} |\n| **Likes** | {{ $('Video #3').item.json.likeCount }} |  | {% if $node[\"Set\"].json[\"likesToViewsRatio\"] > 0.08 %}Above Average{% elif $node[\"Set\"].json[\"likesToViewsRatio\"] > 0.05 %}Average{% else %}Below Average{% endif %} |\n| **Comments** | {{ $('Video #3').item.json.commentCount }} | % of views | {% if $node[\"Set\"].json[\"commentsToViewsRatio\"] > 0.005 %}High Engagement{% elif $node[\"Set\"].json[\"commentsToViewsRatio\"] > 0.002 %}Average Engagement{% else %}Low Engagement{% endif %} |\n\n---\n\n## Content Analysis\n\n### Video Description\n{{ $('Video #3').item.json.description }}\n\n### Tags\n{% for tag in $node[\"Set\"].json[\"videoTags\"] %}#{{ $('Video #3').item.json.tags }} {% endfor %}\n\n### Content Summary\n\n{{ $('Editor').item.json.message.content }}\n\n---\n\n## Audience Engagement\n\n### Top Comments\n\n{% for comment in $node[\"Set\"].json[\"topComments\"] %}\n> **{{comment.user}}:** \"{{comment.comment}}\"\n\n{% endfor %}\n\n### Key Transcript Moments\n\n{% for excerpt in $node[\"Set\"].json[\"transcriptExcerpts\"] %}\n**{{excerpt.time}}**: {{excerpt.text}}\n\n{% endfor %}\n\n---\n\n## SWOT Analysis\n\n### Content Strengths\n\n{% for strength in $node[\"Set\"].json[\"contentStrengths\"] %}\n**{{strength.split(':')[0]}}**: {{strength.split(':')[1]}}\n\n{% endfor %}\n\n### Content Opportunities\n\n{% for opportunity in $node[\"Set\"].json[\"contentOpportunities\"] %}\n**{{opportunity.split(':')[0]}}**: {{opportunity.split(':')[1]}}\n\n{% endfor %}\n\n---\n\n## Recommendations\n\n{% for rec in $node[\"Set\"].json[\"recommendations\"] %}\n### {{loop.index}}. {{rec.split(':')[0]}}\n{{rec.split(':')[1]}}\n\n{% endfor %}\n\n---\n\n*This report is based solely on publicly available information and estimated metrics. Advanced analytics like watch time, retention rates, and demographic data are only available to the channel owner.*"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        5740,
        1980
      ],
      "id": "6d929b78-323d-4955-ba1f-ac8e76fb9949",
      "name": "html_summary1"
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "simple": false,
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $('markdown_report').item.json.html }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        5440,
        2500
      ],
      "id": "0d8e6329-9d50-4d0c-9af0-6b0bd09c327a",
      "name": "Google Docs1",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "mode": "markdownToHtml",
        "markdown": "={{ $json.html }}",
        "destinationKey": "html",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        5020,
        2500
      ],
      "id": "d8954a4d-baba-499c-9d22-792ce51a8dee",
      "name": "Markdown1"
    },
    {
      "parameters": {
        "html": "# YouTube Video Analysis Report\n\n**Report Date:** {{$now.format('yyyy-MM-dd')}}\n\n---\n\n## Video Overview\n\n| | |\n|------------|-------------|\n| **Title** | {{ $('Videos Run ID1').item.json.body[0].videoTitle }} |\n| **URL** | {{ $('Videos Run ID1').item.json.body[0].url }} |\n| **Published** | {{ $('Videos Run ID1').item.json.body[0].videoPostDate }} |\n| **Duration** | {{ $('Video #3').item.json.lengthInSeconds/60 }} min |\n| **Channel** | [{{ $('Video #3').item.json.channelURL }}) |\n| **Subscribers** | {{ $('Video #3').item.json.channelSubscribers }} |\n\n\n---\n\n## Performance Metrics\n\n| Metric | Count | Ratio | Assessment |\n|--------|-------|-------|------------|\n| **Views** | {{ $('Video #3').item.json.viewCount }} | - | {% if $node[\"Set\"].json[\"viewCount\"] > 100000 %}Strong{% elif $node[\"Set\"].json[\"viewCount\"] > 10000 %}Good{% else %}Moderate{% endif %} |\n| **Likes** | {{ $('Video #3').item.json.likeCount }} |  | {% if $node[\"Set\"].json[\"likesToViewsRatio\"] > 0.08 %}Above Average{% elif $node[\"Set\"].json[\"likesToViewsRatio\"] > 0.05 %}Average{% else %}Below Average{% endif %} |\n| **Comments** | {{ $('Video #3').item.json.commentCount }} | % of views | {% if $node[\"Set\"].json[\"commentsToViewsRatio\"] > 0.005 %}High Engagement{% elif $node[\"Set\"].json[\"commentsToViewsRatio\"] > 0.002 %}Average Engagement{% else %}Low Engagement{% endif %} |\n\n---\n\n## Content Analysis\n\n### Video Description\n{{ $('Video #3').item.json.description }}\n\n### Tags\n{% for tag in $node[\"Set\"].json[\"videoTags\"] %}#{{ $('Video #3').item.json.tags }} {% endfor %}\n\n### Content Summary\n\n{{ $('Editor').item.json.message.content }}\n\n---\n\n*This report is based solely on publicly available information and estimated metrics. Advanced analytics like watch time, retention rates, and demographic data are only available to the channel owner.*"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        4820,
        2500
      ],
      "id": "7bfa2210-0b2d-43ef-bc77-194bcda01a09",
      "name": "markdown_report"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/upload/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "uploadType",
              "value": "multipart"
            },
            {
              "name": "Filename",
              "value": "={{ $('Video #3').item.json.id }}"
            },
            {
              "name": "output",
              "value": "={{ $json.html }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5340,
        1960
      ],
      "id": "02b72ee4-57a9-46fb-a23c-26f36cec501f",
      "name": "HTTP Request",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        2080,
        3460
      ],
      "id": "dca0bcdb-67d8-468a-adbf-6d26fe0aa324",
      "name": "When chat message received",
      "webhookId": "11daa23e-a970-42e5-8253-60f1366faded",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "uploadType",
              "value": "multipart"
            },
            {
              "name": "supportsAllDrives",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "multipart/related; boundary=divider",
        "body": "={{ $json.rawData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2700,
        3460
      ],
      "id": "ea688345-20de-4b00-9fdc-113b2e5f778b",
      "name": "CreateGoogleDoc1",
      "notesInFlow": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e7ee03ac-13e3-4fca-a7bc-57c8fc56dc42",
              "name": "document_name",
              "value": "=testfile",
              "type": "string"
            },
            {
              "id": "48a07ef2-ae46-4bfc-aa7e-d92a74ef46d6",
              "name": "html_content",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "22b02fba-ba72-423a-b92f-1191a183a554",
              "name": "drive_folder_id",
              "value": "1qFasd7qnWYMG5DuH9_QL6z47RJszAJRX",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2280,
        3460
      ],
      "id": "cdb5c739-964a-48c9-901c-4f325faab631",
      "name": "set_fields",
      "notesInFlow": true
    },
    {
      "parameters": {
        "jsCode": "const boundary = 'divider';\nconst docName = $input.first().json.document_name;\nconst folderId = $input.first().json.drive_folder_id;\nconst htmlContent = $input.first().json.html_content;\n\nconst metadata = JSON.stringify({\n  name: docName,\n  mimeType: \"application/vnd.google-apps.document\",\n  parents: [folderId]\n});\n\nconst htmlWithStyles = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <style>\n    /* Add bottom margin to block elements for spacing */\n    p,\n    ul,\n    ol,\n    table,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      margin-bottom: 10pt;\n    }\n\n    h2 {\n      margin-top: 20pt;\n    }\n\n    /* Prevent margin collapse issues or excessive space inside lists */\n    li {\n       margin-bottom: 2pt; /* Optional: small space between list items */\n    }\n\n    /* Remove margin from the last child within common containers if needed */\n    /* This might be overly aggressive, test without it first */\n    /*\n    body > *:last-child,\n    li > *:last-child {\n       margin-bottom: 0;\n    }\n    */\n  </style>\n</head>\n<body>\n  ${htmlContent}\n</body>\n</html>\n`;\n\n// Construct the body with literal \\r\\n ONLY\nlet body = `--${boundary}\\r\\n`;\nbody += `Content-Type: application/json; charset=UTF-8\\r\\n`;\nbody += `\\r\\n`; // Blank line\nbody += `${metadata}\\r\\n`;\nbody += `--${boundary}\\r\\n`;\nbody += `Content-Type: text/html\\r\\n`;\nbody += `\\r\\n`; // Blank line\nbody += `${htmlWithStyles}\\r\\n`; // Add the HTML content\nbody += `--${boundary}--\\r\\n`; // Final boundary\n\nreturn {\n  rawData: body \n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        3460
      ],
      "id": "ac584ff7-657f-4351-9d7d-102afe18779a",
      "name": "Prepare_Request"
    },
    {
      "parameters": {
        "operation": "update",
        "fileId": {
          "__rl": true,
          "value": "1GsIi37YAY-24DI8xQVBWJpSMSze_OQE73e9lv7X_dEI",
          "mode": "list",
          "cachedResultName": "62SA_YwUg5Q",
          "cachedResultUrl": "https://docs.google.com/document/d/1GsIi37YAY-24DI8xQVBWJpSMSze_OQE73e9lv7X_dEI/edit?usp=drivesdk"
        },
        "changeFileContent": true,
        "inputDataFieldName": "=data {{ $('markdown_report').item.json.html }}",
        "newUpdatedFileName": "={{ $('Google Docs').item.json.name }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        5860,
        2500
      ],
      "id": "8c744a5e-f9c4-4e88-8bc0-282ea4856b8a",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "operation": "html",
        "binaryPropertyName": "={{ $('markdown_report').item.json.html }}",
        "options": {
          "fileName": "={{ $('Google Docs').item.json.name }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        5660,
        2500
      ],
      "id": "16102fe4-ed36-4260-81ff-261f4d6502bc",
      "name": "Convert to File"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-05-12T16:52:09.000Z",
  "versionId": "3222da6b-d827-4850-bccc-7f006484dfca"
}