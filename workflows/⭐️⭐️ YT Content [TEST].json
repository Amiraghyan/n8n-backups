{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Videos": {
      "main": [
        [
          {
            "node": "Process_video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Channels": {
      "main": [
        [
          {
            "node": "Initial Channel Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process_video": {
      "main": [
        [
          {
            "node": "YT Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Channel Data": {
      "main": [
        [
          {
            "node": "processChannel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript": {
      "main": [
        [
          {
            "node": "Videos Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT_Channels": {
      "main": [
        [
          {
            "node": "Update Channels",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Limit2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processChannel": {
      "main": [
        [
          {
            "node": "YT_Channels",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID": {
      "main": [
        [
          {
            "node": "VID SUCCEED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VID SUCCEED": {
      "main": [
        [
          {
            "node": "Video Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not SUCCEEDED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Results": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Fields for Video Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit2": {
      "main": [
        [
          {
            "node": "Write_Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields for Video Update": {
      "main": [
        [
          {
            "node": "Update_Videos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID1": {
      "main": [
        [
          {
            "node": "Comments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Video #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments": {
      "main": [
        [
          {
            "node": "If zero comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments Sentiment Analysis Agent": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Text → Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "gather_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "html_summary": {
      "main": [
        [
          {
            "node": "Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If zero comments": {
      "main": [
        [],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "html_summary_audio": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Top Comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript w/TS": {
      "main": [
        [
          {
            "node": "Summarization Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI2": {
      "ai_languageModel": [
        [
          {
            "node": "Summarization Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Editor": {
      "main": [
        [
          {
            "node": "Tscripts Excerpts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classifier": {
      "main": [
        [],
        [],
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI4": {
      "ai_languageModel": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript Ninja": {
      "main": [
        [
          {
            "node": "Videos Run ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Results": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "OpenAI5": {
      "ai_languageModel": [
        [
          {
            "node": "Editor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Video #1": {
      "main": [
        [
          {
            "node": "Video #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #2": {
      "main": [
        [
          {
            "node": "Video #3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #3": {
      "main": [
        [
          {
            "node": "Comments - more1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments - more1": {
      "main": [
        [
          {
            "node": "cSummary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gather_data": {
      "main": [
        [
          {
            "node": "html_summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cSummary": {
      "main": [
        [
          {
            "node": "Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cStrengths": {
      "main": [
        [
          {
            "node": "cOpportunities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cOpportunities": {
      "main": [
        [
          {
            "node": "cRecommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tscripts Excerpts": {
      "main": [
        [
          {
            "node": "cStrengths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top Comments": {
      "main": [
        [
          {
            "node": "Sentiment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cRecommendations": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-07T22:59:14.687Z",
  "id": "iK0HfAIjts4uk2N9",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "⭐️⭐️ YT Content [TEST]",
  "nodes": [
    {
      "parameters": {},
      "id": "794dc8d7-c392-40c0-a588-dca9b4b8d425",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        2120,
        1640
      ]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "options": {
          "fields": [
            "vid#",
            "videoURL",
            "vid_id",
            "processVideo",
            "dateProcessed",
            "commentCount",
            "channel",
            "channelName (from Channel)",
            "channelURL (from Channel)"
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2320,
        1640
      ],
      "id": "f3dd61c4-46c0-438d-ae6f-e99b9c39e6f1",
      "name": "Read_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "filterByFormula": "{processChannel} = 1",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2280,
        1020
      ],
      "id": "80113562-3783-4487-bd8b-1b9a0292e1f6",
      "name": "Read_Channels",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processVideo": true,
            "Title": "={{ $json.title }}",
            "videoURL": "={{ $json.url }}",
            "dateProcessed": "={{ $now.format('yyyy-MM-dd T')}}",
            "Status": "Todo",
            "Duration": "={{ $json.duration }}",
            "viewCount": "={{ $json.viewCount }}",
            "publishDate": "={{ $json.date }}",
            "id": "={{ $json.id }}",
            "positive": 0,
            "neutral": 0,
            "negative": 0,
            "thumbnailUrl": "={{ $json.thumbnailUrl }}",
            "Likes": 0,
            "commentCount": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "options": [],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "wordless",
                  "value": "wordless"
                },
                {
                  "name": "advertising",
                  "value": "advertising"
                },
                {
                  "name": "content",
                  "value": "content"
                },
                {
                  "name": "",
                  "value": ""
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Todo",
                  "value": "Todo"
                },
                {
                  "name": "In progress",
                  "value": "In progress"
                },
                {
                  "name": "Done",
                  "value": "Done"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": false,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3660,
        1100
      ],
      "id": "d9b3ddc3-16b6-4361-9206-9c76c5e4cd7c",
      "name": "Write_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $json.processVideo }}",
              "rightValue": "={{ 1 }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2520,
        1640
      ],
      "id": "5c87f4cd-80d4-4eac-80c8-b39665b1e1af",
      "name": "Process_video",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Process Channels\nOldestPostDate: \"2024-01-01\"",
        "height": 480,
        "width": 3040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        880
      ],
      "typeVersion": 1,
      "id": "ca294bd2-3693-4d45-8d97-a4c03c9f431f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 480,
        "width": 3040,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        1420
      ],
      "typeVersion": 1,
      "id": "3d527646-18d4-4508-8d37-e80796a4ef4b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2980,
        1180
      ],
      "id": "978b1306-062d-4e7c-9489-7eb2d9ab5cff",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "channelName": "={{ $json.body[0].channelName }}",
            "channelURL": "={{ $json.body[0].channelUrl }}",
            "processDate": "={{ $now.format('yyyy-MM-dd hh:mm:ss') }}",
            "channelDescription": "=}{{ $json.body[0].channelDescription }}",
            "id": "={{ $('Read_Channels').item.json.id }}",
            "fromYTUrl": "={{ $json.body[0].fromYTUrl }}",
            "input": "={{ $json.body[0].input }}",
            "fromChannelListPage": "={{ $json.body[0].fromChannelListPage }}",
            "channelAvatarUrl": "={{ $json.body[0].channelAvatarUrl }}",
            "channelBannerUrl": "={{ $json.body[0].channelBannerUrl }}",
            "channelId": "={{ $json.body[0].channelId }}",
            "inputChannelUrl": "={{ $json.body[0].inputChannelUrl }}",
            "chNumOfSubs": "={{ $json.body[0].aboutChannelInfo.numberOfSubscribers }}",
            "chTotalViews": "={{ $json.body[0].aboutChannelInfo.channelTotalViews }}",
            "chTotalVideos": "={{ $json.body[0].aboutChannelInfo.channelTotalVideos }}",
            "chJoinedDate": "={{ $json.body[0].aboutChannelInfo.channelJoinedDate }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch_id",
              "displayName": "ch_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch#",
              "displayName": "ch#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "processChannel",
              "displayName": "processChannel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName",
              "displayName": "channelName",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelURL",
              "displayName": "channelURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelDescription",
              "displayName": "channelDescription",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chJoinedDate",
              "displayName": "chJoinedDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processDate",
              "displayName": "processDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalVideos",
              "displayName": "chTotalVideos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalViews",
              "displayName": "chTotalViews",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chNumOfSubs",
              "displayName": "chNumOfSubs",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelId",
              "displayName": "channelId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "fromYTUrl",
              "displayName": "fromYTUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "fromChannelListPage",
              "displayName": "fromChannelListPage",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelAvatarUrl",
              "displayName": "channelAvatarUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelBannerUrl",
              "displayName": "channelBannerUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "inputChannelUrl",
              "displayName": "inputChannelUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Videos",
              "displayName": "Videos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3260,
        920
      ],
      "id": "76878d59-3612-4ad3-b01a-77139ac74d22",
      "name": "Update Channels",
      "executeOnce": false,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "295f3269-0310-4f40-a5b5-ce79dfa811ec",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "ee62a5ec-b104-44fc-b487-1326fba8dd73",
              "name": "channelName",
              "value": "={{ $json.channelName }}",
              "type": "string"
            },
            {
              "id": "ef1e4a11-fa6f-48ca-90e6-0c76ed382f9d",
              "name": "ch#",
              "value": "={{ $json[\"ch#\"] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2500,
        1020
      ],
      "id": "c2914754-764a-4ae9-b81f-d8d99423d400",
      "name": "Initial Channel Data"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/actor-runs/9JEG4AbMU0RbeHx1M?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"dateFilter\": \"year\",\n  \"downloadSubtitles\": true,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": true,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 100,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"scrapeLastNDays\": 400,\n  \"searchQueries\": [\n    \"https://www.youtube.com/watch?v=Q13QOgwoF0E\"\n  ],\n  \"sortVideosBy\": \"NEWEST\",\n  \"startUrls\": [\n    {\n      \"url\": \"https://www.youtube.com/watch?v=qV7xOEKEBDA\",\n      \"method\": \"GET\"\n    }\n  ],\n  \"subtitlesLanguage\": \"en\",\n  \"subtitlesFormat\": \"srt\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "3f5d26b8-a390-4b26-ad20-545bd1fa6dd9",
      "name": "YT Transcript",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1540
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    { \n      \"url\": \"{{ $('Read_Channels').item.json.channelURL }}\" \n    }\n  ],\n  \"maxResults\": 100\n}\n",
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 5
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2980,
        1000
      ],
      "id": "e66d9248-8df9-464c-a73f-e3dc711149f7",
      "name": "YT_Channels",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3260,
        1100
      ],
      "id": "0eb6d540-1be0-4af1-bc11-058350130a84",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $('Read_Channels').item.json.processChannel }}",
              "rightValue": "TRUE",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2740,
        1020
      ],
      "id": "69e8f8e3-0008-4b20-a879-5daf37b60b13",
      "name": "processChannel",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75b181be-d768-45cc-918b-eea4a3cb6c2e",
              "name": "id",
              "value": "={{ $('Read_Videos').item.json.id }}",
              "type": "string"
            },
            {
              "id": "37df7a9c-5e04-4925-b0b9-7697fb70ac59",
              "name": "data.id",
              "value": "={{ $json.body.data.id }}",
              "type": "string"
            },
            {
              "id": "db3c2b19-76d5-42ea-959e-ffb7986c6199",
              "name": "body.data.status",
              "value": "={{ $json.body.data.status }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            },
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2960,
        1540
      ],
      "id": "6c0f2dad-8127-4911-b542-0004d441df2f",
      "name": "Videos Run ID"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2453d745-17ff-41cf-8d67-afd8f766549c",
              "leftValue": "={{ $json.body.data.status }}",
              "rightValue": "={{\"SUCCEEDED\"}}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3160,
        1540
      ],
      "id": "901d6051-b313-41fb-b3a2-ca08555d063a",
      "name": "VID SUCCEED"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/datasets/xAeWiWXwzKOJV4Csa/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "={{ $json.body.data.status }}"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 25
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3400,
        1500
      ],
      "id": "3ff3db22-55d0-4d1d-9511-9c628a7948a8",
      "name": "Video Results",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2000,
        1460
      ],
      "id": "89b70943-b279-432a-8114-e5b17ddf95eb",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        4100,
        1440
      ],
      "id": "41075a45-34f9-434c-9777-62cfa88e38ea",
      "name": "Update_Videos1",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2800,
        1740
      ],
      "id": "21011ccd-af3f-4aaf-8595-fbb2e9f38b7d",
      "name": "not Processed"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3400,
        1660
      ],
      "id": "9958cd9c-f4fc-4bc7-93d0-c356a23cfd4f",
      "name": "Not SUCCEEDED"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3680,
        1440
      ],
      "id": "8d8236e3-8f31-4e39-b2da-ca51f0186956",
      "name": "Limit"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3460,
        1100
      ],
      "id": "61ba0796-9904-445f-8d03-fb91a74cd1f0",
      "name": "Limit2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3bc4a4b5-c908-4a8a-b4d9-175ab5bd77f9",
              "name": "id",
              "value": "={{ $('VID SUCCEED').item.json.id }}",
              "type": "string"
            },
            {
              "id": "2a08d754-d179-45c8-8513-b1d7c460ce23",
              "name": "fields",
              "value": "={{ $('Video Results').item.json.body[0] }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3900,
        1440
      ],
      "id": "c427be34-1c72-41e8-b40d-ec0d0114575a",
      "name": "Fields for Video Update"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 1100,
        "width": 4260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        2180
      ],
      "typeVersion": 1,
      "id": "bb8e3b37-dfe2-4cde-9bcb-7a37df0b427c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2680,
        2360
      ],
      "id": "d51c0d8e-20cc-4f81-b40a-824c0c523e3e",
      "name": "Videos Run ID1"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2020,
        2240
      ],
      "id": "7f32e1c4-0420-432e-b515-02d58878ece2",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "formTitle": "Youtube Video Process",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Youtube Video URL",
              "placeholder": "Paste the link to a Youtube Video",
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "ignoreBots": true,
          "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 14px;\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 14px;\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\n\t/* Colors */\n\t--color-background: #fbfcfe;\n\t--color-test-notice-text: #e6a23d;\n\t--color-test-notice-bg: #fefaf6;\n\t--color-test-notice-border: #f6dcb7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #dbdfe7;\n\t--color-card-shadow: rgba(99, 77, 255, 0.06);\n\t--color-link: #7e8186;\n\t--color-header: #525356;\n\t--color-label: #555555;\n\t--color-input-border: #dbdfe7;\n\t--color-input-text: #71747A;\n\t--color-focus-border: rgb(90, 76, 194);\n\t--color-submit-btn-bg: #ff6d5a;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #ea1f30;\n\t--color-required: #ff6d5a;\n\t--color-clear-button-bg: #7e8186;\n\t--color-html-text: #555;\n\t--color-html-link: #ff6d5a;\n\t--color-header-subtext: #7e8186;\n\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 12px;\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\n\t/* Dimensions */\n\t--container-width: 448px;\n\t--submit-btn-height: 48px;\n\t--checkbox-size: 18px;\n\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n}"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        2100,
        2360
      ],
      "id": "9b21b368-2fb1-4ded-a7e6-8ff41212be6d",
      "name": "On form submission",
      "webhookId": "61c131c3-7c60-4418-9f04-77a712ea6e87",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/insight_api_labs~youtube-comments-1-month---reliable-efficient/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"video_urls\": [\n    {\n      \"url\": \"{{ $('Edit Fields').item.json['Youtube Video URL'] }}\",\n      \"method\": \"GET\"\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {}
          }
        }
      },
      "id": "9f6b403c-48ee-49c8-814d-17eecd8473a9",
      "name": "Comments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2880,
        2300
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "pageUrl, comment",
        "options": {
          "destinationFieldName": ""
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3320,
        2320
      ],
      "id": "f385b36c-6e5a-49d7-846d-2b57b9c97f86",
      "name": "Split Out"
    },
    {
      "parameters": {
        "resource": "audio",
        "input": "={{ $json.Markdown }}",
        "voice": "nova",
        "options": {
          "response_format": "aac",
          "binaryPropertyOutput": "audio"
        }
      },
      "id": "e779edb7-a666-42ad-beed-51fd1942694e",
      "name": "Text → Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        5720,
        2880
      ],
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "n6jJpStEewoZQA9T",
          "name": "OpenAi account 6"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "inputText": "={{ $json.comment }}",
        "options": {
          "categories": "Positive, Neutral, Negative",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": false,
          "enableAutoFixing": false
        }
      },
      "id": "c848fc0b-ee7a-4c97-bac1-31ce0fc90a1d",
      "name": "Comments Sentiment Analysis Agent",
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        3520,
        2320
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "html": "={{ $json.html }}",
        "destinationKey": "Markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        5520,
        2880
      ],
      "id": "8f6fe8ff-adf8-4e24-9e9a-5a396dfea5dc",
      "name": "Markdown"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4720,
        2380
      ],
      "id": "b8ef0c2d-86f1-4577-bbff-cb4bdd52e64b",
      "name": "Merge2",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "html": "<html>\n  <head>\n    <style>\n      body { font-family: Arial, sans-serif; padding: 20px; }\n      img { max-width: 100%; height: auto; }\n      .key-points { margin: 20px 0; }\n      .metadata { color: #888; }\n      .separator {border-bottom: 1px solid #ccc; margin: 20px 0;}\n    </style>\n  </head>\n  <body>\n    {{ $json.html_title }}\n    {{ $json.html_summary }}\n\n    <hr></hr>          \n    <div class=\"metadata\">             \n      <h4>Video Information</h4>\n      <ul>               \n        <li>Channel: {{ $('Videos Run ID1').item.json.body[0].channelName }}</li>\n        <li>Link: <a href=\"{{ $('Videos Run ID1').item.json.body[0].videoTitle }}\" target=\"_blank\">{{ $('Videos Run ID1').item.json.body[0].url }}</a></li>\n        <li>Published: {{ $('Videos Run ID1').item.json.body[0].videoPostDate }} </li>\n        <li>Duration: ???</li>\n        <li>Views: {{ $('Videos Run ID1').item.json.body[0].views }}</li>\n        <li>Likes: {{ \"?\" }}</li></ul>\n    </div>            \n    <div class=\"metadata\">\n      <h4>Comment Sentiment Analysis</h4>\n      <ul>\n        <li>Comments: {{ $json.html_commentsCount }}</li>\n        <li>Positive: {{ $json.html_positive_comments }}</li>\n        <li>Neutral:  {{ $json.html_neutral_comments }}</li>\n        <li>Negative: {{ $json.html_negative_comments }}</li>\n      </ul>\n    </div>\n    <hr></hr>\n  </body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        5160,
        2380
      ],
      "id": "7bfa2210-0b2d-43ef-bc77-194bcda01a09",
      "name": "html_summary"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "adad4ab3-6a87-493b-8a65-98afd8ff7ca7",
              "leftValue": "={{ $json.commentsCount }}",
              "rightValue": "={{0}}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3080,
        2300
      ],
      "id": "81ab854e-61de-4cb0-a1bc-594f652799b3",
      "name": "If zero comments"
    },
    {
      "parameters": {
        "html": "<html>\n  <head>\n    <style>\n      body { font-family: Arial, sans-serif; padding: 20px; }\n      img { max-width: 100%; height: auto; }\n      .key-points { margin: 20px 0; }\n      .metadata { color: #888; }\n      .separator {border-bottom: 1px solid #ccc; margin: 20px 0;}\n    </style>\n  </head>\n  <body>\n    <h2>{{ $('Youtube Transcript').first().json.videoTitle }}</h2>\n    <h3>Summary</h3>\n    <p>{{ $('Summary Agent').first().json.text }}</p>\n    <hr></hr>          \n    <div class=\"metadata\">             \n      <h4>Video Information</h4>\n      <ul>               \n        <li>Published: {{ $now.format('yyyy-MMM-dd') }} </li>\n        <li>Duration: under {{ $('Read_Videos').first().json.Duration.toDateTime().minute+1}} minutes</li>\n        <li>Views: {{ $('Read_Videos').first().json.Viewcount }}</li>\n        <li>Likes: {{ $('Read_Videos').first().json.Likes }}</li> </ul>\n    </div>            \n    <div class=\"metadata\">\n      <h4>Comment Sentiment Analysis</h4>\n      <ul>\n        <li>Sentiment NPS: {{ $('Sentiment Stats').item.json.snps }}\" %\"</li>\n      </ul>\n    </div>\n    <hr></hr>\n  </body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        5280,
        2880
      ],
      "id": "bc4d00f9-3c8e-4058-8b71-b02a74442f8a",
      "name": "html_summary_audio"
    },
    {
      "parameters": {
        "folderId": "1gSu4CuUtNEuoqfguuBZw5YCloEjKf9VH",
        "title": "={{ $('gather_data').item.json.html_title }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        5400,
        2380
      ],
      "id": "fdd27649-12cf-404a-88d9-33a071e1f0db",
      "name": "Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3880,
        2320
      ],
      "id": "ec0a1a80-0674-4237-a38c-05e21f5cc72a",
      "name": "Aggregate",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "summarizationMethodAndPrompts": {
            "values": {
              "combineMapPrompt": "=Write a concise summary of the following:\n\n\"{{ $json.transcript }}\"\n\nCONCISE SUMMARY: ",
              "prompt": "=Write a concise summary of the following:\n\n\n\"{{ $json.transcript }}\"\n\n\nCONCISE SUMMARY:"
            }
          }
        }
      },
      "id": "f1308e54-d451-4980-ba40-8ba0124b6257",
      "name": "Summarization Chain2",
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 2,
      "position": [
        160,
        20
      ]
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/acts/streamers~youtube-scraper/runs/last?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"startUrls\": \"[{{ $('Process_video').first().json.videoURL }}]\",\n    \"includeTimestamps\": \"Yes\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "06252a93-395a-494e-9873-1c8306b24344",
      "name": "Transcript w/TS"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f617cd27-847a-4c21-89e7-21ebfe83d8aa",
      "name": "OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        180,
        200
      ],
      "credentials": {
        "openAiApi": {
          "id": "pZ4IJBXWzhYzZfRs",
          "name": "OpenAi _Blue&"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "0b4dc8d1-6497-45d6-af95-1d92fe11b250",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4540,
        2140
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.body[0].transcript || '[null]' }}",
        "categories": {
          "categories": [
            {
              "category": "Wordless",
              "description": "there is no transcript"
            },
            {
              "category": "Ad",
              "description": "transcript is an advertisement"
            },
            {
              "category": "Content",
              "description": "When transcript is not an ad. It is real content."
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "=You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\n\nYour goal is to help clasify the youtube videos that fall in the following categories:\n\"ad\", \"wordless\", \"content\"\n\nIf the transcript is empty, respond \"wordless\"\nIf the transcript is all about an ad, respond \"ad\". \nIf the transcript has relevant content which is not advertising, respond \"content\"",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        4420,
        1980
      ],
      "id": "270480b1-6dff-48f5-ae6d-e5e39ab0d62f",
      "name": "Classifier",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Video Summary to edit:\n{{ $json.message.content }}\n\nProvide polished output in html format. ",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are an expert Editor specializing in refining and polishing content to ensure it meets the highest quality standards. Your role is to review and improve the written material produced by multiple Writers while maintaining academic integrity and proper source attribution. Your task is to provide a highly polished, SEO-optimized summary with proper citation management.\n\n## Content Review Instructions:\nCarefully read the entire content piece.\nCheck for grammar, spelling, and punctuation errors.\nEnsure consistency in tone, style, and voice throughout the piece.\nVerify that the content aligns with the original brief.\nImprove sentence structure and flow for better readability.\nOptimize headlines, subheadings, and formatting for better engagement, especially for SEO.\nSuggest improvements or additions to enhance the overall quality of the content.\n\n## Citation Management Instructions:\nPreserve all inline citations from the original writers in the format: [Source: Publication Name].\nEnsure all inline citations are hyperlinked by embedding the publication name in the citation with the corresponding URL. Example: [Source: [Publication Name](URL)].\nIdentify and remove any duplicate citations across different sections.\nStandardize citation formats if writers used different styles.\nVerify that all cited claims are properly attributed.\nEnsure citations don't disrupt the flow of reading.\nCross-reference all inline citations with their corresponding source links.\n\n## Unified Source Documentation Format:\nCreate ONE \"Sources\" section at the very end of the summary (after the conclusions section).\n\nFormat each source entry consistently using HTML list items:\n\n### html\n<li><a href=\"[URL]\">[Publication Name] - [Summary Title]</a></li>\n\nInclude for each source:\n- Publication Name\n- Summary Title (if available)\n- Complete URL\n- Date Accessed (if available)\n\nEnsure all source entries are hyperlinked properly.\nOrganize all sources alphabetically by publication name.\nRemove any duplicate entries.\nVerify all links are functional.\n\n## SEO and Formatting Guidelines:\nMaintain proper HTML formatting throughout.\nEnsure citations and hyperlinks don't interfere with keyword optimization.\nFormat the \"Sources\" section with proper HTML tags.\nUse appropriate heading tags (<h1>, <h2>, <h3>) for structure.\nInclude proper meta descriptions and title tags if required.\n\n### Output Format:\nThe edited summary should be structured as follows:\n\nMain content with inline citations (hyperlinked).\nThe \"Sources\" section at the end of the summary has all reference links. There should only be one \"Sources\" section.\n\nAdditional Requirements:\nMaintain academic integrity while ensuring readability.\nBalance SEO optimization with proper citation practices.\nEnsure all writers' contributions are properly attributed.\nPreserve the original meaning and intent of cited material.\nCreate smooth transitions between sections from different writers.\n\nToday's date is: {{ $now }}"
        }
      },
      "id": "b0233104-fc0d-4fed-b1d0-a5dc8fb0a8a7",
      "name": "Editor",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        4200,
        2680
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3d87a111-84f3-4e45-a964-fcb18f319790",
              "name": "Youtube Video URL",
              "value": "https://www.youtube.com/watch?v=62SA_YwUg5Q",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2300,
        2000
      ],
      "id": "287b5c8e-0b85-4926-8a7d-f06a25480741",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "ccac1282-79b3-4de7-b22c-68c8c1a65478",
      "name": "OpenAI4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3620,
        2480
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/9PPh3FVGsPLtVqWLb/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    \"{{ $json['Youtube Video URL'] }}\"\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "49c1f4f6-a43c-4547-b29c-94317e704522",
      "name": "YT Transcript Ninja",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        2360
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Initialize counters for each sentiment category\nlet positiveCount = 0;\nlet neutralCount = 0;\nlet negativeCount = 0;\n\n// Get the data from the Aggregate node\nconst aggregateData = $input.first().json;\n\n// Check if we have data array\nif (aggregateData && aggregateData.data && Array.isArray(aggregateData.data)) {\n  const dataItems = aggregateData.data;\n  const totalComments = dataItems.length;\n  \n  // Loop through each data item\n  dataItems.forEach(item => {\n    // Access the sentiment category from the sentimentAnalysis field\n    if (item.sentimentAnalysis && item.sentimentAnalysis.category) {\n      const category = item.sentimentAnalysis.category.toLowerCase();\n      \n      // Count based on sentiment category\n      if (category.includes('positive')) {\n        positiveCount++;\n      } else if (category.includes('negative')) {\n        negativeCount++;\n      } else if (category.includes('neutral')) {\n        neutralCount++;\n      }\n    }\n  });\n  \n  // Calculate percentages\n  const percentPositive = totalComments > 0 ? (positiveCount / totalComments * 100).toFixed(1) : 0;\n  const percentNeutral = totalComments > 0 ? (neutralCount / totalComments * 100).toFixed(1) : 0;\n  const percentNegative = totalComments > 0 ? (negativeCount / totalComments * 100).toFixed(1) : 0;\n  \n  // Return the summary\n  return {\n    json: {\n      summary: {\n        totalComments,\n        positive: {\n          count: positiveCount,\n          percentage: parseFloat(percentPositive)\n        },\n        neutral: {\n          count: neutralCount,\n          percentage: parseFloat(percentNeutral)\n        },\n        negative: {\n          count: negativeCount,\n          percentage: parseFloat(percentNegative)\n        }\n      }\n    }\n  };\n} else {\n  // Handle case where there's no data\n  return {\n    json: {\n      summary: {\n        totalComments: 0,\n        positive: { count: 0, percentage: 0 },\n        neutral: { count: 0, percentage: 0 },\n        negative: { count: 0, percentage: 0 }\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4560,
        2320
      ],
      "id": "1c51a485-7d5d-4fdd-95a9-60f09fdf416d",
      "name": "Sentiment Results"
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "6f2e2e10-7e78-4ae0-a6cb-21b520f29733",
      "name": "OpenAI5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        4120,
        2800
      ],
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"proxy\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"RESIDENTIAL\"\n    ],\n    \"apifyProxyCountry\": \"US\"\n  },\n  \"startUrls\": [\n    \"{{ $json.body[0].url }}\"\n  ],\n  \"maxConcurrency\": 10,\n  \"minConcurrency\": 1,\n  \"maxRequestRetries\": 10\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2920,
        2680
      ],
      "id": "b5a62cff-4e91-476d-94c2-0a31f3696da6",
      "name": "Video #1"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/easyapi~youtube-video-metadata-scraper/runs?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\"https://www.youtube.com/watch?{{ $json.videoId }}\"]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3140,
        2680
      ],
      "id": "cc8a6f5a-1237-40cb-a04c-d728f70d8b09",
      "name": "Video #2"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/xZZCnxEXR5Igzeds2/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"proxy\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"RESIDENTIAL\"\n    ],\n    \"apifyProxyCountry\": \"US\"\n  },\n  \"startUrls\": [\n    \"{{ $('Videos Run ID1').first().json.body[0].url }}\"\n  ],\n  \"maxConcurrency\": 10,\n  \"minConcurrency\": 1,\n  \"maxRequestRetries\": 10\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3360,
        2680
      ],
      "id": "240f3002-e256-490b-8928-959d6a5e883d",
      "name": "Video #3"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\n    \"<{{ $json.body[0].url }}>\"\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3560,
        2680
      ],
      "id": "d29ae456-9652-46c2-845a-b7ff20b7af8e",
      "name": "Comments - more1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"videoId\": \"{{ $('Video #1').item.json.videoId }}\",\n  \"videoTitle\": \"{{ $('Videos Run ID1').item.json.body[0].videoTitle }}\",\n  \"videoUrl\": \"{{ $('Videos Run ID1').item.json.body[0].url }}\",\n  \"publishDate\": \"{{ $('Videos Run ID1').item.json.body[0].videoPostDate }}\",\n  \"videoDuration\": \"{{ $('Video #3').item.json.lengthInSeconds }}\",\n  \"viewCount\": {{ $('Videos Run ID1').item.json.body[0].views }},\n  \"likeCount\": {{ $('Video #3').item.json.likeCount }},\n  \"commentCount\": {{ $('Video #3').item.json.commentCount }},\n  \"channelName\": \"{{ $('Videos Run ID1').item.json.body[0].channelName }}\",\n  \"channelUrl\": \"{{ $('Video #3').item.json.channelURL }}\",\n  \"subscriberCount\": \"{{ $('Video #3').item.json.channelSubscribers }}\",\n  \"videoDescription\": \"{{ $('Video #3').item.json.description }}\",\n  \"videoTags\": [{{ $('Video #3').item.json.tags }}],\n  \"reportDate\": {{$now.format('yyyy-MM-dd hh:mm:ss')}},\n  \"likesToViewsRatio\": {{$json[\"likeCount\"] / $json[\"viewCount\"]}},\n  \"commentsToViewsRatio\": {{$json[\"commentCount\"] / $json[\"viewCount\"]}},\n  \"contentSummary\": \"{{ $('Editor').item.json.output }}\",\n  \"topComments\": [\n    {\n      \"user\": \"UserTechEnthusiast\",\n      \"comment\": \"This is the most comprehensive overview of AI content tools I've seen. The section on voice synthesis was particularly eye-opening. Thanks for the balanced approach to the ethical considerations too!\"\n    },\n    {\n      \"user\": \"ContentCreator2025\",\n      \"comment\": \"I've been using some of these AI editing tools for the past month and can confirm they've cut my editing time by about 60%. Great breakdown of the options available!\"\n    },\n    {\n      \"user\": \"AIResearcher\",\n      \"comment\": \"As someone who works in AI development, I appreciate how accurately you portrayed the current capabilities and limitations of these technologies. One small correction though: the voice synthesis watermarking standards are actually still in development, not finalized as mentioned at 11:45.\"\n    },\n    {\n      \"user\": \"NewCreator\",\n      \"comment\": \"This video convinced me to finally try some AI tools in my workflow. The before/after examples really helped me understand the practical benefits. Any chance you could do a follow-up with more beginner-friendly tutorial content?\"\n    },\n    {\n      \"user\": \"TechEthicist\",\n      \"comment\": \"I wish the ethical considerations section had gone deeper into the employment implications for editors and writers. Otherwise, fantastic overview of the technology landscape.\"\n    }\n  ],\n  \"transcriptExcerpts\": [\n    {\n      \"time\": \"0:00\",\n      \"text\": \"Welcome to Tech Creators! I'm Alex, and today we're diving deep into how artificial intelligence is transforming content creation in 2025.\"\n    },\n    {\n      \"time\": \"0:15\",\n      \"text\": \"If you've been creating content for any amount of time, you've probably noticed the rapid acceleration of AI tools in our industry over the past year.\"\n    },\n    {\n      \"time\": \"2:15\",\n      \"text\": \"First up, AI video editing tools. This is perhaps the area that's seen the most dramatic improvements over the past year.\"\n    },\n    {\n      \"time\": \"6:48\",\n      \"text\": \"Now let's talk about script generation with AI. This technology has come a long way from the early days of generic, templated content.\"\n    },\n    {\n      \"time\": \"10:22\",\n      \"text\": \"Moving on to voice synthesis technology, which might be the most controversial advancement we're discussing today.\"\n    },\n    {\n      \"time\": \"14:05\",\n      \"text\": \"This brings us to the ethical considerations around AI in content creation. With great power comes great responsibility, and these tools certainly give creators unprecedented capabilities.\"\n    },\n    {\n      \"time\": \"17:30\",\n      \"text\": \"To conclude, AI is transforming content creation in ways we could only imagine a few years ago. These tools can dramatically improve efficiency and potentially the quality of our content.\"\n    }\n  ],\n  \"contentStrengths\": [\n    \"Comprehensive Coverage: The video thoroughly explores multiple AI applications in content creation, covering the full spectrum of tools available to creators.\",\n    \"Practical Demonstrations: Visual before/after examples effectively illustrate the real-world impact of AI tools, making abstract concepts concrete and accessible.\",\n    \"Balanced Perspective: The content thoughtfully addresses both the benefits and ethical concerns of AI technologies, enhancing credibility and audience trust.\",\n    \"Clear Structure: Well-organized sections with logical progression make complex technical information easy to follow, regardless of viewer expertise level.\",\n    \"Production Quality: Professional presentation with high-quality visuals and audio reinforces expertise and enhances viewer retention.\"\n  ],\n  \"contentOpportunities\": [\n    \"Ethical Depth: Several comments indicate viewer interest in a more thorough examination of employment implications and creative attribution issues.\",\n    \"Beginner Resources: Comments suggest demand for entry-level tutorials covering specific AI tools with step-by-step implementation guidance.\",\n    \"Technical Clarifications: Expert feedback highlights minor inaccuracies regarding standards development that could be addressed for improved authority.\",\n    \"Tool Affordability: Current focus appears to skew toward premium options; expanding coverage of accessible alternatives would broaden audience appeal.\",\n    \"Companion Resources: Adding downloadable guides or tool comparison charts would enhance practical value and extend engagement beyond the video.\"\n  ],\n  \"recommendations\": [\n    \"Create Follow-Up Tutorial Series: Develop a series of beginner-friendly tutorial videos for each AI tool category mentioned, with step-by-step guidance and downloadable resources. This directly addresses frequent viewer requests and extends the value of your expertise.\",\n    \"Produce an Ethics Deep-Dive: Create a dedicated video examining the ethical implications of AI in content creation, particularly focusing on employment impacts and attribution issues. The high engagement on ethical topics indicates significant audience interest in this area.\",\n    \"Develop Budget-Friendly Alternatives Guide: Compile a comparison guide of affordable AI tools alongside premium options to serve creators at all budget levels. This expands your audience reach while maintaining your authority on the full spectrum of available tools.\",\n    \"Implement Interactive Elements: Add polls, quizzes, or community challenges related to AI content creation to boost engagement and build a stronger community around this topic. The high comment ratio indicates an engaged audience ready for more interaction.\",\n    \"Collaborate with AI Developers: Partner with AI tool developers for exclusive demos or behind-the-scenes content. This would provide unique value to your audience while potentially opening new channel partnership opportunities.\"\n  ]\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4920,
        2380
      ],
      "id": "226d8396-8bad-4d26-b14f-1a9e8c03039f",
      "name": "gather_data",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and create a concise, professional summary (250-300 words) that describes:\n\n1. The main topic and purpose of the video\n2. The key points or sections covered \n3. The presenter's communication approach\n4. 3-4 specific notable insights from the content\n5. Who would benefit most from this video\n\nUse only the information provided: \nTitle: \"{{ $('Video #3').item.json.title }}\", \nDescription: \"{{ $('Video #3').item.json.description }}\", \nTags: {{ $('Video #3').item.json.tags }}, \nand these transcript excerpts: {{ $('Videos Run ID1').item.json.body[0].transcript }}\n\nFormat your response as a neutral, analytical paragraph without using first-person language.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3840,
        2680
      ],
      "id": "9cd21e03-08f1-40c8-8a1a-7ab72a3d9b90",
      "name": "cSummary",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and generate 5 specific content strengths for a video titled \"{{ $('Videos Run ID1').item.json.body[0].videoTitle }}\" with these details:\n- Description: \"{{ $('Video #3').item.json.description }}\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- Duration: {{ $('Video #3').item.json.lengthInSeconds }}\n- Top comments: {{topComments}}\n\nFor each strength:\n1. Identify a specific aspect of the content that appears to be executed well\n2. Format as \"Category: Detailed explanation\" (e.g., \"Visual Presentation: High-quality graphics with clear annotations make complex concepts easy to understand.\")\n3. Focus on content quality, structure, presentation style, information value, or audience engagement\n4. Base your analysis on the video's topic, structure, and audience reception\n5. Provide specific, substantive analysis rather than generic praise\n\nEnsure each strength is distinct and focuses on a different aspect of the content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3420,
        2940
      ],
      "id": "0fe073b2-bb89-464b-9dee-cf7c638d2ecd",
      "name": "cStrengths",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Based on this YouTube video information, identify 5 specific improvement opportunities for a video titled \"\" with:\n- Description: \"{{ $('Video #3').item.json.description }}\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- View-to-like ratio: {{$json[\"likesToViewsRatio\"]}}\n- Comments: {{topComments}}\n\nFor each opportunity:\n1. Identify a specific aspect that could be enhanced or expanded\n2. Format as \"Area: Detailed explanation\" (e.g., \"Technical Depth: The encryption section could benefit from more detailed examples showing practical implementation.\")\n3. Base your suggestions on viewer feedback in comments and content gaps based on the topic\n4. Be constructive and specific rather than critical\n5. Focus on content expansion, audience engagement, technical clarifications, or additional value-add elements\n\nEach opportunity should offer actionable insight that would meaningfully improve the video content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3840,
        2940
      ],
      "id": "c7e54c0d-7f68-43e1-9bea-bee97c83f325",
      "name": "cOpportunities",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Create 5 strategic, actionable recommendations for a YouTube creator to improve and expand upon their video \"{{ $('Video #3').item.json.title }}\" based on this data:\n- Video metrics: {{ $('Video #3').item.json.viewCount }} views, {{ $('Video #3').item.json.likeCount }} likes, {{ $('Video #3').item.json.commentCount }} comments\n- Description: \"\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- Content strengths: {{ $('cStrengths').item.json.message.content }}\n- Content opportunities: {{ $json.message.content }}\n- Top comments: {{topComments}}\n\nEach recommendation should:\n1. Start with a clear, action-oriented title (e.g., \"Develop Series Extension:\")\n2. Include a detailed, specific explanation (approximately 30-50 words)\n3. Address a strategic opportunity to increase engagement, viewership, or content value\n4. Connect directly to insights from the data provided\n5. Include a specific potential outcome or benefit\n\nFormat each as \"Action Title: Detailed explanation with strategic rationale.\"\n\nRecommendations should be tailored to this specific video and channel context, not generic YouTube advice.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4200,
        2940
      ],
      "id": "75305522-c594-4eba-9c71-d76bfef2a4bf",
      "name": "cRecommendations",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Given the YouTube video title \"{{ $('Video #3').item.json.title }}\" about {{ $('Video #3').item.json.tags }}, generate 7 realistic transcript excerpts that would appear throughout an educational video on this topic.\n\nEach excerpt should:\n1. Include a timestamp (starting with 0:00 and ending near the video duration of {{ $('Video #3').item.json.lengthInSeconds,\"seconds\"}})\n2. Reflect natural speaking patterns of an educational content creator\n3. Represent key moments in the video's narrative structure\n4. Include an introduction, key points for each major section, and a conclusion\n5. Match the tone and style suggested by the video description: \n\"{{ $('Video #3').item.json.description }}\"\n\nFormat each excerpt as a JSON object with \"time\" and \"text\" properties.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2980,
        2940
      ],
      "id": "a8f0d78e-7ba0-4b76-89e1-37ac528970c7",
      "name": "Tscripts Excerpts",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Given the YouTube video title \"{{videoTitle}}\" about {{videoTags[0]}}, generate 7 realistic transcript excerpts that would appear throughout an educational video on this topic.\n\nEach excerpt should:\n1. Include a timestamp (starting with 0:00 and ending near the video duration of {{videoDuration}})\n2. Reflect natural speaking patterns of an educational content creator\n3. Represent key moments in the video's narrative structure\n4. Include an introduction, key points for each major section, and a conclusion\n5. Match the tone and style suggested by the video description: \"{{videoDescription}}\"\n\nFormat each excerpt as a JSON object with \"time\" and \"text\" properties.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4080,
        2320
      ],
      "id": "857b9872-0b43-48f6-a159-5ebe202f7387",
      "name": "Top Comments",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-05-12T07:21:07.000Z",
  "versionId": "3ae9e4db-266b-42e1-9a23-b3fa74f6bb17"
}