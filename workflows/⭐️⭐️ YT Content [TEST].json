{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Videos": {
      "main": [
        [
          {
            "node": "Process_video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Channels": {
      "main": [
        [
          {
            "node": "Initial Channel Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process_video": {
      "main": [
        [
          {
            "node": "YT Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "not Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Channel Data": {
      "main": [
        [
          {
            "node": "processChannel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript": {
      "main": [
        [
          {
            "node": "Videos Run ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YT_Channels": {
      "main": [
        [
          {
            "node": "Update Channels",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Limit2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processChannel": {
      "main": [
        [
          {
            "node": "YT_Channels",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID": {
      "main": [
        [
          {
            "node": "VID SUCCEED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VID SUCCEED": {
      "main": [
        [
          {
            "node": "Video Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not SUCCEEDED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Results": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Fields for Video Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit2": {
      "main": [
        [
          {
            "node": "Write_Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fields for Video Update": {
      "main": [
        [
          {
            "node": "Update_Videos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Videos Run ID1": {
      "main": [
        [
          {
            "node": "Video #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments": {
      "main": [
        [
          {
            "node": "If zero comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments Sentiment Analysis Agent": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Markdown": {
      "main": [
        [
          {
            "node": "Text → Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If zero comments": {
      "main": [
        [],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "html_summary_audio": {
      "main": [
        [
          {
            "node": "Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Sentiment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript w/TS": {
      "main": [
        [
          {
            "node": "Summarization Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI2": {
      "ai_languageModel": [
        [
          {
            "node": "Summarization Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        [
          {
            "node": "Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Classifier": {
      "main": [
        [],
        [],
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "YT Transcript Ninja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI4": {
      "ai_languageModel": [
        [
          {
            "node": "Comments Sentiment Analysis Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "YT Transcript Ninja": {
      "main": [
        [
          {
            "node": "Videos Run ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sentiment Results": {
      "main": [
        [
          {
            "node": "Set Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #1": {
      "main": [
        [
          {
            "node": "Video #2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #2": {
      "main": [
        [
          {
            "node": "Video #3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video #3": {
      "main": [
        [
          {
            "node": "Comments - more1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comments - more1": {
      "main": [
        [
          {
            "node": "cSummary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cSummary": {
      "main": [
        [
          {
            "node": "Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cStrengths": {
      "main": [
        [
          {
            "node": "cOpportunities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cOpportunities": {
      "main": [
        [
          {
            "node": "cRecommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top Comments": {
      "main": [
        []
      ]
    },
    "cRecommendations": {
      "main": [
        []
      ]
    },
    "Editor": {
      "main": [
        [
          {
            "node": "Comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript Excerpts": {
      "main": [
        [
          {
            "node": "cStrengths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Report Fields": {
      "main": [
        []
      ]
    },
    "Create GDoc Report": {
      "main": [
        [
          {
            "node": "htmlContent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Preparation": {
      "main": [
        [
          {
            "node": "Create GDoc Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update GDoc Content": {
      "main": [
        []
      ]
    },
    "htmlContent": {
      "main": [
        []
      ]
    },
    "Set Update": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    },
    "Set Fields": {
      "main": [
        [
          {
            "node": "Copy Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs": {
      "main": [
        []
      ]
    },
    "Client Details": {
      "main": [
        [
          {
            "node": "Set Value",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Value": {
      "main": [
        [
          {
            "node": "Make a copy of template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make a copy of template": {
      "main": [
        [
          {
            "node": "Edit the Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit the Template": {
      "main": [
        [
          {
            "node": "Share",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Share": {
      "main": [
        [
          {
            "node": "Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Copy Template": {
      "main": [
        [
          {
            "node": "VarToValues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VarToValues": {
      "main": [
        [
          {
            "node": "Share Link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-07T22:59:14.687Z",
  "id": "iK0HfAIjts4uk2N9",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "⭐️⭐️ YT Content [TEST]",
  "nodes": [
    {
      "parameters": {},
      "id": "794dc8d7-c392-40c0-a588-dca9b4b8d425",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        2120,
        1640
      ]
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "options": {
          "fields": [
            "vid#",
            "videoURL",
            "vid_id",
            "processVideo",
            "dateProcessed",
            "commentCount",
            "channel",
            "channelName (from Channel)",
            "channelURL (from Channel)"
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2320,
        1640
      ],
      "id": "f3dd61c4-46c0-438d-ae6f-e99b9c39e6f1",
      "name": "Read_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "filterByFormula": "{processChannel} = 1",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2280,
        1020
      ],
      "id": "80113562-3783-4487-bd8b-1b9a0292e1f6",
      "name": "Read_Channels",
      "executeOnce": false,
      "alwaysOutputData": false,
      "retryOnFail": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "processVideo": true,
            "Title": "={{ $json.title }}",
            "videoURL": "={{ $json.url }}",
            "dateProcessed": "={{ $now.format('yyyy-MM-dd T')}}",
            "Status": "Todo",
            "Duration": "={{ $json.duration }}",
            "viewCount": "={{ $json.viewCount }}",
            "publishDate": "={{ $json.date }}",
            "id": "={{ $json.id }}",
            "positive": 0,
            "neutral": 0,
            "negative": 0,
            "thumbnailUrl": "={{ $json.thumbnailUrl }}",
            "Likes": 0,
            "commentCount": 0
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "options": [],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "wordless",
                  "value": "wordless"
                },
                {
                  "name": "advertising",
                  "value": "advertising"
                },
                {
                  "name": "content",
                  "value": "content"
                },
                {
                  "name": "",
                  "value": ""
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Todo",
                  "value": "Todo"
                },
                {
                  "name": "In progress",
                  "value": "In progress"
                },
                {
                  "name": "Done",
                  "value": "Done"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": false,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3660,
        1100
      ],
      "id": "d9b3ddc3-16b6-4361-9206-9c76c5e4cd7c",
      "name": "Write_Videos",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $json.processVideo }}",
              "rightValue": "={{ 1 }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2520,
        1640
      ],
      "id": "5c87f4cd-80d4-4eac-80c8-b39665b1e1af",
      "name": "Process_video",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Process Channels\nOldestPostDate: \"2024-01-01\"",
        "height": 480,
        "width": 3040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        880
      ],
      "typeVersion": 1,
      "id": "ca294bd2-3693-4d45-8d97-a4c03c9f431f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 480,
        "width": 3040,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        1420
      ],
      "typeVersion": 1,
      "id": "3d527646-18d4-4508-8d37-e80796a4ef4b",
      "name": "Sticky Note5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2980,
        1180
      ],
      "id": "978b1306-062d-4e7c-9489-7eb2d9ab5cff",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tbljDPUtbpDgyTagP",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tbljDPUtbpDgyTagP"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "channelName": "={{ $json.body[0].channelName }}",
            "channelURL": "={{ $json.body[0].channelUrl }}",
            "processDate": "={{ $now.format('yyyy-MM-dd hh:mm:ss') }}",
            "channelDescription": "=}{{ $json.body[0].channelDescription }}",
            "id": "={{ $('Read_Channels').item.json.id }}",
            "fromYTUrl": "={{ $json.body[0].fromYTUrl }}",
            "input": "={{ $json.body[0].input }}",
            "fromChannelListPage": "={{ $json.body[0].fromChannelListPage }}",
            "channelAvatarUrl": "={{ $json.body[0].channelAvatarUrl }}",
            "channelBannerUrl": "={{ $json.body[0].channelBannerUrl }}",
            "channelId": "={{ $json.body[0].channelId }}",
            "inputChannelUrl": "={{ $json.body[0].inputChannelUrl }}",
            "chNumOfSubs": "={{ $json.body[0].aboutChannelInfo.numberOfSubscribers }}",
            "chTotalViews": "={{ $json.body[0].aboutChannelInfo.channelTotalViews }}",
            "chTotalVideos": "={{ $json.body[0].aboutChannelInfo.channelTotalVideos }}",
            "chJoinedDate": "={{ $json.body[0].aboutChannelInfo.channelJoinedDate }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch_id",
              "displayName": "ch_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "ch#",
              "displayName": "ch#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "processChannel",
              "displayName": "processChannel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName",
              "displayName": "channelName",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelURL",
              "displayName": "channelURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelDescription",
              "displayName": "channelDescription",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chJoinedDate",
              "displayName": "chJoinedDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "processDate",
              "displayName": "processDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalVideos",
              "displayName": "chTotalVideos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chTotalViews",
              "displayName": "chTotalViews",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chNumOfSubs",
              "displayName": "chNumOfSubs",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelId",
              "displayName": "channelId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "fromYTUrl",
              "displayName": "fromYTUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "fromChannelListPage",
              "displayName": "fromChannelListPage",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelAvatarUrl",
              "displayName": "channelAvatarUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "channelBannerUrl",
              "displayName": "channelBannerUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "inputChannelUrl",
              "displayName": "inputChannelUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Videos",
              "displayName": "Videos",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        3260,
        920
      ],
      "id": "76878d59-3612-4ad3-b01a-77139ac74d22",
      "name": "Update Channels",
      "executeOnce": false,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "295f3269-0310-4f40-a5b5-ce79dfa811ec",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "ee62a5ec-b104-44fc-b487-1326fba8dd73",
              "name": "channelName",
              "value": "={{ $json.channelName }}",
              "type": "string"
            },
            {
              "id": "ef1e4a11-fa6f-48ca-90e6-0c76ed382f9d",
              "name": "ch#",
              "value": "={{ $json[\"ch#\"] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2500,
        1020
      ],
      "id": "c2914754-764a-4ae9-b81f-d8d99423d400",
      "name": "Initial Channel Data"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/actor-runs/9JEG4AbMU0RbeHx1M?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"dateFilter\": \"year\",\n  \"downloadSubtitles\": true,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": true,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 100,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"scrapeLastNDays\": 400,\n  \"searchQueries\": [\n    \"https://www.youtube.com/watch?v=Q13QOgwoF0E\"\n  ],\n  \"sortVideosBy\": \"NEWEST\",\n  \"startUrls\": [\n    {\n      \"url\": \"https://www.youtube.com/watch?v=qV7xOEKEBDA\",\n      \"method\": \"GET\"\n    }\n  ],\n  \"subtitlesLanguage\": \"en\",\n  \"subtitlesFormat\": \"srt\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "3f5d26b8-a390-4b26-ad20-545bd1fa6dd9",
      "name": "YT Transcript",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2760,
        1540
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    { \n      \"url\": \"{{ $('Read_Channels').item.json.channelURL }}\" \n    }\n  ],\n  \"maxResults\": 100\n}\n",
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 5
            }
          },
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2980,
        1000
      ],
      "id": "e66d9248-8df9-464c-a73f-e3dc711149f7",
      "name": "YT_Channels",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3260,
        1100
      ],
      "id": "0eb6d540-1be0-4af1-bc11-058350130a84",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e22ea465-92e5-4eb3-bd45-3ba45dd8bab8",
              "leftValue": "={{ $('Read_Channels').item.json.processChannel }}",
              "rightValue": "TRUE",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2740,
        1020
      ],
      "id": "69e8f8e3-0008-4b20-a879-5daf37b60b13",
      "name": "processChannel",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "75b181be-d768-45cc-918b-eea4a3cb6c2e",
              "name": "id",
              "value": "={{ $('Read_Videos').item.json.id }}",
              "type": "string"
            },
            {
              "id": "37df7a9c-5e04-4925-b0b9-7697fb70ac59",
              "name": "data.id",
              "value": "={{ $json.body.data.id }}",
              "type": "string"
            },
            {
              "id": "db3c2b19-76d5-42ea-959e-ffb7986c6199",
              "name": "body.data.status",
              "value": "={{ $json.body.data.status }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            },
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2960,
        1540
      ],
      "id": "6c0f2dad-8127-4911-b542-0004d441df2f",
      "name": "Videos Run ID"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2453d745-17ff-41cf-8d67-afd8f766549c",
              "leftValue": "={{ $json.body.data.status }}",
              "rightValue": "={{\"SUCCEEDED\"}}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3160,
        1540
      ],
      "id": "901d6051-b313-41fb-b3a2-ca08555d063a",
      "name": "VID SUCCEED"
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/datasets/xAeWiWXwzKOJV4Csa/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "={{ $json.body.data.status }}"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 25
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3400,
        1500
      ],
      "id": "3ff3db22-55d0-4d1d-9511-9c628a7948a8",
      "name": "Video Results",
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2000,
        1460
      ],
      "id": "89b70943-b279-432a-8114-e5b17ddf95eb",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appB1AKJ8GWAWKjku",
          "mode": "list",
          "cachedResultName": "Youtube Content_2505",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku"
        },
        "table": {
          "__rl": true,
          "value": "tblf7rdEZnWmhKHds",
          "mode": "list",
          "cachedResultName": "Videos",
          "cachedResultUrl": "https://airtable.com/appB1AKJ8GWAWKjku/tblf7rdEZnWmhKHds"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": false
            },
            {
              "id": "vid_id",
              "displayName": "vid_id",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "vid#",
              "displayName": "vid#",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "videoURL",
              "displayName": "videoURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "processVideo",
              "displayName": "processVideo",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "dateProcessed",
              "displayName": "dateProcessed",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "publishDate",
              "displayName": "publishDate",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Duration",
              "displayName": "Duration",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "viewCount",
              "displayName": "viewCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Likes",
              "displayName": "Likes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "commentCount",
              "displayName": "commentCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "thumbnailUrl",
              "displayName": "thumbnailUrl",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "hashtags",
              "displayName": "hashtags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "transcriptURL",
              "displayName": "transcriptURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "docURL",
              "displayName": "docURL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "positive",
              "displayName": "positive",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "neutral",
              "displayName": "neutral",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "negative",
              "displayName": "negative",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channel",
              "displayName": "channel",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "channelName (from Channel)",
              "displayName": "channelName (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "channelURL (from Channel)",
              "displayName": "channelURL (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "ch# (from Channel)",
              "displayName": "ch# (from Channel)",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Comments",
              "displayName": "Comments",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Comments 2",
              "displayName": "Comments 2",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "typecast": true,
          "updateAllMatches": false
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        4100,
        1440
      ],
      "id": "41075a45-34f9-434c-9777-62cfa88e38ea",
      "name": "Update_Videos1",
      "alwaysOutputData": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "xoP12Z5DLomkSebw",
          "name": "Airtable YT_Content_2505"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2800,
        1740
      ],
      "id": "21011ccd-af3f-4aaf-8595-fbb2e9f38b7d",
      "name": "not Processed"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3400,
        1660
      ],
      "id": "9958cd9c-f4fc-4bc7-93d0-c356a23cfd4f",
      "name": "Not SUCCEEDED"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3680,
        1440
      ],
      "id": "8d8236e3-8f31-4e39-b2da-ca51f0186956",
      "name": "Limit"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        3460,
        1100
      ],
      "id": "61ba0796-9904-445f-8d03-fb91a74cd1f0",
      "name": "Limit2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3bc4a4b5-c908-4a8a-b4d9-175ab5bd77f9",
              "name": "id",
              "value": "={{ $('VID SUCCEED').item.json.id }}",
              "type": "string"
            },
            {
              "id": "2a08d754-d179-45c8-8513-b1d7c460ce23",
              "name": "fields",
              "value": "={{ $('Video Results').item.json.body[0] }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3900,
        1440
      ],
      "id": "c427be34-1c72-41e8-b40d-ec0d0114575a",
      "name": "Fields for Video Update"
    },
    {
      "parameters": {
        "content": "## Process Videos",
        "height": 1100,
        "width": 4260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        2180
      ],
      "typeVersion": 1,
      "id": "bb8e3b37-dfe2-4cde-9bcb-7a37df0b427c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b67cb44a-aa48-46f7-b8c0-14dfb2af8a5b",
              "name": "body",
              "value": "={{ $json.body }}",
              "type": "object"
            },
            {
              "id": "e704ae40-ffbf-4427-8aa1-8e1fd8a09456",
              "name": "statusCode",
              "value": "={{ $json.statusCode }}",
              "type": "number"
            },
            {
              "id": "ab90113f-21e7-46f0-801f-4846c7c27303",
              "name": "statusMessage",
              "value": "={{ $json.statusMessage }}",
              "type": "string"
            },
            {
              "id": "87393c60-0308-4e9a-8ec3-add12a01fed4",
              "name": "headers",
              "value": "={{ $json.headers }}",
              "type": "object"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2680,
        2360
      ],
      "id": "d51c0d8e-20cc-4f81-b40a-824c0c523e3e",
      "name": "Videos Run ID1"
    },
    {
      "parameters": {
        "content": "### Batching of 10 items with 1000 ms in between",
        "height": 80,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2020,
        2240
      ],
      "id": "7f32e1c4-0420-432e-b515-02d58878ece2",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "formTitle": "Youtube Video Process",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Youtube Video URL",
              "placeholder": "Paste the link to a Youtube Video",
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false,
          "ignoreBots": true,
          "customCss": ":root {\n\t--font-family: 'Open Sans', sans-serif;\n\t--font-weight-normal: 400;\n\t--font-weight-bold: 600;\n\t--font-size-body: 12px;\n\t--font-size-label: 14px;\n\t--font-size-test-notice: 12px;\n\t--font-size-input: 14px;\n\t--font-size-header: 20px;\n\t--font-size-paragraph: 14px;\n\t--font-size-link: 12px;\n\t--font-size-error: 12px;\n\t--font-size-html-h1: 28px;\n\t--font-size-html-h2: 20px;\n\t--font-size-html-h3: 16px;\n\t--font-size-html-h4: 14px;\n\t--font-size-html-h5: 12px;\n\t--font-size-html-h6: 10px;\n\t--font-size-subheader: 14px;\n\n\t/* Colors */\n\t--color-background: #fbfcfe;\n\t--color-test-notice-text: #e6a23d;\n\t--color-test-notice-bg: #fefaf6;\n\t--color-test-notice-border: #f6dcb7;\n\t--color-card-bg: #ffffff;\n\t--color-card-border: #dbdfe7;\n\t--color-card-shadow: rgba(99, 77, 255, 0.06);\n\t--color-link: #7e8186;\n\t--color-header: #525356;\n\t--color-label: #555555;\n\t--color-input-border: #dbdfe7;\n\t--color-input-text: #71747A;\n\t--color-focus-border: rgb(90, 76, 194);\n\t--color-submit-btn-bg: #ff6d5a;\n\t--color-submit-btn-text: #ffffff;\n\t--color-error: #ea1f30;\n\t--color-required: #ff6d5a;\n\t--color-clear-button-bg: #7e8186;\n\t--color-html-text: #555;\n\t--color-html-link: #ff6d5a;\n\t--color-header-subtext: #7e8186;\n\n\t/* Border Radii */\n\t--border-radius-card: 8px;\n\t--border-radius-input: 6px;\n\t--border-radius-clear-btn: 50%;\n\t--card-border-radius: 8px;\n\n\t/* Spacing */\n\t--padding-container-top: 24px;\n\t--padding-card: 24px;\n\t--padding-test-notice-vertical: 12px;\n\t--padding-test-notice-horizontal: 24px;\n\t--margin-bottom-card: 16px;\n\t--padding-form-input: 12px;\n\t--card-padding: 24px;\n\t--card-margin-bottom: 16px;\n\n\t/* Dimensions */\n\t--container-width: 448px;\n\t--submit-btn-height: 48px;\n\t--checkbox-size: 18px;\n\n\t/* Others */\n\t--box-shadow-card: 0px 4px 16px 0px var(--color-card-shadow);\n\t--opacity-placeholder: 0.5;\n}"
        }
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        2100,
        2360
      ],
      "id": "9b21b368-2fb1-4ded-a7e6-8ff41212be6d",
      "name": "On form submission",
      "webhookId": "61c131c3-7c60-4418-9f04-77a712ea6e87",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/insight_api_labs~youtube-comments-1-month---reliable-efficient/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"video_urls\": [\n    {\n      \"url\": \"{{ $('Edit Fields').item.json['Youtube Video URL'] }}\",\n      \"method\": \"GET\"\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {}
          }
        }
      },
      "id": "9f6b403c-48ee-49c8-814d-17eecd8473a9",
      "name": "Comments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2780,
        2900
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "pageUrl, comment",
        "options": {
          "destinationFieldName": ""
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3200,
        2920
      ],
      "id": "f385b36c-6e5a-49d7-846d-2b57b9c97f86",
      "name": "Split Out"
    },
    {
      "parameters": {
        "resource": "audio",
        "input": "={{ $json.Markdown }}",
        "voice": "nova",
        "options": {
          "response_format": "aac",
          "binaryPropertyOutput": "audio"
        }
      },
      "id": "e779edb7-a666-42ad-beed-51fd1942694e",
      "name": "Text → Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        5180,
        2800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "n6jJpStEewoZQA9T",
          "name": "OpenAi account 6"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "inputText": "={{ $json.comment }}",
        "options": {
          "categories": "Positive, Neutral, Negative",
          "systemPromptTemplate": "You are highly intelligent and accurate sentiment analyzer. Analyze the sentiment of the provided text. Categorize it into one of the following: {categories}. Use the provided formatting instructions. Only output the JSON.",
          "includeDetailedResults": false,
          "enableAutoFixing": false
        }
      },
      "id": "c848fc0b-ee7a-4c97-bac1-31ce0fc90a1d",
      "name": "Comments Sentiment Analysis Agent",
      "type": "@n8n/n8n-nodes-langchain.sentimentAnalysis",
      "typeVersion": 1,
      "position": [
        3400,
        2920
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "html": "={{ $json.html }}",
        "destinationKey": "Markdown",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        4980,
        2800
      ],
      "id": "8f6fe8ff-adf8-4e24-9e9a-5a396dfea5dc",
      "name": "Markdown"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "adad4ab3-6a87-493b-8a65-98afd8ff7ca7",
              "leftValue": "={{ $json.commentsCount }}",
              "rightValue": "={{0}}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3000,
        2900
      ],
      "id": "81ab854e-61de-4cb0-a1bc-594f652799b3",
      "name": "If zero comments"
    },
    {
      "parameters": {
        "html": "<html>\n  <head>\n    <style>\n      body { font-family: Arial, sans-serif; padding: 20px; }\n      img { max-width: 100%; height: auto; }\n      .key-points { margin: 20px 0; }\n      .metadata { color: #888; }\n      .separator {border-bottom: 1px solid #ccc; margin: 20px 0;}\n    </style>\n  </head>\n  <body>\n    <h2>{{ $('Youtube Transcript').first().json.videoTitle }}</h2>\n    <h3>Summary</h3>\n    <p>{{ $('Summary Agent').first().json.text }}</p>\n    <hr></hr>          \n    <div class=\"metadata\">             \n      <h4>Video Information</h4>\n      <ul>               \n        <li>Published: {{ $now.format('yyyy-MMM-dd') }} </li>\n        <li>Duration: under {{ $('Read_Videos').first().json.Duration.toDateTime().minute+1}} minutes</li>\n        <li>Views: {{ $('Read_Videos').first().json.Viewcount }}</li>\n        <li>Likes: {{ $('Read_Videos').first().json.Likes }}</li> </ul>\n    </div>            \n    <div class=\"metadata\">\n      <h4>Comment Sentiment Analysis</h4>\n      <ul>\n        <li>Sentiment NPS: {{ $('Sentiment Stats').item.json.snps }}\" %\"</li>\n      </ul>\n    </div>\n    <hr></hr>\n  </body>\n</html>"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        4800,
        2800
      ],
      "id": "bc4d00f9-3c8e-4058-8b71-b02a74442f8a",
      "name": "html_summary_audio"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3820,
        2920
      ],
      "id": "ec0a1a80-0674-4237-a38c-05e21f5cc72a",
      "name": "Aggregate",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {
          "summarizationMethodAndPrompts": {
            "values": {
              "combineMapPrompt": "=Write a concise summary of the following:\n\n\"{{ $json.transcript }}\"\n\nCONCISE SUMMARY: ",
              "prompt": "=Write a concise summary of the following:\n\n\n\"{{ $json.transcript }}\"\n\n\nCONCISE SUMMARY:"
            }
          }
        }
      },
      "id": "f1308e54-d451-4980-ba40-8ba0124b6257",
      "name": "Summarization Chain2",
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 2,
      "position": [
        6800,
        2400
      ]
    },
    {
      "parameters": {
        "url": "=https://api.apify.com/v2/acts/streamers~youtube-scraper/runs/last?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"startUrls\": \"[{{ $('Process_video').first().json.videoURL }}]\",\n    \"includeTimestamps\": \"Yes\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6640,
        2400
      ],
      "id": "06252a93-395a-494e-9873-1c8306b24344",
      "name": "Transcript w/TS"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f617cd27-847a-4c21-89e7-21ebfe83d8aa",
      "name": "OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6820,
        2580
      ],
      "credentials": {
        "openAiApi": {
          "id": "pZ4IJBXWzhYzZfRs",
          "name": "OpenAi _Blue&"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "0b4dc8d1-6497-45d6-af95-1d92fe11b250",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        6380,
        2140
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.body[0].transcript || '[null]' }}",
        "categories": {
          "categories": [
            {
              "category": "Wordless",
              "description": "there is no transcript"
            },
            {
              "category": "Ad",
              "description": "transcript is an advertisement"
            },
            {
              "category": "Content",
              "description": "When transcript is not an ad. It is real content."
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "=You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\n\nYour goal is to help clasify the youtube videos that fall in the following categories:\n\"ad\", \"wordless\", \"content\"\n\nIf the transcript is empty, respond \"wordless\"\nIf the transcript is all about an ad, respond \"ad\". \nIf the transcript has relevant content which is not advertising, respond \"content\"",
          "enableAutoFixing": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        6100,
        1980
      ],
      "id": "270480b1-6dff-48f5-ae6d-e5e39ab0d62f",
      "name": "Classifier",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3d87a111-84f3-4e45-a964-fcb18f319790",
              "name": "Youtube Video URL",
              "value": "https://www.youtube.com/watch?v=62SA_YwUg5Q",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2300,
        2000
      ],
      "id": "287b5c8e-0b85-4926-8a7d-f06a25480741",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "text",
          "timeout": 15000
        }
      },
      "id": "ccac1282-79b3-4de7-b22c-68c8c1a65478",
      "name": "OpenAI4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3380,
        3080
      ],
      "credentials": {
        "openAiApi": {
          "id": "7lpyAVssSQvwtkjO",
          "name": "Content Generation"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/9PPh3FVGsPLtVqWLb/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    \"{{ $json['Youtube Video URL'] }}\"\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "49c1f4f6-a43c-4547-b29c-94317e704522",
      "name": "YT Transcript Ninja",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2480,
        2360
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Initialize counters for each sentiment category\nlet positiveCount = 0;\nlet neutralCount = 0;\nlet negativeCount = 0;\n\n// Get the data from the Aggregate node\nconst aggregateData = $input.first().json;\n\n// Check if we have data array\nif (aggregateData && aggregateData.data && Array.isArray(aggregateData.data)) {\n  const dataItems = aggregateData.data;\n  const totalComments = dataItems.length;\n  \n  // Loop through each data item\n  dataItems.forEach(item => {\n    // Access the sentiment category from the sentimentAnalysis field\n    if (item.sentimentAnalysis && item.sentimentAnalysis.category) {\n      const category = item.sentimentAnalysis.category.toLowerCase();\n      \n      // Count based on sentiment category\n      if (category.includes('positive')) {\n        positiveCount++;\n      } else if (category.includes('negative')) {\n        negativeCount++;\n      } else if (category.includes('neutral')) {\n        neutralCount++;\n      }\n    }\n  });\n  \n  // Calculate percentages\n  const percentPositive = totalComments > 0 ? (positiveCount / totalComments * 100).toFixed(1) : 0;\n  const percentNeutral = totalComments > 0 ? (neutralCount / totalComments * 100).toFixed(1) : 0;\n  const percentNegative = totalComments > 0 ? (negativeCount / totalComments * 100).toFixed(1) : 0;\n  \n  // Return the summary\n  return {\n    json: {\n      summary: {\n        totalComments,\n        positive: {\n          count: positiveCount,\n          percentage: parseFloat(percentPositive)\n        },\n        neutral: {\n          count: neutralCount,\n          percentage: parseFloat(percentNeutral)\n        },\n        negative: {\n          count: negativeCount,\n          percentage: parseFloat(percentNegative)\n        }\n      }\n    }\n  };\n} else {\n  // Handle case where there's no data\n  return {\n    json: {\n      summary: {\n        totalComments: 0,\n        positive: { count: 0, percentage: 0 },\n        neutral: { count: 0, percentage: 0 },\n        negative: { count: 0, percentage: 0 }\n      }\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4140,
        2920
      ],
      "id": "1c51a485-7d5d-4fdd-95a9-60f09fdf416d",
      "name": "Sentiment Results",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"proxy\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"RESIDENTIAL\"\n    ],\n    \"apifyProxyCountry\": \"US\"\n  },\n  \"startUrls\": [\n    \"{{ $json.body[0].url }}\"\n  ],\n  \"maxConcurrency\": 10,\n  \"minConcurrency\": 1,\n  \"maxRequestRetries\": 10\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2960,
        2360
      ],
      "id": "b5a62cff-4e91-476d-94c2-0a31f3696da6",
      "name": "Video #1"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/easyapi~youtube-video-metadata-scraper/runs?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\"https://www.youtube.com/watch?{{ $json.videoId }}\"]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3160,
        2360
      ],
      "id": "cc8a6f5a-1237-40cb-a04c-d728f70d8b09",
      "name": "Video #2"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/xZZCnxEXR5Igzeds2/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"proxy\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\n      \"RESIDENTIAL\"\n    ],\n    \"apifyProxyCountry\": \"US\"\n  },\n  \"startUrls\": [\n    \"{{ $('Videos Run ID1').first().json.body[0].url }}\"\n  ],\n  \"maxConcurrency\": 10,\n  \"minConcurrency\": 1,\n  \"maxRequestRetries\": 10\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3340,
        2360
      ],
      "id": "240f3002-e256-490b-8928-959d6a5e883d",
      "name": "Video #3"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/YQXlKJnfTu8laRipB/items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"videoUrls\": [\n    \"<{{ $json.body[0].url }}>\"\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3540,
        2360
      ],
      "id": "d29ae456-9652-46c2-845a-b7ff20b7af8e",
      "name": "Comments - more1"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and create a concise, professional summary (250-300 words) that describes:\n\n1. The main topic and purpose of the video\n2. The key points or sections covered \n3. The presenter's communication approach\n4. 3-4 specific notable insights from the content\n5. Who would benefit most from this video\n\nUse only the information provided: \nTitle: \"{{ $('Video #3').item.json.title }}\", \nDescription: \"{{ $('Video #3').item.json.description }}\", \nTags: {{ $('Video #3').item.json.tags }}, \nand these transcript excerpts: {{ $('Videos Run ID1').item.json.body[0].transcript }}\n\nFormat your response as a neutral, analytical paragraph without using first-person language.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3720,
        2360
      ],
      "id": "9cd21e03-08f1-40c8-8a1a-7ab72a3d9b90",
      "name": "cSummary",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this YouTube video information and generate 5 specific content strengths for a video titled \"{{ $('Videos Run ID1').item.json.body[0].videoTitle }}\" with these details:\n- Description: \"{{ $('Video #3').item.json.description }}\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- Duration: {{ $('Video #3').item.json.lengthInSeconds }}\n- Top comments: {{topComments}}\n\nFor each strength:\n1. Identify a specific aspect of the content that appears to be executed well\n2. Format as \"Category: Detailed explanation\" (e.g., \"Visual Presentation: High-quality graphics with clear annotations make complex concepts easy to understand.\")\n3. Focus on content quality, structure, presentation style, information value, or audience engagement\n4. Base your analysis on the video's topic, structure, and audience reception\n5. Provide specific, substantive analysis rather than generic praise\n\nEnsure each strength is distinct and focuses on a different aspect of the content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3000,
        2620
      ],
      "id": "0fe073b2-bb89-464b-9dee-cf7c638d2ecd",
      "name": "cStrengths",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Based on this YouTube video information, identify 5 specific improvement opportunities for a video titled \"\" with:\n- Description: \"{{ $('Video #3').item.json.description }}\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- View-to-like ratio: {{$json[\"likesToViewsRatio\"]}}\n- Comments: {{topComments}}\n\nFor each opportunity:\n1. Identify a specific aspect that could be enhanced or expanded\n2. Format as \"Area: Detailed explanation\" (e.g., \"Technical Depth: The encryption section could benefit from more detailed examples showing practical implementation.\")\n3. Base your suggestions on viewer feedback in comments and content gaps based on the topic\n4. Be constructive and specific rather than critical\n5. Focus on content expansion, audience engagement, technical clarifications, or additional value-add elements\n\nEach opportunity should offer actionable insight that would meaningfully improve the video content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3360,
        2620
      ],
      "id": "c7e54c0d-7f68-43e1-9bea-bee97c83f325",
      "name": "cOpportunities",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Create 5 strategic, actionable recommendations for a YouTube creator to improve and expand upon their video \"{{ $('Video #3').item.json.title }}\" based on this data:\n- Video metrics: {{ $('Video #3').item.json.viewCount }} views, {{ $('Video #3').item.json.likeCount }} likes, {{ $('Video #3').item.json.commentCount }} comments\n- Description: \"\"\n- Tags: {{ $('Video #3').item.json.tags }}\n- Content strengths: {{ $('cStrengths').item.json.message.content }}\n- Content opportunities: {{ $json.message.content }}\n- Top comments: {{topComments}}\n\nEach recommendation should:\n1. Start with a clear, action-oriented title (e.g., \"Develop Series Extension:\")\n2. Include a detailed, specific explanation (approximately 30-50 words)\n3. Address a strategic opportunity to increase engagement, viewership, or content value\n4. Connect directly to insights from the data provided\n5. Include a specific potential outcome or benefit\n\nFormat each as \"Action Title: Detailed explanation with strategic rationale.\"\n\nRecommendations should be tailored to this specific video and channel context, not generic YouTube advice.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        3720,
        2620
      ],
      "id": "75305522-c594-4eba-9c71-d76bfef2a4bf",
      "name": "cRecommendations",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate 5 realistic YouTube comments for a video titled \"{{ $('Video #3').item.json.title }}\" with description \"{{ $('Video #3').item.json.description }}\".\n\nThe video has {{ $('Video #3').item.json.viewCount }} views, {{ $('Video #3').item.json.likeCount }} likes, and {{ $('Video #3').item.json.commentCount }} comments, suggesting it's a popular video with good engagement.\n\nCreate comments that:\n1. Reflect diverse viewer perspectives (positive feedback, constructive criticism, expert insights, beginner questions, etc.)\n2. Reference specific content that would likely be in the video based on its title and description\n3. Include reasonable usernames that match the likely audience for this content\n4. Show varying levels of detail and engagement with the content\n5. Include at least one comment that mentions a minor correction or suggestion for improvement\n\nFormat each comment as a JSON object with \"user\" and \"comment\" properties. The comments should be highly realistic and specific to this video's content.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4080,
        2620
      ],
      "id": "857b9872-0b43-48f6-a159-5ebe202f7387",
      "name": "Top Comments",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert Editor specializing in refining and polishing content to ensure it meets the highest quality standards. Your role is to review and improve the written material produced by multiple Writers while maintaining academic integrity and proper source attribution. Your task is to provide a highly polished, SEO-optimized summary with proper citation management.\n\n## Content Review Instructions:\nCarefully read the entire content piece.\nCheck for grammar, spelling, and punctuation errors.\nEnsure consistency in tone, style, and voice throughout the piece.\nVerify that the content aligns with the original brief.\nImprove sentence structure and flow for better readability.\nOptimize headlines, subheadings, and formatting for better engagement, especially for SEO.\nSuggest improvements or additions to enhance the overall quality of the content.\n\nToday's date is: {{ $now }}\n\n{{ $json.message.content }}",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4080,
        2360
      ],
      "id": "63828795-63b7-4fad-a7b4-efde33781da6",
      "name": "Editor",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Given the YouTube video title \"{{ $('Video #3').item.json.title }}\" about {{ $('Video #3').item.json.tags }}, generate 7 realistic transcript excerpts that would appear throughout an educational video on this topic.\n\nEach excerpt should:\n1. Include a timestamp (starting with 0:00 and ending near the video duration of {{ $('Video #3').item.json.lengthInSeconds,\"seconds\"}})\n2. Reflect natural speaking patterns of an educational content creator\n3. Represent key moments in the video's narrative structure\n4. Include an introduction, key points for each major section, and a conclusion\n5. Match the tone and style suggested by the video description: \n\"{{ $('Video #3').item.json.description }}\"\n\nFormat each excerpt as a JSON object with \"time\" and \"text\" properties.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2640,
        2620
      ],
      "id": "a8f0d78e-7ba0-4b76-89e1-37ac528970c7",
      "name": "Transcript Excerpts",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "uploadType",
              "value": "multipart"
            },
            {
              "name": "supportsAllDrives",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "multipart/related; boundary=divider",
        "body": "={{ $json.rawData }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6420,
        2620
      ],
      "id": "ea688345-20de-4b00-9fdc-113b2e5f778b",
      "name": "CreateGoogleDoc1",
      "notesInFlow": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process all items and output as required by Split Out Items node.\nreturn $input.all().map(item => {\n  const inputData = item.json;\n  return {\n    json: {\n      videoTitle: inputData.title || inputData.videoTitle || \"YouTube Video Analysis\",\n      videoUrl: inputData.url || inputData.videoUrl || \"\"\n      // ... add remaining fields as in previous code\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6420,
        2780
      ],
      "id": "2753f94d-763f-43a8-9425-7685235dfa0f",
      "name": "Report Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://docs.googleapis.com/v1/documents",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"title\": \"Test: {{ $json.id }}\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        7100,
        2600
      ],
      "id": "d5cfe3f3-029c-4469-a7cc-7203cba73c09",
      "name": "Create GDoc Report",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Map over all input items and process each one\nreturn $input.all().map(item => {\n  // You can modify item.json or add new properties as needed\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6960,
        2600
      ],
      "id": "fb9515e5-f44f-4af7-8f57-14fd5b1d159b",
      "name": "Data Preparation"
    },
    {
      "parameters": {
        "jsCode": "// Function to generate YouTube report with data\nmodule.exports = function() {\n  // Get input data\n  const inputData = $input.item.json;\n  \n  // Calculate additional metrics\n  const viewCount = Number(inputData.viewCount) || 0;\n  const likeCount = Number(inputData.likeCount) || 0;\n  const commentCount = Number(inputData.commentCount) || 0;\n  \n  const likesToViewsRatio = viewCount > 0 ? likeCount / viewCount : 0;\n  const commentsToViewsRatio = viewCount > 0 ? commentCount / viewCount : 0;\n  \n  // Format duration from seconds\n  const formatDuration = (seconds) => {\n    if (!seconds) return \"00:00\";\n    const totalSeconds = Number(seconds);\n    if (isNaN(totalSeconds)) return \"00:00\";\n    \n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const secs = Math.floor(totalSeconds % 60);\n    \n    if (hours > 0) {\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n    } else {\n      return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n    }\n  };\n  \n  // Format date (if it's in ISO format)\n  const formatDate = (dateString) => {\n    if (!dateString) return \"\";\n    \n    // Check if dateString is in ISO format\n    if (dateString.includes('T')) {\n      return dateString.split('T')[0];\n    }\n    return dateString;\n  };\n  \n  // Prepare data object with all required values\n  const data = {\n    reportDate: inputData.reportDate || new Date().toLocaleDateString('en-US', {\n      day: '2-digit',\n      month: 'short',\n      year: '2-digit'\n    }),\n    videoTitle: inputData.videoTitle || inputData.title || \"Untitled Video\",\n    channelName: inputData.channelName || inputData.channelDisplayName || \"\",\n    publishDate: formatDate(inputData.publishDate || inputData.uploadDatetime || \"\"),\n    viewCount: viewCount.toLocaleString(),\n    likeCount: likeCount.toLocaleString(),\n    commentCount: commentCount.toLocaleString(),\n    likesToViewsRatio: likesToViewsRatio,\n    commentsToViewsRatio: commentsToViewsRatio,\n    videoUrl: inputData.videoUrl || inputData.url || \"\",\n    videoDuration: formatDuration(inputData.lengthInSeconds),\n    channelUrl: inputData.channelUrl || inputData.channelURL || \"\",\n    subscriberCount: inputData.subscriberCount || inputData.channelSubscribers || \"0\",\n    videoDescription: inputData.videoDescription || inputData.description || \"\",\n    videoTags: Array.isArray(inputData.videoTags || inputData.tags) ? \n               (inputData.videoTags || inputData.tags) : [],\n    contentSummary: inputData.contentSummary || \"\"\n  };\n  \n  // Generate the report content\n  const reportContent = `# YouTube Video Analysis Report\n\n**Report Date:** ${data.reportDate}\n\n---\n\n## Executive Summary\n\nThis report analyzes the YouTube video \"${data.videoTitle}\" published by ${data.channelName} on ${data.publishDate}. The video has received ${data.viewCount} views, ${data.likeCount} likes, and ${data.commentCount} comments since publication.\n\nKey performance indicators show **${data.likesToViewsRatio > 0.08 ? \"above average\" : data.likesToViewsRatio > 0.05 ? \"average\" : \"below average\"}** engagement based on like-to-view ratio (${(data.likesToViewsRatio * 100).toFixed(1)}%), with a comment-to-view ratio of ${(data.commentsToViewsRatio * 100).toFixed(2)}% indicating **${data.commentsToViewsRatio > 0.005 ? \"high\" : data.commentsToViewsRatio > 0.002 ? \"average\" : \"low\"}** audience interaction.\n\n---\n\n## Video Overview\n\n| | |\n|------------|-------------|\n| **Title** | ${data.videoTitle} |\n| **URL** | ${data.videoUrl} |\n| **Published** | ${data.publishDate} |\n| **Duration** | ${data.videoDuration} |\n| **Channel** | ${data.channelName} |\n| **Subscribers** | ${data.subscriberCount} |\n\n---\n\n## Performance Metrics\n\n| Metric | Count | Ratio | Assessment |\n|--------|-------|-------|------------|\n| **Views** | ${data.viewCount} | - | ${viewCount > 100000 ? \"Strong\" : viewCount > 10000 ? \"Good\" : \"Moderate\"} |\n| **Likes** | ${data.likeCount} | ${(data.likesToViewsRatio * 100).toFixed(1)}% of views | ${data.likesToViewsRatio > 0.08 ? \"Above Average\" : data.likesToViewsRatio > 0.05 ? \"Average\" : \"Below Average\"} |\n| **Comments** | ${data.commentCount} | ${(data.commentsToViewsRatio * 100).toFixed(2)}% of views | ${data.commentsToViewsRatio > 0.005 ? \"High Engagement\" : data.commentsToViewsRatio > 0.002 ? \"Average Engagement\" : \"Low Engagement\"} |\n\n---\n\n## Content Analysis\n\n### Video Description\n\n\\`\\`\\`\n${data.videoDescription}\n\\`\\`\\`\n\n### Tags\n${data.videoTags.map(tag => `#${tag}`).join(' ')}\n\n### Content Summary\n\n${data.contentSummary}\n\n---\n\n## SWOT Analysis\n\n### Content Strengths\n\n- **Industry Expertise:** Deep knowledge of automotive retail digital landscape\n- **Practical Insights:** Actionable recommendations for dealers and OEMs\n- **Candid Discussion:** Honest assessment of industry challenges\n- **Structured Format:** Clear organization of complex topics\n- **Authority Positioning:** Establishes thought leadership in automotive technology\n\n### Content Opportunities\n\n- **Audience Growth:** Channel has potential to reach more industry professionals\n- **Visual Elements:** Could benefit from graphics and data visualization\n- **Content Segmentation:** Long interview could be split into topic-focused clips\n- **SEO Optimization:** Additional industry keywords could improve discoverability\n- **Call-to-Action:** More specific viewer prompts could increase engagement\n\n---\n\n## Strategic Recommendations\n\n### 1. Create Topic-Specific Clips\nExtract 3-5 minute segments on key topics for higher shareability and to reach new audiences through more digestible content. Focus on creating standalone clips that provide value even without watching the full interview.\n\n### 2. Develop Follow-Up Content\nCreate dedicated episodes on specific subtopics mentioned in this interview, particularly around data privacy compliance and website optimization for conversions. This can establish a content series that builds on viewer interest.\n\n### 3. Enhance SEO Strategy\nOptimize with industry-specific keywords for better discoverability. Consider adding timestamps in the description for key topics to improve user experience and search visibility.\n\n### 4. Implement Visual Elements\nAdd simple graphics, statistics, or text overlays to emphasize key points during lengthy explanations. This improves information retention and creates more shareable moments.\n\n### 5. Cross-Promote Content\nLeverage connections with featured guests to expand distribution through their networks and platforms, particularly through LinkedIn and industry-specific communities.\n\n---\n\n## Action Items\n\nBased on this analysis, here are the suggested next steps:\n\n1. **Create Topic-Specific Clips** - Begin implementation within 7 days\n2. **Develop Follow-Up Content** - Plan within 14 days\n3. **Address Audience Growth** - In next content creation cycle\n4. **Leverage Industry Expertise** - Across channel content\n\n---\n\n*This report was automatically generated on ${data.reportDate} based on publicly available data. For more detailed analytics including audience retention, demographics, and traffic sources, please refer to YouTube Studio analytics.*`;\n\n  // Google Doc format conversion - Convert markdown to Google Doc format\n  // This creates a structured array of requests for the Google Docs API\n  function convertMarkdownToGoogleDocsRequests(markdown) {\n    const requests = [];\n    let currentIndex = 1; // Start after title\n    \n    // Helper function to add text and track position\n    function appendText(text, style = null) {\n      if (!text) return;\n      \n      const textLength = text.length;\n      \n      // Insert the text\n      requests.push({\n        insertText: {\n          location: { index: currentIndex },\n          text: text\n        }\n      });\n      \n      // Apply style if specified\n      if (style) {\n        requests.push({\n          updateParagraphStyle: {\n            range: {\n              startIndex: currentIndex,\n              endIndex: currentIndex + textLength\n            },\n            paragraphStyle: style,\n            fields: \"namedStyleType\"\n          }\n        });\n      }\n      \n      // Update position\n      currentIndex += textLength;\n    }\n    \n    // Split markdown into lines\n    const lines = markdown.split('\\n');\n    \n    // Process each line\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      \n      // Process headers\n      if (line.startsWith('# ')) {\n        appendText(line.substring(2) + '\\n\\n', { namedStyleType: \"HEADING_1\" });\n      } \n      else if (line.startsWith('## ')) {\n        appendText(line.substring(3) + '\\n\\n', { namedStyleType: \"HEADING_2\" });\n      } \n      else if (line.startsWith('### ')) {\n        appendText(line.substring(4) + '\\n\\n', { namedStyleType: \"HEADING_3\" });\n      }\n      // Process horizontal rules\n      else if (line.startsWith('---')) {\n        appendText('─────────────────────────────────────────────────\\n\\n');\n      }\n      // Process bold text (simplified approach)\n      else if (line.includes('**')) {\n        // This is a simplified approach - in a real implementation,\n        // you would need more complex parsing for mixed formatting\n        appendText(line + '\\n\\n');\n      }\n      // Process tables (simplified)\n      else if (line.includes('|')) {\n        // In a real implementation, you'd use the insertTable request type\n        // for Google Docs API, but this is more complex\n        appendText(line + '\\n');\n      }\n      // Process code blocks\n      else if (line.startsWith('```')) {\n        // For code blocks, continue appending lines until we hit the closing ```\n        let codeBlock = '';\n        i++; // Skip the opening ```\n        while (i < lines.length && !lines[i].startsWith('```')) {\n          codeBlock += lines[i] + '\\n';\n          i++;\n        }\n        appendText(codeBlock + '\\n\\n');\n      }\n      // Process bullet points\n      else if (line.trim().startsWith('- ')) {\n        appendText(line + '\\n');\n      }\n      // Process numbered lists\n      else if (/^\\d+\\.\\s/.test(line.trim())) {\n        appendText(line + '\\n');\n      }\n      // Standard paragraph\n      else {\n        appendText(line + '\\n');\n      }\n    }\n    \n    return requests;\n  }\n  \n  // Convert the markdown to Google Docs API requests\n  const docRequests = convertMarkdownToGoogleDocsRequests(reportContent);\n  \n  // Add fields to each input item, or just pass through existing items\n  return $input.all().map(item => ({\n    json: {\n      ...item.json,\n      customField: 'Your Value Here' // Add any data you want to each item\n    }\n  }));\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        6680,
        2780
      ],
      "id": "87ea5a0f-1cda-4424-b144-12f3e4896cd4",
      "name": "Update GDoc Content"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8a1e4f7a-943b-49b6-89db-06ee47d85b1e",
              "name": "htmlContent",
              "value": "=<!DOCTYPE html> <html lang=\"en\"> <head>     <meta charset=\"UTF-8\">     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">     <title>YouTube Analysis Test Template</title>     <style>         body {             font-family: Arial, sans-serif;             line-height: 1.6;             max-width: 800px;             margin: 0 auto;             padding: 20px;         }         h1 {             color: #c00;             border-bottom: 1px solid #ccc;             padding-bottom: 10px;         }         .section {             margin-bottom: 20px;             padding: 15px;             background-color: #f9f9f9;             border-radius: 5px;         }         .field {             margin-bottom: 10px;         }         .label {             font-weight: bold;             display: inline-block;             width: 150px;         }         .value {             display: inline-block;         }         .highlight {             background-color: #ffffcc;             padding: 2px 5px;             border-radius: 3px;         }     </style> </head> <body>     <h1>YouTube Analysis Test Template</h1>          <div class=\"section\">         <h2>Basic Information</h2>         <div class=\"field\">             <span class=\"label\">Title:</span>             <span class=\"value highlight\">{{ $json.title }}</span>         </div>         <div class=\"field\">             <span class=\"label\">URL:</span>             <span class=\"value\">{{ $('Data Preparation').item.json.url }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Publish Date:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.publishedDate }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Duration:</span>             <span class=\"value\">{{ $('Data Preparation').item.json.lengthInSeconds }} seconds</span>         </div>     </div>      <div class=\"section\">         <h2>Channel Information</h2>         <div class=\"field\">             <span class=\"label\">Channel Name:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.channelDisplayName }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Channel URL:</span>             <span class=\"value\">{{ $('Data Preparation').item.json.channelURL }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Subscribers:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.channelSubscribers }}</span>         </div>     </div>      <div class=\"section\">         <h2>Performance Metrics</h2>         <div class=\"field\">             <span class=\"label\">Views:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.viewCount }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Likes:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.likeCount }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Comments:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.commentCount }}</span>         </div>     </div>      <div class=\"section\">         <h2>Content</h2>         <div class=\"field\">             <div class=\"label\">Tags:</div>             <div class=\"value\">{{ $('Data Preparation').item.json.tags }}</div>         </div>         <div class=\"field\">             <div class=\"label\">Description:</div>             <div class=\"value\" style=\"white-space: pre-wrap;\">{{ $('Data Preparation').item.json.description }}</div>         </div>         <div class=\"field\">             <div class=\"label\">Content Summary:</div>             <div class=\"value highlight\" style=\"white-space: pre-wrap;\">{{ $('Data Preparation').item.json['cSummary - refined'] }}</div>         </div>     </div>      <div class=\"section\">         <h2>Report Information</h2>         <div class=\"field\">             <span class=\"label\">Report Date:</span>             <span class=\"value highlight\">{{ $('Data Preparation').item.json.reportDate }}</span>         </div>         <div class=\"field\">             <span class=\"label\">Document ID:</span>             <span class=\"value\">{{$node[\"Create GDoc Report\"].json.documentId}}</span>         </div>     </div>  </body> </html>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        7220,
        2600
      ],
      "id": "0b2c4302-39c7-42c1-84d8-eadce22577b7",
      "name": "htmlContent"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"documentId\": \"{{$json.documentId}}\",\n  \"requests\": [\n    {\n      \"insertText\": {\n        \"location\": { \"index\": 1 },\n        \"text\": \"{{$json.htmlContent}}\"\n      }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6680,
        2940
      ],
      "id": "cb97f669-b62c-4200-b351-6292951e01b1",
      "name": "Set Update"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://docs.googleapis.com/v1/documents/{{$json.documentId}}:batchUpdate",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \"\"requests\": {{ JSON.stringify($json.requests) }}\" }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6880,
        2940
      ],
      "id": "21467832-ee6a-4bf1-9763-3ff7a86a756e",
      "name": "HTTP Request",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a6d2bb42-9851-4bcf-88c9-a0a64a8b1a66",
              "name": "id",
              "value": "={{ $('Video #3').item.json.id }}",
              "type": "string"
            },
            {
              "id": "98d5d864-30b2-479f-821c-5c6e84f44816",
              "name": "url",
              "value": "={{ $('Video #3').item.json.url }}",
              "type": "string"
            },
            {
              "id": "d5b69112-36aa-4f73-a9c8-ff36a3a0186c",
              "name": "title",
              "value": "={{ $('Video #3').item.json.title }}",
              "type": "string"
            },
            {
              "id": "6f0044dc-6c54-4486-a987-baffd687be72",
              "name": "description",
              "value": "={{ $('Video #3').item.json.description }}",
              "type": "string"
            },
            {
              "id": "76cd2bb4-ae7b-4b04-b100-5571b4916f5b",
              "name": "lengthInSeconds",
              "value": "={{ $('Video #3').item.json.lengthInSeconds }}",
              "type": "number"
            },
            {
              "id": "4b37d727-0d53-435c-bf34-2ab80c300d3b",
              "name": "duration",
              "value": "=\"videoDuration\": \"={{   (function() {     const seconds = Number($('Video #3').item.json.lengthInSeconds);     if (isNaN(seconds)) return '00:00';          const hours = Math.floor(seconds / 3600);     const minutes = Math.floor((seconds % 3600) / 60);     const secs = Math.floor(seconds % 60);          if (hours > 0) {       return hours + ':' + String(minutes).padStart(2, '0') + ':' + String(secs).padStart(2, '0');     } else {       return String(minutes).padStart(2, '0') + ':' + String(secs).padStart(2, '0');     }   })() }}\"",
              "type": "string"
            },
            {
              "id": "082eafe5-86dc-4b37-9a56-4b49d76c169d",
              "name": "publishedDate",
              "value": "={{ $('Video #3').item.json.uploadDatetime.toDateTime().format('LLL/dd/yy') }}",
              "type": "string"
            },
            {
              "id": "583cc54a-d6da-48b6-af3f-24ef690c1471",
              "name": "category",
              "value": "={{ $('Video #3').item.json.category }}",
              "type": "string"
            },
            {
              "id": "6de1dd9c-9212-42a0-af77-469a0d99bf37",
              "name": "tags",
              "value": "={{ $('Video #3').item.json.tags ? $('Video #3').item.json.tags.map(tag => '#' + tag).join(' ') : '' }}",
              "type": "string"
            },
            {
              "id": "2813f62a-2330-43f9-a373-8735f6e57355",
              "name": "channelID",
              "value": "={{ $('Video #3').item.json.channelID }}",
              "type": "string"
            },
            {
              "id": "1c10857e-9efe-412f-9c5c-9a5bbaa540fe",
              "name": "channelURL",
              "value": "={{ $('Video #3').item.json.channelURL }}",
              "type": "string"
            },
            {
              "id": "d1a68eda-757d-441a-bfae-e78ace8d8a7b",
              "name": "channelUsername",
              "value": "={{ $('Video #3').item.json.channelUsername }}",
              "type": "string"
            },
            {
              "id": "a4b1921f-dfcd-4ff8-80eb-25909ae19a52",
              "name": "channelDisplayName",
              "value": "={{ $('Video #3').item.json.channelDisplayName }}",
              "type": "string"
            },
            {
              "id": "56394597-3c6b-4a42-988d-72970969f034",
              "name": "channelSubscribers",
              "value": "={{ $('Video #3').item.json.channelSubscribers }}",
              "type": "string"
            },
            {
              "id": "f7e4fae0-3b3d-422b-85dc-c8519bb72021",
              "name": "viewCount",
              "value": "={{ $('Video #3').item.json.viewCount }}",
              "type": "number"
            },
            {
              "id": "f64b2963-d190-41bf-8c83-62f9cff210c0",
              "name": "likeCount",
              "value": "={{ $('Video #3').item.json.likeCount }}",
              "type": "number"
            },
            {
              "id": "e1254a80-e9e5-4c3a-97ca-98cce0e3a1e6",
              "name": "commentCount",
              "value": "={{ $('Video #3').item.json.commentCount }}",
              "type": "number"
            },
            {
              "id": "6499b86b-0002-42df-9fc4-7420739c6258",
              "name": "transcripts",
              "value": "={{ $('Video #3').item.json.transcripts }}",
              "type": "array"
            },
            {
              "id": "41e5ff5b-6816-4282-9e3c-ad9d8a168162",
              "name": "category",
              "value": "={{ $('Video #3').item.json.category }}",
              "type": "string"
            },
            {
              "id": "c7d901d4-7479-48b7-87f4-2b2c15d463ef",
              "name": "description",
              "value": "={{ $('Video #3').item.json.description }}",
              "type": "string"
            },
            {
              "id": "22500735-332c-4b2d-994a-9cf5cb8f2c09",
              "name": "cSummary - raw",
              "value": "={{ $('cSummary').item.json.message.content }}",
              "type": "string"
            },
            {
              "id": "1acd37c0-e6de-44d8-8a59-6c784f94dc2d",
              "name": "cSummary - refined",
              "value": "={{ $('Editor').item.json.message.content }}",
              "type": "string"
            },
            {
              "id": "542c07d2-2c39-4c73-ac6d-e7bddd68b516",
              "name": "summary.positive",
              "value": "={{ $json.summary.positive }}",
              "type": "object"
            },
            {
              "id": "f79122c8-7a71-4b98-8b8d-0f8ddff3f0d7",
              "name": "summary.neutral",
              "value": "={{ $json.summary.neutral }}",
              "type": "object"
            },
            {
              "id": "71042534-79be-421c-8b25-81d3e3d68745",
              "name": "summary.negative",
              "value": "={{ $json.summary.negative }}",
              "type": "object"
            },
            {
              "id": "a7069bcd-90e3-45d5-88b2-e012075ea0dc",
              "name": "reportDate",
              "value": "={{ \"$now.format('yyyy-MM-dd')\" }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4800,
        2500
      ],
      "id": "7610fa39-e707-4745-9865-23118c93f9de",
      "name": "Set Fields"
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $('Create GDoc Report').item.json.documentId }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $('htmlContent').item.json.htmlContent }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        6420,
        2940
      ],
      "id": "fac92561-51af-4478-a3ee-ebf4875fd769",
      "name": "Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    },
    {
      "parameters": {
        "formTitle": "Proposal Details",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Client.FirstName",
              "requiredField": true
            },
            {
              "fieldLabel": "Client.LastName",
              "requiredField": true
            },
            {
              "fieldLabel": "CompanyName",
              "requiredField": true
            },
            {
              "fieldLabel": "Meetings",
              "requiredField": true
            },
            {
              "fieldLabel": "SetupFee",
              "requiredField": true
            },
            {
              "fieldLabel": "LeadFee",
              "requiredField": true
            },
            {
              "fieldLabel": "ClientEmail",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        6440,
        3160
      ],
      "id": "e7a303ca-249c-4d7c-8da1-c1cc8f460be9",
      "name": "Client Details",
      "webhookId": "24582563-0d0e-456e-a3ea-74cb7f364221",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a076bf92-ee5f-4467-8ce6-be20ae5a7d21",
              "name": "TotalLeadFee",
              "value": "={{$json.LeadFee * $json.Meetings}}",
              "type": "number"
            },
            {
              "id": "278d0a44-30c1-49d9-9a50-3c7edd6857aa",
              "name": "SubTotal",
              "value": "={{ (Number($json.LeadFee) * Number($json.Meetings)) + Number($json.SetupFee) }}",
              "type": "number"
            },
            {
              "id": "f3b3db10-4e73-4b31-83f1-495958de2ee5",
              "name": "Client.FirstName",
              "value": "={{ $json['Client.FirstName'] }}",
              "type": "string"
            },
            {
              "id": "7d0a3a72-4e56-4eda-92bd-5997bf9ec443",
              "name": "Client.LastName",
              "value": "={{ $json['Client.LastName'] }}",
              "type": "string"
            },
            {
              "id": "3139c8d4-67b0-42bb-9019-b6ed2be45ec6",
              "name": "CompanyName",
              "value": "={{ $json.CompanyName }}",
              "type": "string"
            },
            {
              "id": "f4cfd5d4-c315-4dd7-a4d2-42da90a08030",
              "name": "Meetings",
              "value": "={{ $json.Meetings }}",
              "type": "string"
            },
            {
              "id": "fce63286-2afb-438d-b29b-5bded1a8b997",
              "name": "SetupFee",
              "value": "={{ $json.SetupFee }}",
              "type": "string"
            },
            {
              "id": "3663adbb-1ecd-4787-9475-c4176e7bba29",
              "name": "LeadFee",
              "value": "={{ $json.LeadFee }}",
              "type": "string"
            },
            {
              "id": "523b7d58-e8b4-440b-9b79-f5aa4d724b4e",
              "name": "ClientEmail",
              "value": "={{ $json.ClientEmail }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6640,
        3160
      ],
      "id": "510abfa4-1285-4e4d-8fa5-40cbeb51f4a3",
      "name": "Set Value"
    },
    {
      "parameters": {
        "operation": "copy",
        "fileId": {
          "__rl": true,
          "value": "1ZLWmujYBSu-zMB4MHR9Iju6PnmvH0I1Q-RKIMUFrHn0",
          "mode": "id"
        },
        "name": "=Proposal: myBoringProcess - {{ $json.Client.FirstName }} {{ $json.Client.LastName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        6840,
        3160
      ],
      "id": "8d73dd86-feb3-4937-bbd4-96dfd977a80c",
      "name": "Make a copy of template",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "replaceAll",
              "text": "{{Client.FirstName}}",
              "replaceText": "={{ $('Set Value').item.json.Client.FirstName }}"
            },
            {
              "action": "replaceAll",
              "text": "{{Client.LastName}} ",
              "replaceText": "={{ $('Set Value').item.json.Client.LastName }}"
            },
            {
              "action": "replaceAll",
              "text": " {{CompanyName}}",
              "replaceText": "={{ $('Set Value').item.json.CompanyName }}"
            },
            {
              "action": "replaceAll",
              "text": "{{SetupFee}}",
              "replaceText": "={{ $('Set Value').item.json.SetupFee.toString() }}\n"
            },
            {
              "action": "replaceAll",
              "text": "{{LeadFee}}",
              "replaceText": "={{ $('Set Value').item.json.LeadFee.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": " {{TotalLeadFee}}",
              "replaceText": "={{ $('Set Value').item.json.TotalLeadFee.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{SubTotal}}",
              "replaceText": "={{ $('Set Value').item.json.SubTotal.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{meetings}}",
              "replaceText": "={{ $('Set Value').item.json.Meetings.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{TotalLeadFee}}",
              "replaceText": "={{ $('Set Value').item.json.TotalLeadFee.toString() }}\n"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        7040,
        3160
      ],
      "id": "2bc9a1f6-04fc-4574-931e-904904e8b6ee",
      "name": "Edit the Template"
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.documentId }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        7240,
        3160
      ],
      "id": "415a31c0-3579-4d40-960f-ef22ea9a723e",
      "name": "Share"
    },
    {
      "parameters": {
        "sendTo": "arun.worc@gmail.com",
        "subject": "=Proposal for {{ $('Client Details').item.json['Client.FirstName'] }} {{ $('Client Details').item.json['Client.LastName'] }}",
        "emailType": "text",
        "message": "=https://docs.google.com/document/d/{{ $('Edit the Template').item.json.documentId }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        7440,
        3160
      ],
      "id": "dcf82359-aba2-47ce-b10f-f5e05ad9614a",
      "name": "Send",
      "webhookId": "2a52c1df-0c61-4937-a5bf-0cf528f4fcff"
    },
    {
      "parameters": {
        "operation": "copy",
        "fileId": {
          "__rl": true,
          "value": "1nzSNHzpkJb0GDUSjANnSd_vg-C2hwj3zc-Nbc6x6k58",
          "mode": "id"
        },
        "name": "=Youtube.{{ $json.id }}",
        "sameFolder": false,
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "17dincwYmqZk4qVU-GQIy-lcmgZIBXzSs",
          "mode": "list",
          "cachedResultName": "zCONTENT TEST",
          "cachedResultUrl": "https://drive.google.com/drive/folders/17dincwYmqZk4qVU-GQIy-lcmgZIBXzSs"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        4980,
        2500
      ],
      "id": "6ada38c8-9a56-4d41-8c22-387fd7a43106",
      "name": "Copy Template",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.documentId }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        5340,
        2500
      ],
      "id": "d9403ff0-9a18-48c1-b93b-067bfa9cdcc1",
      "name": "Share Link",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "HR5Tk4YDcaNJda9N",
          "name": "Google Drive Sergio"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "={{ $json.id }}",
        "actionsUi": {
          "actionFields": [
            {
              "action": "replaceAll",
              "text": "{{videoID}}",
              "replaceText": "={{ $('Set Fields').item.json.id }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoTitle}}",
              "replaceText": "={{ $('Set Fields').item.json.title }}"
            },
            {
              "action": "replaceAll",
              "text": "{{reportDate}}",
              "replaceText": "={{ $('Set Fields').item.json.reportDate }}"
            },
            {
              "action": "replaceAll",
              "text": "{{viewCount}}",
              "replaceText": "={{ $('Set Fields').item.json.viewCount.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{likeCount}}",
              "replaceText": "={{ $('Set Fields').item.json.likeCount.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{commentCount}}",
              "replaceText": "={{ $('Set Fields').item.json.commentCount.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoUrl}}",
              "replaceText": "={{ $('Set Fields').item.json.url }}"
            },
            {
              "action": "replaceAll",
              "text": "{{publishDate}}",
              "replaceText": "={{ $('Set Fields').item.json.publishedDate }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoDuration}}",
              "replaceText": "={{ $('Set Fields').item.json.lengthInSeconds.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{channelName}}",
              "replaceText": "={{ $('Set Fields').item.json.channelDisplayName }}"
            },
            {
              "action": "replaceAll",
              "text": "{{channelCategory}}",
              "replaceText": "={{ $('Set Fields').item.json.category }}"
            },
            {
              "action": "replaceAll",
              "text": "{{subscriberCount}}",
              "replaceText": "={{ $('Set Fields').item.json.channelSubscribers.toString() }}"
            },
            {
              "action": "replaceAll",
              "text": "{{videoDescription}}",
              "replaceText": "={{ $('Set Fields').item.json.description }}"
            },
            {
              "action": "replaceAll",
              "text": "{{#each videoTags}}#{{this}} {{/each}}",
              "replaceText": "={{ $('Set Fields').item.json.tags.toJsonString()}}"
            },
            {
              "action": "replaceAll",
              "text": "{{contentSummary}}",
              "replaceText": "={{ $('Set Fields').item.json['cSummary - refined'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        5160,
        2500
      ],
      "id": "e834e35a-27c3-4ddb-9e33-c1ce8eb6d308",
      "name": "VarToValues",
      "alwaysOutputData": true,
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Nhb6bAORRuLk5B72",
          "name": "Google Docs ✔️️"
        }
      }
    }
  ],
  "pinData": {
    "When clicking ‘Test workflow’": [
      {
        "json": {}
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-05-14T19:03:07.000Z",
  "versionId": "dceef259-9ffe-44e5-86f8-cbc9d74855ee"
}