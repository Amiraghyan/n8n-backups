{
  "active": false,
  "connections": {
    "Set 'Text'": {
      "main": [
        [
          {
            "node": "Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set 'Text'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Clean Up",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Draft": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Reply": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Label Emails": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mark Unread": {
      "ai_tool": [
        [
          {
            "node": "Email Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Email Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event with Attendee": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Events": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "Calendar Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calendar Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Contact Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Web Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Clean Up": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Slack Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Ideas": {
      "ai_tool": [
        [
          {
            "node": "YouTube Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Idea": {
      "ai_tool": [
        [
          {
            "node": "YouTube Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Videos": {
      "ai_tool": [
        [
          {
            "node": "YouTube Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Input": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "Web Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get contact": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tasks Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Email Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Calendar Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Contact Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Tasks Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "YouTube Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Web Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a GTask": {
      "ai_tool": [
        [
          {
            "node": "Tasks Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create GTask": {
      "ai_tool": [
        [
          {
            "node": "Tasks Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update  GTask": {
      "ai_tool": [
        [
          {
            "node": "Tasks Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get many GTasks": {
      "ai_tool": [
        [
          {
            "node": "Tasks Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many Contacts": {
      "ai_tool": [
        [
          {
            "node": "Contact Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-29T20:14:18.057Z",
  "id": "lxOhe3RS2TVI4mXF",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Google NHerk Slack MCP",
  "nodes": [
    {
      "parameters": {
        "content": "# ‚öôÔ∏è Setup Guide  \n**Author:** [Nate Herk](https://www.youtube.com/@nateherk)\n\nFollow these steps to get your n8n AI agent workflow fully configured and connected:\n\n### ‚úÖ Step 1: Connect Your Telegram Account  \nUse the **Telegram Trigger** node to link your Telegram account. This allows you to interact with your agent via Telegram. Make sure it's fully connected‚Äîit‚Äôs used in both the **Telegram Response** nodes and the **Simple Memory** node.\n\n### ‚úÖ Step 2: Add Your [OpenRouter](https://openrouter.ai/) API Key  \nThis is the \"brain\" of your AI agent. Plug in your API key using the **HTTP Request** or **Credential** node to power intelligent responses.\n\n### ‚úÖ Step 3: Connect Your App Integrations  \nSet up the following API connections so your agent can take meaningful actions:\n- **Gmail**\n- **Google Calendar**\n- **Airtable**\n- **Google Sheets**\n- **Apify** ‚Äì Used in the YouTube video node.  \n  üí° *Use code* **`30NATEHERK`** *for 30% off your first 3 months at [Apify](https://www.apify.com/?fpr=nate)*\n\n### ‚úÖ Step 4: Connect Research & Utility APIs  \nAdd these keys for more powerful features:\n- [**Tavily API Key**](https://www.tavily.com/)\n- [**Perplexity API Key**](https://www.perplexity.ai/)\n- [**Open Weather Map API Key**](https://openweathermap.org/api)\n\n### ‚úÖ Step 5: Link Your Google Sheets Templates  \n- üìÑ [Agent Action Log Sheet](https://docs.google.com/spreadsheets/d/1PlRVi9Iv2n11SPYdshjhPGWccRCpKLHn3PjUkJEjgAQ/edit?usp=sharing) ‚Äì Logs the agent‚Äôs actions.\n- üé¨ [YouTube Ideas Sheet](https://docs.google.com/spreadsheets/d/1Jazczp5HtPwcJvu6bmJQrjkqt31S7adVqIFVCqXZwGk/edit?usp=sharing) ‚Äì Used for the YouTube agent‚Äôs video ideas.\n\n### üöÄ Final Step: Start Prompting  \nWith everything connected, start chatting with your agent on Telegram and watch it take intelligent action across your tool stack!\n",
        "height": 912,
        "width": 784
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        32,
        304
      ],
      "id": "5657e645-b538-4097-9266-065e7be27c04",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fe7ecc99-e1e8-4a5e-bdd6-6fce9757b234",
              "name": "text",
              "value": "={{ $json.blocks[0].elements[0].elements[1].text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "542cc7ca-9800-45c1-9a16-9789e7616c6b",
      "name": "Set 'Text'",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        464
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "0e7e74a6-d2ae-4922-9e1f-b5232e34edc3",
      "name": "Transcribe Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        1856,
        304
      ],
      "credentials": {
        "openAiApi": {
          "id": "WYRQt22D3Ej2FW2r",
          "name": "OpenAi Blue&"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].url_private_download }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "57a77a52-4be8-4a26-b430-71a394060d18"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "leftValue": "={{ $json.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "be7097cf-6bc7-4bd9-9cc6-62d8800b5dc8",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1056,
        448
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input }}",
        "options": {
          "systemMessage": "=# Overview\nYou are the ultimate personal assistant. Your job is to send the user's query to the correct tool. You should never be writing emails or creating summaries ‚Äî your sole responsibility is to call the correct tool.\n\n## Tools\n- **Think**: Use this to think deeply or if you get stuck\n- **emailAgent**: Use this tool to take action in email\n- **calendarAgent**: Use this tool to take action in calendar\n- **contactAgent**: Use this tool to get, update, or add contacts\n- **contentCreator**: Use this tool to create blog posts\n- **webAgent**: Use this tool to perform deeper web research or get current weather info\n- **youtubeAgent**: Use this tool to find high-performing videos or manage video ideas\n\n## Rules\n- Some actions require you to look up contact information first. For the following actions, you must get contact information and send that to the agent who needs it:\n  - sending emails\n  - drafting emails\n  - creating calendar event with attendee\n\n## Instructions\n1) Call the necessary tools based on the user's request\n2) Use the **Think** tool to verify you took the right steps. This tool should be called every time.\n\n## Examples\n1) \n- Input: send an email to nate herkelman asking him what time he wants to leave  \n  - Action: Use **contactAgent** to get Nate Herkelman's email  \n  - Action: Use **emailAgent** to send the email. You will pass the tool a query like:  \n    \"send Nate Herkelman an email to ask what time he wants to leave. here is his email: [email address]\" and you will provide an Output like: \" The email has been sent to Nate Herkelman.\"\n\n## Final Reminders\nHere is the current date/time: {{ $now }}\nKeep your responses concise and do not preface them with \"Output:\"\n",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2144,
        464
      ],
      "id": "d545f413-4746-44d2-a868-7b1992b7685a",
      "name": "AI Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI(\"emailAddress\") }}",
        "subject": "={{ $fromAI(\"subject\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1536,
        1056
      ],
      "id": "52e8c111-1c21-40c2-bb9d-43e637eb9393",
      "name": "Send Email",
      "webhookId": "86c8c4b1-13bb-4ebe-acb9-30e1d7082d55",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": "={{ $fromAI(\"limit\",\"how many emails the user wants\") }}",
        "simple": false,
        "filters": {
          "sender": "={{ $fromAI(\"sender\",\"who the emails are from\") }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1136,
        1056
      ],
      "id": "695fce7b-d87c-4cbe-ac5e-4ad14c5f73a5",
      "name": "Get Emails",
      "webhookId": "af4b3298-9037-44b0-aa12-2acbfbb5e66f",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $fromAI(\"subject\") }}",
        "emailType": "html",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "threadId": "={{ $fromAI(\"threadID\") }}",
          "sendTo": "={{ $fromAI(\"emailAddress\") }}"
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1536,
        912
      ],
      "id": "ece9feae-5755-4758-abe3-73aefb4654ea",
      "name": "Create Draft",
      "webhookId": "17016bce-d7d7-428a-a56c-f6ea122db8be",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": "={{ $fromAI(\"ID\",\"the message ID\") }}",
        "message": "={{ $fromAI(\"emailBody\") }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1264,
        912
      ],
      "id": "59af931b-f471-47bd-912e-204a89447115",
      "name": "Email Reply",
      "webhookId": "114785e6-a859-432b-81b4-c490c1c35b1c",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "resource": "label",
        "returnAll": true
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1264,
        1056
      ],
      "id": "239184c8-fd09-4145-904b-7361f0e2e948",
      "name": "Get Labels",
      "webhookId": "9e08b59e-792d-4566-83f1-9263c9ad86ae",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "addLabels",
        "messageId": "={{ $fromAI(\"ID\",\"the ID of the message\") }}",
        "labelIds": "={{ $fromAI(\"labelID\") }}"
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1408,
        912
      ],
      "id": "b102c57f-7533-4707-bf1e-c4b97502024e",
      "name": "Label Emails",
      "webhookId": "0e951529-2e6d-40bf-ac40-fc0947e242e2",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "markAsUnread",
        "messageId": "={{ $fromAI(\"messageID\") }}"
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        1408,
        1056
      ],
      "id": "5a542a67-1317-4862-8dc0-37ecd588526d",
      "name": "Mark Unread",
      "webhookId": "a35af9d8-f67d-4ff9-803f-59ec6356e795",
      "credentials": {
        "gmailOAuth2": {
          "id": "KQ2bL39dJJ1P9hoA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "An email agent for all email actions",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are an email management assistant. All emails must be formatted professionally in HTML and signed off as \"Nate.\" \n\n**Email Management Tools**   \n   - Use \"Send Email\" to send emails.  \n   - Use \"Create Draft\" if the user asks for a draft.  \n   - Use \"Get Emails\" to retrieve emails when requested.\n   - Use \"Get Labels\" to retrieve labels.\n   - Use \"Mark Unread\" to mark an email as unread. You must use \"Get Emails\" first so you have the message ID of the email to flag.\n   - Use \"Label Email\" to flag an email. You must use \"Get Emails\" first so you have the message ID of the email to flag. Then you must use \"Get Labels\" so you have the label ID.\n   - Use \"Email Reply\" to reply to an email. You must use \"Get Emails\" first so you have the message ID of the email to reply to.\n\n## Final Notes\n- Here is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1328,
        736
      ],
      "id": "ea3f2ffc-bc9b-4a2b-81a4-80a32b15703f",
      "name": "Email Agent"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "nateherk88@gmail.com",
          "mode": "list",
          "cachedResultName": "nateherk88@gmail.com"
        },
        "start": "={{ $fromAI(\"eventStart\") }}",
        "end": "={{ $fromAI(\"eventEnd\") }}",
        "additionalFields": {
          "attendees": [
            "={{ $fromAI(\"eventAttendeeEmail\") }}"
          ],
          "summary": "={{ $fromAI(\"eventTitle\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2320,
        1024
      ],
      "id": "6b0a7833-dbce-4d7c-9031-911694ab9ab1",
      "name": "Create Event with Attendee",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "PBTNuRkCpAQk1X2D",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "nateherk88@gmail.com",
          "mode": "list",
          "cachedResultName": "nateherk88@gmail.com"
        },
        "start": "={{ $fromAI(\"eventStart\") }}",
        "end": "={{ $fromAI(\"eventEnd\") }}",
        "additionalFields": {
          "attendees": [],
          "summary": "={{ $fromAI(\"eventTitle\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2080,
        1024
      ],
      "id": "7667ad77-9c0b-449f-b461-7f73840069e6",
      "name": "Create Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "PBTNuRkCpAQk1X2D",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "fausto@autoacquireai.com",
          "mode": "list",
          "cachedResultName": "Fausto@AAA"
        },
        "timeMin": "={{ $fromAI(\"dayBefore\",\"the day before the date the user requested\") }}",
        "timeMax": "={{ $fromAI(\"dayAfter\",\"the day after the date the user requested\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2304,
        880
      ],
      "id": "55f5e0d4-bee3-40c6-8e4b-0763a650f4b2",
      "name": "Get Events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "PBTNuRkCpAQk1X2D",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "nateherk88@gmail.com",
          "mode": "list",
          "cachedResultName": "nateherk88@gmail.com"
        },
        "eventId": "={{ $fromAI(\"eventID\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2176,
        880
      ],
      "id": "cb8274e3-d724-480e-9f4d-03af1a7929a0",
      "name": "Delete Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "PBTNuRkCpAQk1X2D",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "nateherk88@gmail.com",
          "mode": "list",
          "cachedResultName": "nateherk88@gmail.com"
        },
        "eventId": "={{ $fromAI(\"eventID\") }}",
        "updateFields": {
          "end": "={{ $fromAI(\"endTime\") }}",
          "start": "={{ $fromAI(\"startTime\") }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        2208,
        1024
      ],
      "id": "db77eb24-b806-4d24-95e8-e4ee027d7109",
      "name": "Update Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "PBTNuRkCpAQk1X2D",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "A calendar agent for all calendar actions",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a calendar assistant. Your responsibilities include creating, getting, and deleting events in the user's calendar.\n\n**Calendar Management Tools**  \n   - Use \"Create Event with Attendee\" when an event includes a participant.  \n   - Use \"Create Event\" for solo events.   \n   - Use \"Get Events\" to fetch calendar schedules when requested.\n   - Use \"Delete Event\" to delete an event. You must use \"Get Events\" first to get the ID of the event to delete.\n   - Use \"Update Event\" to update an event. You must use \"Get Events\" first to get the ID of the event to update.\n\n## Final Notes\nHere is the current date/time: {{ $now }}\nIf a duration for an event isn't specified, assume it will be one hour."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2144,
        704
      ],
      "id": "012a3a45-65d1-4465-ba1c-6213f39916d0",
      "name": "Calendar Agent"
    },
    {
      "parameters": {
        "toolDescription": "Contact agent for all contact actions, like getting contacts",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a contact management assistant. Your responsibilities include looking up contacts, adding new contacts, or updating a contact's information.\n\n**Contact Management**  \n   - Use \"Get Contacts\" to retrieve contact information. \n   - Use \"Add or Update Contact\" to store new contact information or modify existing entries. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2496,
        704
      ],
      "id": "e06f0094-4f3d-4b58-bb40-bc574ee1cddb",
      "name": "Contact Agent"
    },
    {
      "parameters": {
        "toolDescription": "A research agent for all research actions",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a web research assistant. Your responsibilities include conducting quick web searches, performing deeper research, and retrieving current weather information. \n\n**Web Search & Research**  \n   - Use **Tavily** for quick factual lookups, recent news, or verifying specific pieces of information.  \n   - Use **Perplexity** when a question requires deeper research, multiple perspectives, or synthesized answers from various sources.  \n\n**Weather Information**  \n   - Use **Open Weather Map** to retrieve current weather data, including temperature, conditions, and forecasts for a given location.\n\nAlways explain your reasoning briefly when choosing between Tavily and Perplexity. Prioritize clarity, credibility, and helpfulness in your responses.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2832,
        1264
      ],
      "id": "1abd31cd-71c9-4fae-af60-196578a00248",
      "name": "Web Agent"
    },
    {
      "parameters": {
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a YouTube content assistant. Your responsibilities include researching high-performing YouTube videos, retrieving existing video ideas, and adding new content ideas to the video database. Your goal is to support content strategy and ideation with relevant, high-quality inputs.\n\n**Video Idea Management**  \n   - Use **Get Ideas** to retrieve existing YouTube video ideas from the internal database.  \n   - Use **Add Idea** to contribute new video ideas to the database for future content planning.\n\n**Content Research**  \n   - Use **YouTube Videos** to search for high-performing videos on a given topic. Analyze trends, titles, formats, and engagement to inspire new content strategies.\n\nWhen suggesting or adding an idea, be specific, creative, and align your suggestions with proven YouTube best practices.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2112,
        1248
      ],
      "id": "869ac40f-e533-4743-b469-9d501203f1fc",
      "name": "YouTube Agent"
    },
    {
      "parameters": {
        "jsCode": "// Initialize the output arrays\nconst steps = [];\nconst tokens = [];\nlet totalTokens = 0; // Changed to track total tokens instead of cost\n\n// Process each item in the input\nfor (const item of $input.all()) {\n  let data = item.json;\n  \n  // Check if the data is an array itself (like your example JSON)\n  if (Array.isArray(data)) {\n    // Process each object in the array\n    for (const obj of data) {\n      // Extract steps information\n      if (obj.intermediateSteps && Array.isArray(obj.intermediateSteps)) {\n        for (const step of obj.intermediateSteps) {\n          if (step.action) {\n            steps.push({\n              tool: step.action.tool,\n              toolInput: step.action.toolInput,\n              observation: step.observation\n            });\n          }\n        }\n      }\n      \n      // Extract token information\n      if (obj.intermediateSteps && Array.isArray(obj.intermediateSteps)) {\n        for (const step of obj.intermediateSteps) {\n          if (step.action && step.action.messageLog && Array.isArray(step.action.messageLog)) {\n            for (const message of step.action.messageLog) {\n              if (message.kwargs && message.kwargs.response_metadata && message.kwargs.response_metadata.usage) {\n                const usage = message.kwargs.response_metadata.usage;\n                tokens.push({\n                  prompt_tokens: usage.prompt_tokens,\n                  completion_tokens: usage.completion_tokens,\n                  total_tokens: usage.total_tokens,\n                  model_name: message.kwargs.response_metadata.model_name\n                });\n                \n                // Add the tokens to our running total\n                if (typeof usage.total_tokens === 'number') {\n                  totalTokens += usage.total_tokens;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } else {\n    // If data is not an array, process it as a single object\n    // Extract steps information\n    if (data.intermediateSteps && Array.isArray(data.intermediateSteps)) {\n      for (const step of data.intermediateSteps) {\n        if (step.action) {\n          steps.push({\n            tool: step.action.tool,\n            toolInput: step.action.toolInput,\n            observation: step.observation\n          });\n        }\n      }\n    }\n    \n    // Extract token information\n    if (data.intermediateSteps && Array.isArray(data.intermediateSteps)) {\n      for (const step of data.intermediateSteps) {\n        if (step.action && step.action.messageLog && Array.isArray(step.action.messageLog)) {\n          for (const message of step.action.messageLog) {\n            if (message.kwargs && message.kwargs.response_metadata && message.kwargs.response_metadata.usage) {\n              const usage = message.kwargs.response_metadata.usage;\n              tokens.push({\n                prompt_tokens: usage.prompt_tokens,\n                completion_tokens: usage.completion_tokens,\n                total_tokens: usage.total_tokens,\n                model_name: message.kwargs.response_metadata.model_name\n              });\n              \n              // Add the tokens to our running total\n              if (typeof usage.total_tokens === 'number') {\n                totalTokens += usage.total_tokens;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Return the processed data with total_tokens included\nreturn [{\n  json: {\n    steps: steps,\n    tokens: tokens,\n    total_tokens: totalTokens\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2512,
        304
      ],
      "id": "87492904-c875-48bf-b15d-a46f27aab744",
      "name": "Clean Up"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1cyDZ4-68fhA1q-9YGZLLynrxFOQV1CnGCkQ_BXhJkbk",
          "mode": "list",
          "cachedResultName": "Assistant Logs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1cyDZ4-68fhA1q-9YGZLLynrxFOQV1CnGCkQ_BXhJkbk/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Logs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1cyDZ4-68fhA1q-9YGZLLynrxFOQV1CnGCkQ_BXhJkbk/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Total Tokens": "={{ $json.tokens[0].total_tokens }}",
            "Tokens": "={{ $json.tokens[0].prompt_tokens }} | {{ $json.tokens[0].completion_tokens }}",
            "Actions": "={{ $json.steps[0].observation }}",
            "Output": "={{ $json.steps[0].observation }}",
            "Input": "={{ $json.steps[0].toolInput.Prompt__User_Message_ }}",
            "Workflow": "={{ $json.steps[0].tool }}",
            "Timestamp": "={{ DateTime.now().toFormat('yyyy-MM-dd HH:mm:ss') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Workflow",
              "displayName": "Workflow",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Input",
              "displayName": "Input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Output",
              "displayName": "Output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Actions",
              "displayName": "Actions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Tokens",
              "displayName": "Tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Total Tokens",
              "displayName": "Total Tokens",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2656,
        304
      ],
      "id": "f9839d39-a647-4939-99c5-5bb58287cd8c",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "DpjFyRT28IqtmwWz",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "15CpqbdciFb023LElHxiDQ-CSfbXg-Gk6g5A7Dl_b8Ls",
          "mode": "list",
          "cachedResultName": "Video Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/15CpqbdciFb023LElHxiDQ-CSfbXg-Gk6g5A7Dl_b8Ls/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/15CpqbdciFb023LElHxiDQ-CSfbXg-Gk6g5A7Dl_b8Ls/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        2336,
        1408
      ],
      "id": "6ce2facf-8018-4210-b990-ce935202dc11",
      "name": "Get Ideas",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "f0EK8GS1JVMgDnr2",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "15CpqbdciFb023LElHxiDQ-CSfbXg-Gk6g5A7Dl_b8Ls",
          "mode": "list",
          "cachedResultName": "Video Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/15CpqbdciFb023LElHxiDQ-CSfbXg-Gk6g5A7Dl_b8Ls/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/15CpqbdciFb023LElHxiDQ-CSfbXg-Gk6g5A7Dl_b8Ls/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Idea": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Idea', `Idea title`, 'string') }}",
            "Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', `Idea description`, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Idea",
              "displayName": "Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        2448,
        1408
      ],
      "id": "919c6e35-a9d8-42ee-8972-c15bf8aacc5e",
      "name": "Add Idea",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "f0EK8GS1JVMgDnr2",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to find high-performing YouTube videos",
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-scraper/run-sync-get-dataset-items",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "token",
              "value": "YOUR APIFY API KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"dateFilter\": \"month\",\n    \"downloadSubtitles\": false,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": false,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"maxResultStreams\": 0,\n    \"maxResults\": {{$fromAI(\"maxResults\",\"how many videos the user wants, if not specified, default to 3\",\"number\",3)}},\n    \"maxResultsShorts\": 0,\n    \"oldestPostDate\": \"6 months\",\n    \"preferAutoGeneratedSubtitles\": false,\n    \"saveSubsToKVS\": false,\n    \"searchQueries\": [\n        \"{{$fromAI(\"searchTerm\",\"The topic of the video to search for\")}}\"\n    ],\n    \"sortVideosBy\": \"POPULAR\",\n    \"sortingOrder\": \"views\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2224,
        1408
      ],
      "id": "2d7241e7-5ed1-4203-995e-344d60a4e523",
      "name": "YouTube Videos"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        2016,
        704
      ],
      "id": "f8ce7824-958a-45f1-9c75-7ec0d4f36b4e",
      "name": "Think"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=client_msg_id"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1904,
        704
      ],
      "id": "115db712-5a74-4d04-b147-ec015393ed95",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "976cf2c9-01b6-46cf-97b4-675a67ca57bc",
              "name": "input",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1984,
        464
      ],
      "id": "be81c1a5-e5bf-4f7e-b23c-e4cb1c4bab1b",
      "name": "Input"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        2992,
        1424
      ],
      "id": "c04b2e83-ab4f-4b9c-9b59-ccd906b70eec",
      "name": "SerpAPI",
      "credentials": {
        "serpApi": {
          "id": "yy1PRJ4R1p8UYTyT",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "familyName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Family_Name', ``, 'string') }}",
        "givenName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Given_Name', ``, 'string') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        2608,
        864
      ],
      "id": "c9b6c80d-7f8d-4367-9e6d-61feba0426cb",
      "name": "Create contact",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "2K8GfWhHbEEUCZgn",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "contactId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Contact_ID', ``, 'string') }}",
        "fields": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fields', ``, 'string') }}",
        "updateFields": {}
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        2736,
        864
      ],
      "id": "38dc6ba1-b437-455c-b48e-f6c12561f7ca",
      "name": "Update contact",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "2K8GfWhHbEEUCZgn",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "contactId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Contact_ID', ``, 'string') }}",
        "fields": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fields', ``, 'string') }}"
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        2544,
        1008
      ],
      "id": "4901b464-9cb6-4fd9-9b4f-954be2c41dd4",
      "name": "Get contact",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "2K8GfWhHbEEUCZgn",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "contactId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Contact_ID', ``, 'string') }}",
        "fields": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fields', ``, 'string') }}"
      },
      "type": "n8n-nodes-base.googleContactsTool",
      "typeVersion": 1,
      "position": [
        2672,
        1008
      ],
      "id": "4bb7e3df-e1ab-455c-b71e-d68b5cde6be3",
      "name": "Get many Contacts",
      "credentials": {
        "googleContactsOAuth2Api": {
          "id": "2K8GfWhHbEEUCZgn",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Tasks agent for all task actions, like getting tasks",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a tasks management assistant. Your responsibilities include looking up tasks, adding new tasks, or updating a task's information.\n\nYou have a Custom API tool that allows you to make API calls to do more things. Always try this first, but if this is not working you can always try the other tools if applicable.\n\n\n**Contact Management**  \n   - Use \"Get Contacts\" to retrieve contact information. \n   - Use \"Add or Update Contact\" to store new contact information or modify existing entries. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2880,
        704
      ],
      "id": "b240c326-1f18-46d0-bf73-cbf07b6e2763",
      "name": "Tasks Agent"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C098UC3MSKX",
          "mode": "list",
          "cachedResultName": "alfred"
        },
        "text": "={{ $('AI Agent').item.json.output }}",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "mrkdwn": true
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2832,
        304
      ],
      "id": "e26370c5-d0f4-43c4-8f99-6e871a524ef7",
      "name": "Slack Response",
      "webhookId": "46933380-384e-42ea-ab4c-691a1aa5ff33",
      "credentials": {
        "slackApi": {
          "id": "IGKQrsQI0If27Bgl",
          "name": "Blue&_Alfred_BotOauthToken"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C098UC3MSKX",
          "mode": "list",
          "cachedResultName": "alfred"
        },
        "text": "={{\"ERROR: \"}}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2544,
        480
      ],
      "id": "14445447-155b-4e07-a623-45216ec94a74",
      "name": "Error Message1",
      "webhookId": "46933380-384e-42ea-ab4c-691a1aa5ff33",
      "credentials": {
        "slackApi": {
          "id": "IGKQrsQI0If27Bgl",
          "name": "Blue&_Alfred_BotOauthToken"
        }
      }
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "watchWorkspace": true,
        "options": {}
      },
      "type": "n8n-nodes-base.slackTrigger",
      "typeVersion": 1,
      "position": [
        880,
        448
      ],
      "id": "c64fd845-0a2c-49ab-9306-deef988e090d",
      "name": "Slack Trigger",
      "webhookId": "66fc8598-e7de-45a0-bbd4-0bacdbef3948",
      "credentials": {
        "slackApi": {
          "id": "5ywx3yD5yjWHPf7U",
          "name": "Slack Alfred BotTok"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1808,
        1136
      ],
      "id": "c419d43d-ec34-4a46-a8c9-07dbad9ae527",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "WYRQt22D3Ej2FW2r",
          "name": "OpenAi Blue&"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "fileId": "={{ $json.files[0].id }}"
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1200,
        304
      ],
      "id": "a6da26ce-40a7-44c1-8762-0aca605a070a",
      "name": "Get a file",
      "webhookId": "e14947c2-617d-4adb-b22b-4941a225c02b",
      "credentials": {
        "slackApi": {
          "id": "IGKQrsQI0If27Bgl",
          "name": "Blue&_Alfred_BotOauthToken"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.aac }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1408,
        304
      ],
      "id": "f77f6c0d-02b7-462d-ab18-52cc897e845f",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "task": "MDE3OTUxNTE2MTE1ODAzNjg1MDY6MDow",
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        3024,
        1024
      ],
      "id": "ac1a32d4-aec6-47ea-a3e4-18839080fea7",
      "name": "Get a GTask",
      "credentials": {
        "googleTasksOAuth2Api": {
          "id": "PbgkdEdMjNThWUXA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "task": "MDE3OTUxNTE2MTE1ODAzNjg1MDY6MDow",
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        3024,
        864
      ],
      "id": "2a415c13-0651-4324-8cd8-81d9581c8371",
      "name": "Create GTask",
      "credentials": {
        "googleTasksOAuth2Api": {
          "id": "PbgkdEdMjNThWUXA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "task": "MDE3OTUxNTE2MTE1ODAzNjg1MDY6MDow",
        "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Task_ID', ``, 'string') }}",
        "updateFields": {}
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        3184,
        864
      ],
      "id": "dd359dd5-5783-4262-8107-1d435cb60a14",
      "name": "Update  GTask",
      "credentials": {
        "googleTasksOAuth2Api": {
          "id": "PbgkdEdMjNThWUXA",
          "name": "fausto@AAA"
        }
      }
    },
    {
      "parameters": {
        "task": "MDE3OTUxNTE2MTE1ODAzNjg1MDY6MDow",
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        3184,
        1024
      ],
      "id": "c8572b2a-1f98-4fb0-b710-9e19bfad4efa",
      "name": "Get many GTasks",
      "credentials": {
        "googleTasksOAuth2Api": {
          "id": "PbgkdEdMjNThWUXA",
          "name": "fausto@AAA"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-09T07:38:04.366Z",
      "updatedAt": "2025-08-09T07:38:04.366Z",
      "id": "80CTK6f6iXrU1iO1",
      "name": "Fausto"
    },
    {
      "createdAt": "2025-08-09T07:38:04.066Z",
      "updatedAt": "2025-08-09T07:38:04.066Z",
      "id": "QPnKSzqBPN6Bxu0I",
      "name": "Productivity"
    },
    {
      "createdAt": "2025-08-09T07:38:04.118Z",
      "updatedAt": "2025-08-09T07:38:04.118Z",
      "id": "c2jMerlRqGAdt8ZD",
      "name": "Google Tasks"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-08-11T03:10:52.000Z",
  "versionId": "a63cfaf5-598d-4fb7-9567-f960cd60fe3c"
}