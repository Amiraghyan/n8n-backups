{
  "active": false,
  "connections": {
    "USDB_Agent_tool": {
      "main": [
        []
      ]
    },
    "OpenRouter Chat": {
      "ai_languageModel": [
        []
      ]
    },
    "Anthropic Chat": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenAI Chat": {
      "ai_languageModel": [
        [
          {
            "node": "USDB_Agent_tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat": {
      "ai_languageModel": [
        []
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "Dwnld_Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dwnld_Audio": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "USDB_Agent_tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Out": {
      "main": [
        [
          {
            "node": "USDB_Agent_tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List all tables in a database": {
      "main": [
        [
          {
            "node": "Extract database schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert data to binary": {
      "main": [
        [
          {
            "node": "Save file locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "Microsoft SQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract SQL query": {
      "main": [
        [
          {
            "node": "Check if query exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if query exists": {
      "main": [
        [
          {
            "node": "Combine query result and chat answer",
            "type": "main",
            "index": 1
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format query results": {
      "main": [
        [
          {
            "node": "Combine query result and chat answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine query result and chat answer": {
      "main": [
        [
          {
            "node": "Prepare final output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Format query results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Time": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response": {
      "main": [
        [
          {
            "node": "Delta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delta": {
      "main": [
        [
          {
            "node": "Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LIST ALL tables": {
      "main": [
        [
          {
            "node": "EXTRACT Schemas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRACT Schemas": {
      "main": [
        [
          {
            "node": "Add table name column",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add table name column": {
      "main": [
        [
          {
            "node": "Convert data to binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USDB AI Agent": {
      "main": [
        [
          {
            "node": "Extract SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dateTimeInfo": {
      "ai_tool": [
        [
          {
            "node": "USDB AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat1": {
      "ai_languageModel": [
        [
          {
            "node": "USDB AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory1": {
      "ai_memory": [
        [
          {
            "node": "USDB AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Prepare final output": {
      "main": [
        []
      ]
    },
    "Query Validation": {
      "main": [
        [
          {
            "node": "Microsoft SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "database_query1": {
      "ai_tool": [
        []
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        []
      ]
    },
    "Format Response2": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "USDB AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        []
      ]
    },
    "Load the schema from the local file": {
      "main": [
        [
          {
            "node": "Extract data from file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract data from file": {
      "main": [
        [
          {
            "node": "Combine schema data and chat input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine schema data and chat input": {
      "main": [
        [
          {
            "node": "USDB AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "LIST ALL tables",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Load the schema from the local file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        []
      ]
    },
    "USDB-SQL-query-Executor": {
      "main": [
        []
      ]
    },
    "Query_Validation": {
      "ai_tool": [
        []
      ]
    },
    "format_response": {
      "ai_tool": [
        []
      ]
    },
    "USDB AI Agent1": {
      "main": [
        [
          {
            "node": "Send reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "execute_query": {
      "ai_tool": [
        []
      ]
    },
    "Query USDB": {
      "main": [
        []
      ]
    },
    "quewry_USDB": {
      "main": [
        [
          {
            "node": "Query Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USDB_Webhook": {
      "ai_tool": [
        [
          {
            "node": "USDB AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat1": {
      "ai_languageModel": [
        [
          {
            "node": "USDB AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Save file locally": {
      "main": [
        [
          {
            "node": "Send reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "USDB AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL": {
      "main": [
        [
          {
            "node": "Format Response2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL1": {
      "main": [
        [
          {
            "node": "Microsoft SQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL2": {
      "main": [
        []
      ]
    },
    "OpenAI2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dwnld_Audio1": {
      "main": [
        [
          {
            "node": "OpenAI2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Out1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call USDB Orchestrator": {
      "main": [
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [],
        [
          {
            "node": "Dwnld_Audio1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-25T15:31:55.991Z",
  "id": "U0WVICGhaz0o0bKs",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "USDB: SQL Agent",
  "nodes": [
    {
      "parameters": {
        "agent": "sqlAgent",
        "dataSource": "mysql",
        "promptType": "define",
        "text": "={{ $('Switch').item.json.chatInput }}",
        "options": {
          "includedTables": ""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        520,
        1240
      ],
      "id": "8a04c6c0-5e19-4f6d-9b72-77dd92635527",
      "name": "USDB_Agent_tool",
      "credentials": {
        "mySql": {
          "id": "oUon8ECO0bjjL9bn",
          "name": "AISandbox"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "openai/o3-mini",
        "options": {
          "maxTokens": -1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1380,
        1360
      ],
      "id": "e51796f6-7b0c-4125-8a9c-3a4ea6267d4d",
      "name": "OpenRouter Chat",
      "credentials": {
        "openRouterApi": {
          "id": "ru25OpA66L1ExedM",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "maxTokensToSample": 8192
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        1380,
        1060
      ],
      "id": "8f649ac8-d90c-4d7d-9ace-44b55fa13575",
      "name": "Anthropic Chat",
      "credentials": {
        "anthropicApi": {
          "id": "dcLqo62duKhDxGrw",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": "o3-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        480,
        1420
      ],
      "id": "28c12df3-7315-4044-8464-1ce3dd682fb4",
      "name": "OpenAI Chat",
      "credentials": {
        "openAiApi": {
          "id": "D09ujHRZlS7g66tq",
          "name": "USDB"
        }
      }
    },
    {
      "parameters": {
        "model": "llama-3.3-70b-versatile",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1380,
        1200
      ],
      "id": "c3d30e45-eb86-47e9-bca7-4a1459088bec",
      "name": "Groq Chat",
      "credentials": {
        "groqApi": {
          "id": "8s1PPRvjrOXCDNtL",
          "name": "n8n_AISandbox"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "61c23cad-6c72-464e-9947-b7f309c9b994",
              "leftValue": "={{ $json.user }}",
              "rightValue": "={{\"U089MNN54NT\"}}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -460,
        1240
      ],
      "id": "dd6c67d8-b244-4fbf-8c22-d9b875bd0b88",
      "name": "Filter"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "584c8c90-4cc3-43ea-aac0-d1762ba79d0d",
                    "leftValue": "{{ $json.files[0].mimetype }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "audio/mp4",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "bb9fc3cb-1c38-4fc3-8ed0-896280711d84"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1ecab1e4-02c7-490e-82e5-f9f701140f00",
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -240,
        1240
      ],
      "id": "c9d64a95-8350-48db-8c5d-8bfa9cb798fa",
      "name": "Switch"
    },
    {
      "parameters": {
        "content": "# SQL AGENT\n\n## Relevant notes \n\nWhen the slack triggers, the I do the following:\n- filter any messages coming from the Slack Bot to avoid creating an infinite loop. The bot user ID I get from the last nodes where n8n responds back to slack\n- check if the message is audio or text.\n- if it is an audio, I need to use the slack credentials based on OAUTH (not API token) to be able to download the audio file.",
        "height": 680,
        "width": 2120,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -940,
        900
      ],
      "id": "81e92f6c-d1d8-4307-9126-357ef8a4a865",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9569b209-0827-4fcd-96e8-1091a15d68e0",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        120,
        1340
      ],
      "id": "1ef659b3-ed5b-47d9-969d-62ca44a06553",
      "name": "Text Out"
    },
    {
      "parameters": {
        "url": "={{ $json.files[0].url_private_download }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "audio"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20,
        1180
      ],
      "id": "238d4e51-2d35-450b-8d86-55b2cb334a43",
      "name": "Dwnld_Audio",
      "credentials": {
        "slackOAuth2Api": {
          "id": "HQneTCU7vTozIws1",
          "name": "Slack Oauth2"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        220,
        1180
      ],
      "id": "dd49724f-0f36-48e5-a2db-3ab63711f2ca",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "D09ujHRZlS7g66tq",
          "name": "USDB"
        }
      }
    },
    {
      "parameters": {},
      "id": "15bb7faf-2cb7-41de-8d1b-c9d403784cae",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        360,
        2860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SHOW TABLES;",
        "options": {}
      },
      "id": "7652c292-2815-4930-8b0b-453bdf7f15f0",
      "name": "List all tables in a database",
      "type": "n8n-nodes-base.mySql",
      "position": [
        1800,
        1080
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "QonuFF6AfGffP6d7",
          "name": "104.167.196.118 : 4000 (3306)"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DESCRIBE {{ $json.Tables_in_usdb }};",
        "options": {}
      },
      "id": "99106b40-f708-4523-937c-4f66ee7a1304",
      "name": "Extract database schema",
      "type": "n8n-nodes-base.mySql",
      "position": [
        1980,
        1080
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "QonuFF6AfGffP6d7",
          "name": "104.167.196.118 : 4000 (3306)"
        }
      }
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "id": "c99eb68b-a0a9-4158-abc8-3f4e67ce4a86",
      "name": "Convert data to binary",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        480,
        2060
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "./usdb_sql.json",
        "options": {}
      },
      "id": "71d64a24-2c33-4de5-9318-3652c6eda29a",
      "name": "Save file locally",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        660,
        2060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d49a9d99-6ea6-494c-a5d2-349474c03b3e",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -240,
        1860
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebbe194a-4b8b-44c9-ac19-03cf69d353bf",
              "name": "query",
              "type": "string",
              "value": "={{ ($json.output.match(/SELECT[\\s\\S]*?;/i) || [])[0] || \"\" }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "355fb805-03c8-4813-92ae-3057282ebfa8",
      "name": "Extract SQL query",
      "type": "n8n-nodes-base.set",
      "position": [
        0,
        2740
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "2963d04d-9d79-49f9-b52a-dc8732aca781",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.query }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "88bc01ee-6cf3-4a97-bb24-b8cb95610648",
      "name": "Check if query exists",
      "type": "n8n-nodes-base.if",
      "position": [
        180,
        2740
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "The AI Agent remembers the schema, questions, and final answers, but not data values, since queries run externally. The agent can't access database content. ",
        "height": 108.03673727584527,
        "width": 257.46308756569573,
        "color": 3
      },
      "id": "d709c9eb-6f4a-4029-9955-171ed9150d8e",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -340,
        2600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f944d21f-6aac-4842-8926-4108d6cad4bf",
              "name": "sqloutput",
              "type": "string",
              "value": "={{ Object.keys($jmespath($input.all(),'[].json')[0]).join(' | ') }} \n{{ ($jmespath($input.all(),'[].json')).map(obj => Object.values(obj).join(' | ')).join('\\n') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "25476bed-e33f-422a-81c0-22e111f87284",
      "name": "Format query results",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        2600
      ],
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query}}",
        "options": {}
      },
      "id": "8580229a-db8b-4d34-a514-54b30490b921",
      "name": "Run SQL query",
      "type": "n8n-nodes-base.mySql",
      "position": [
        2160,
        1080
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "QonuFF6AfGffP6d7",
          "name": "104.167.196.118 : 4000 (3306)"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa55e186-1535-4923-aee4-e088ca69575b",
              "name": "output",
              "type": "string",
              "value": "={{ $json.output }}\n\nSQL result:\n```markdown\n{{ $json.sqloutput }}\n```"
            }
          ]
        },
        "options": {}
      },
      "id": "7ae653ea-0e96-4544-8c22-0b6f57c3e40d",
      "name": "Prepare final output",
      "type": "n8n-nodes-base.set",
      "position": [
        960,
        2700
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "id": "4bc0b259-4be4-4f0f-9428-d856c570605c",
      "name": "Combine query result and chat answer",
      "type": "n8n-nodes-base.merge",
      "position": [
        760,
        2700
      ],
      "typeVersion": 3,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:1434",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 21
            }
          },
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        360,
        2600
      ],
      "id": "70d3381e-ae22-40fc-8de5-e4e9936b46c5",
      "name": "HTTP Request",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}",
        "options": {}
      },
      "id": "bbc4ae6e-1ad1-4ac1-b6ba-d6ac8a47ca2f",
      "name": "Run SQL query tmplt",
      "type": "n8n-nodes-base.mySql",
      "position": [
        2340,
        1080
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "oUon8ECO0bjjL9bn",
          "name": "AISandbox"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f5e1c576-b197-44c6-825c-8b6ed343f2b6",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            },
            {
              "id": "47f13824-728b-459f-be3d-68cb22e8c459",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "296ec928-b65c-483f-9ede-2282d3cd416a",
              "name": "Start",
              "value": "={{$now}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1620,
        1320
      ],
      "id": "c9d39312-d1fd-4576-8bec-b54a934321b6",
      "name": "Start Time"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d7ac37dc-ff81-4bd4-92b2-44ce02145875",
              "name": "Stop",
              "value": "={{ $now }}",
              "type": "string"
            },
            {
              "id": "404b3c63-bd42-476f-ba74-bb19016dcd7f",
              "name": "Request",
              "value": "={{ $json.sql }}",
              "type": "string"
            },
            {
              "id": "378b8c45-f247-4a72-b3ec-17fe0639cb10",
              "name": "Response",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1980,
        1320
      ],
      "id": "0a326dd2-368d-4d5f-aef0-6a0abe97ecbf",
      "name": "Response"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appGV8vCDX8WGdmJG",
          "mode": "list",
          "cachedResultName": "Direct Query",
          "cachedResultUrl": "https://airtable.com/appGV8vCDX8WGdmJG"
        },
        "table": {
          "__rl": true,
          "value": "tblNLhT1EBPCNCxQc",
          "mode": "list",
          "cachedResultName": "Direct Query Executions",
          "cachedResultUrl": "https://airtable.com/appGV8vCDX8WGdmJG/tblNLhT1EBPCNCxQc"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $('Chat Trigger').item.json.sessionId }}",
            "chatInput": "={{ $('Start Time').item.json.chatInput }}",
            "startTime": "={{ $('Start Time').item.json.Start }}",
            "request": "={{ $('MySQL').item.json.sql }}",
            "response": "={{ $('MySQL').item.json.data[0].toJsonString() }}",
            "stopTime": "={{ $('Response').item.json.Stop }}",
            "time": "={{ ($('Response').item.json.Stop.toDateTime() -  $('Start Time').item.json.Start.toDateTime())/1000}}s"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "startTime",
              "displayName": "startTime",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "request",
              "displayName": "request",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "response",
              "displayName": "response",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "stopTime",
              "displayName": "stopTime",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "time",
              "displayName": "time",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Ok",
                  "value": "Ok"
                },
                {
                  "name": "Fail",
                  "value": "Fail"
                }
              ],
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2340,
        1320
      ],
      "id": "e5981541-bd25-4848-86ab-8db4e9ae11cd",
      "name": "Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "0k6jxJu0tQwdczzt",
          "name": "n8nToken_20250128"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b4668751-987a-48e0-8c3b-b31f3fd5db8c",
              "name": "time",
              "value": "=  {{ ($json.Stop.toDateTime() - $('Start Time').item.json.Start.toDateTime())/1000}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2160,
        1320
      ],
      "id": "644a1614-1f74-4bbd-82de-1babf5733dd2",
      "name": "Delta"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://104.167.196.118:4000/mysql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.chatInput }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 1000000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1800,
        1320
      ],
      "id": "dba3a83e-9cdf-4ddb-93e5-099e3590c0cb",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:1434",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=SELECT name\nFROM sys.tables"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 1000000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -40,
        2060
      ],
      "id": "372741d5-17d3-4f90-9b9b-36b07d2c48fc",
      "name": "LIST ALL tables"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=EXEC sp_columns '{{ $json.name }}';"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 1000000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        140,
        2060
      ],
      "id": "f7d5ab5c-c5d0-4acd-8007-248ff892dbcf",
      "name": "EXTRACT Schemas",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "764176d6-3c89-404d-9c71-301e8a406a68",
              "name": "table",
              "type": "string",
              "value": "={{ $('LIST ALL tables').item.json.Tables_in_usdb }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "7473d5e6-5e1c-49d6-a760-b6b08d535060",
      "name": "Add table name column",
      "type": "n8n-nodes-base.set",
      "position": [
        400,
        1860
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User Message is:\n{{ $json.chatInput }}",
        "options": {
          "systemMessage": "=# Role\nYou are an AI assistant who as a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversation and provide responses that are coherent and relevant to the topic at hand. You are capable to fulfill different requests from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. Additionally, you are able to use tools to perform tasks as required.\n\n# Instructions\nGet the user request and translate human natural language and translated into MsSQL queries to use with against the USDB.\nYou will take into consideration the USDB tables when formulating the MsSQL queries. Your goal is to be a useful expert assitant that can aid the user in exploring the USDB by asking question in natural language and developing insights or gathering complex information while asking written or spoken questions. \n\nTake into consideration the USDB Table Schema while formulating the MsSQL queries:\n{{ $json.schema }}\n\n# Requirements:\n- Ensure the SQL query is syntactically correct.\n- Do not include any destructive operations (e.g., DROP, DELETE).\n- always use LIKE for filters never explicit names. \n- Dont Limit the data\n- The Current Date = {{ $now }}\n- ONLY RETURN THE SQL QUERY AND NOTHING ELSE\n\n# Rules\nWhen generating Microsoft SQL Server (MSSQL) queries:\n1. Always write defensive code that handles NULL values and multiple/empty results\n2. Use appropriate table hints like WITH (NOLOCK) for read operations\n3. For subqueries that might return multiple rows, use IN instead of = or use TOP with ORDER BY\n4. When dealing with dates, use CONVERT or explicit date formats\n5. Include appropriate schema prefixes (dbo.)\n6. Write queries that will not cause timeouts on large tables\n7. Avoid constructs known to cause \"Internal server error\" issues in MSSQL\n\n\n# When to use this tool\nUse this tool when the user asks about:\n- Current date or time\n- Today's date\n- What day of the week it is\n- How many days into the month/year we are\n- Month-to-date or year-to-date timeframes\n- Comparisons to last month or last year\n- Business reporting periods\n- Any time-related calculations\n\n# Example trigger phrases:\n- \"What's today's date?\"\n- \"What day of the week is it?\"\n- \"How many days are we into the month?\"\n- \"What's the month-to-date period?\"\n- \"What's the date range for year-to-date?\"\n- \"How does this month compare to last month?\"\n- \"What's the current month and quarter?\"\n\n# What this tool returns\nThis tool provides comprehensive date and time information including:\n- Current timestamp, date, and time\n- Day, month, year information\n- Week, month, quarter, and year timeframes \n- MTD (Month-to-Date) and YTD (Year-to-Date) periods\n- MOM (Month-over-Month) and YOY (Year-over-Year) comparison dates\n\n# How to use the response\nThe tool returns a JSON object with nested properties. To access specific information:\n- For current date: response.current.date\n- For MTD: response.timeframes.mtd\n- For YOY comparisons: response.comparisons.yoy\n\n# Business context\nThis tool is especially valuable for:\n- Financial reporting periods\n- Sales comparisons across time periods\n- Business analytics and KPI tracking\n- Scheduling and planning activities\n\n# When NOT to use this tool\nDon't use this tool for:\n- Historical dates (dates in the past) that aren't relative to today\n- Future date calculations beyond simple relative periods\n- Complex calendar manipulations\n- Timezone conversions requiring specific rules\n-->\n\n\n<userStyle>\n  Normal\n</userStyle>\n\n\n# Examples\n​ <examples>\n  <example>\n    Natural Language Query: \"What is the earliest and latest datapoints in the dataset?\"\n    SQL Query:\n    SELECT \n      MIN(EarliestDate) AS earliest_date,\n      MAX(LatestDate) AS latest_date\n    FROM (\n      SELECT MIN(ChangedOn) AS EarliestDate, MAX(ChangedOn) AS LatestDate FROM dbo.LISTINGS WITH (NOLOCK) WHERE ChangedOn IS NOT NULL\n      UNION ALL\n      SELECT MIN(SalesDate), MAX(SalesDate) FROM dbo.LISTINGS WITH (NOLOCK) WHERE SalesDate IS NOT NULL\n      UNION ALL\n      SELECT MIN(CreatedOn), MAX(CreatedOn) FROM dbo.VINS WITH (NOLOCK) WHERE CreatedOn IS NOT NULL\n      UNION ALL\n      SELECT MIN(SalesDateStart), MAX(SalesDateEnd) FROM dbo.HISTORY WITH (NOLOCK) WHERE SalesDateStart IS NOT NULL AND SalesDateEnd IS NOT NULL\n    ) AS DateRanges;\n  </example>\n  \n  <example>\n    Natural Language Query: \"Count how many rows in the entire dataset\"\n    SQL Query:\n    SELECT \n      (SELECT COUNT_BIG(*) FROM dbo.LISTINGS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.DEALERS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.VINS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.HISTORY WITH (NOLOCK)) AS total_rows;\n  </example>\n  \n  <example>\n    Natural Language Query: \"What are the top 10 most frequent vehicle makes?\"\n    SQL Query:\n    SELECT TOP 10 WITH TIES\n      SpecMake AS car_make,\n      COUNT_BIG(*) AS occurrences\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE SpecMake IS NOT NULL\n    GROUP BY SpecMake\n    ORDER BY occurrences DESC;\n  </example>\n  \n  <example>\n    Natural Language Query: \"Find all CARMAX sales in 2024\"\n    SQL Query:\n    SELECT COUNT_BIG(*) AS total_sales \n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE DEALERS_ID IN (SELECT DEALERS_ID FROM dbo.DEALERS WITH (NOLOCK) WHERE Name = 'CARMAX') \n      AND SalesDate IS NOT NULL\n      AND SalesDate >= CONVERT(DATE, '2024-01-01') \n      AND SalesDate < CONVERT(DATE, '2025-01-01');\n  </example>\n  \n  <example>\n    Natural Language Query: \"Which states have the most car listings?\"\n    SQL Query:\n    SELECT TOP 10\n      StateCode,\n      COUNT_BIG(*) AS listing_count\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE StateCode IS NOT NULL\n    GROUP BY StateCode\n    ORDER BY listing_count DESC;\n  </example>\n  \n  <example>\n    Natural Language Query: \"What's the average price of Toyota cars by model?\"\n    SQL Query:\n    SELECT \n      SpecModel,\n      AVG(CAST(ListingPrice AS DECIMAL(10,2))) AS avg_price,\n      COUNT_BIG(*) AS sample_size\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE SpecMake = 'Toyota' \n      AND SpecModel IS NOT NULL\n      AND ListingPrice IS NOT NULL\n      AND ListingPrice > 0\n    GROUP BY SpecModel\n    HAVING COUNT_BIG(*) > 5\n    ORDER BY avg_price DESC;\n  </example>\n</examples>\n\n#Additional context\n - date time\n - context about the business\n\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else. Make sure you format markdown tables properly.):\n{{ $json.chatinput }}",
          "returnIntermediateSteps": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -340,
        2740
      ],
      "id": "0a255659-643f-4777-a03f-cae820514dd8",
      "name": "USDB AI Agent"
    },
    {
      "parameters": {
        "name": "DateandTime",
        "description": "Returns the current date and time information including formatted date, time, timezone, and day of week and other temporal expressions.",
        "jsCode": "// Advanced DateTime Tool for n8n\nmodule.exports = function() {\n  // Create date objects\n  const now = new Date();\n  \n  // Basic date components\n  const year = now.getFullYear();\n  const month = now.getMonth(); // 0-based\n  const day = now.getDate();\n  \n  // Format date as string\n  const dateString = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n  \n  // Format time\n  const hours = String(now.getHours()).padStart(2, '0');\n  const minutes = String(now.getMinutes()).padStart(2, '0');\n  const seconds = String(now.getSeconds()).padStart(2, '0');\n  const timeString = `${hours}:${minutes}:${seconds}`;\n  \n  // Create simple data object\n  const data = {\n    current: {\n      dateTime: `${dateString} ${timeString}`,\n      date: dateString,\n      time: timeString\n    }\n  };\n  \n  // Create the response property n8n expects\n  const responseData = {\n    response: JSON.stringify(data)\n  };\n  \n  // Debug\n  console.log(\"Response data:\", responseData);\n  console.log(\"Response type:\", typeof responseData.response);\n\n  // Return the object with the response property containing a string\n  return responseData;\n};"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        -120,
        2920
      ],
      "id": "63f377a3-72dc-4189-b2bc-1c12b91e9777",
      "name": "dateTimeInfo"
    },
    {
      "parameters": {
        "content": "# AGENT WITH TOOLS (SQL)\n\n## Run this part only once\nThis section:\n* loads a list of all tables from the USDB database hosted on 10.20.30.21\n* extracts the database schema for each table and adds the table name\n* converts the schema into a binary JSON format\n* saves the schema `./usdb_mysql.json` file locally\n\n***Now you can use chat to \"talk\" to your data!*** 🎉",
        "height": 466,
        "width": 2125,
        "color": 3
      },
      "id": "89a2c89f-2d85-489e-9370-5316b444295e",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        1800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.2
        }
      },
      "id": "d784c002-8485-4b73-aba9-1f204fa005df",
      "name": "OpenAI Chat1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -360,
        2920
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "D09ujHRZlS7g66tq",
          "name": "USDB"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "1a439711-910d-408a-8d4c-fc3d71302e72",
      "name": "Window Buffer Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -240,
        2920
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "### LangChain AI Agent's system prompt is modified.\nIt uses only the database schema to generate SQL queries. The agent creates these queries but does not execute them. Instead, it passes them to subsequent nodes.\n\n**Example:**\n\"Can you show me the list of all German customers?\" \n\nQueries are generated only when necessary; for some requests, a query may not be needed. This is because certain questions can be answered directly without SQL execution.\n\n**Example:**\n\"Can you list me all tables?\"",
        "height": 855,
        "width": 806,
        "color": 6
      },
      "id": "88bce765-bb6c-43f6-a629-1d9edb4dd47b",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        2320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## On every chat message:\n\n* The workflow gets the data from the local schema file and extracts it as a JSON object. This way, we achieve two important improvements:\n  * faster processing time as we don't need to fetch the schema for each table from a slow remote database\n  * the Agent will know database structure without seeing the actual data\n* DB schema is then converted into a long string, JSON fields from the Chat Trigger are added before they are entered into the Agent node.\n",
        "height": 849,
        "width": 1323,
        "color": 6
      },
      "id": "0eec58c1-30d2-447a-ae82-acb6ff26ca61",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        2320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "height": 106,
        "width": 2125
      },
      "id": "a236d2c7-c1ba-446c-b950-a871084badb2",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        1640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "height": 106,
        "width": 2125
      },
      "id": "8b9d4568-c3a9-4e8e-bb74-1b46a594091d",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        3260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "30c3394f-b862-4d3f-85fe-f5eb97f787d5",
              "name": "response",
              "value": "={{ $('Format Response2').item.json.textOutput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "67ea26b5-b922-4eb7-82e7-5b51ef2562f5",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        4100
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the SQL query from the previous node\nconst sqlQuery = $json[\"text\"];\n\n// Basic validation to prevent dangerous queries\nconst disallowedPatterns = [\n  /;\\s*--/, // End of statement with comment\n  /DROP\\s+TABLE/i,\n  /DELETE\\s+FROM/i,\n  /UPDATE\\s+/i,\n  /INSERT\\s+INTO/i,\n  /ALTER\\s+TABLE/i,\n];\n\nfor (const pattern of disallowedPatterns) {\n  if (pattern.test(sqlQuery)) {\n    throw new Error(\"Generated SQL query contains disallowed operations.\");\n  }\n}\n\n// If safe, pass the SQL query along\nreturn { sqlQuery };\n"
      },
      "id": "c4135f87-6f4f-48fd-8888-fe572f7932a1",
      "name": "Query Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -60,
        4100
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1Yw_auhBNKJnLfpP0xUGhl3Xznt5Jh1lQpFbco_DYVKc",
          "mode": "list",
          "cachedResultName": "USDB Query Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Yw_auhBNKJnLfpP0xUGhl3Xznt5Jh1lQpFbco_DYVKc/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1788684584,
          "mode": "list",
          "cachedResultName": "USDB queries",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Yw_auhBNKJnLfpP0xUGhl3Xznt5Jh1lQpFbco_DYVKc/edit#gid=1788684584"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ $now }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "natural language question",
              "displayName": "natural language question",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "SQL query",
              "displayName": "SQL query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "answer",
              "displayName": "answer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "116efde2-35cd-4d49-89c8-b7053805582a",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        480,
        4100
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "BQrRr81yIEFDlryk",
          "name": "USDB GSheets"
        }
      }
    },
    {
      "parameters": {
        "name": "database_query",
        "description": "Call this tool to query into USDB and get the response from the database\n",
        "workflowId": {
          "__rl": true,
          "value": "={{\"U0WVICGhaz0o0bKs\"}}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "Query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}"
          },
          "matchingColumns": [
            "aField"
          ],
          "schema": [
            {
              "id": "Query",
              "displayName": "Query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1340,
        3900
      ],
      "id": "e5842b38-477c-4e67-abbc-8bb8e0094492",
      "name": "database_query1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1340,
        4100
      ],
      "id": "8e96b8c1-b705-4e5d-9ec6-b791b186b21c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Access the items from the previous node (MySQL node)\nconst queryResults = items.map(item => item.json);\n\n// Check if there are any results\nif (queryResults.length === 0) {\n  return [{ json: { textOutput: \"No results found for your query.\" } }];\n}\n\n// Extract column names (headers)\nconst headers = Object.keys(queryResults[0]);\n\n// Initialize an array to hold formatted lines\nlet lines = [];\n\n// Create a header row (optional)\nlines.push(headers.join(' | '));\nlines.push(headers.map(() => '---').join(' | ')); // For Markdown table formatting\n\n// Iterate over each result item\nqueryResults.forEach(item => {\n  const row = headers.map(header => item[header]);\n  lines.push(row.join(' | '));\n});\n\n// Join all lines into a single string with line breaks\nconst textOutput = lines.join('\\n');\n\n// Return the formatted text as a new field\nreturn [{ json: { textOutput } }];\n"
      },
      "id": "b38da21b-0eb4-4045-bfc1-c7ca8cca6ac4",
      "name": "Format Response2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        4100
      ]
    },
    {
      "parameters": {
        "content": "## On every chat message:\n\n* The workflow gets the data from the local schema file and extracts it as a JSON object. This way, we achieve two important improvements:\n  * faster processing time as we don't need to fetch the schema for each table from a slow remote database\n  * the Agent will know database structure without seeing the actual data\n* DB schema is then converted into a long string, JSON fields from the Chat Trigger are added before they are entered into the Agent node.\n",
        "height": 1009,
        "width": 2123,
        "color": 5
      },
      "id": "22c45365-8dd8-4095-9c35-cb681f9296c7",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        3460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.sqlquery }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 21
            }
          },
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1700,
        3560
      ],
      "id": "8383995c-dcec-4082-a8da-430d84f4d3c0",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        340,
        3920
      ],
      "id": "01333e33-c658-44f5-a62a-baf292729aeb",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -460,
        2060
      ],
      "id": "d47424d7-4908-4742-ab9d-0eee1c36c0b4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "fileSelector": "./usdb_mysql.json",
        "options": {}
      },
      "id": "782232ae-c540-432e-8dfc-a89fa9d349bf",
      "name": "Load the schema from the local file",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        -240,
        3720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42abd24e-419a-47d6-bc8b-7146dd0b8314",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $('Switch1').item.json.sessionId }}"
            },
            {
              "id": "39244192-a1a6-42fe-bc75-a6fba1f264df",
              "name": "action",
              "type": "string",
              "value": "={{ $('Switch1').item.json.action }}"
            },
            {
              "id": "f78c57d9-df13-43c7-89a7-5387e528107e",
              "name": "chatinput",
              "type": "string",
              "value": "= {{ $('Switch1').item.json.chatInput }}"
            },
            {
              "id": "e42b39eb-dfbd-48d9-94ed-d658bdd41454",
              "name": "schema",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fe338be5-0116-4ea5-a039-a5cd146edaf9",
      "name": "Combine schema data and chat input",
      "type": "n8n-nodes-base.set",
      "position": [
        120,
        3720
      ],
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "b67ad300-b432-424e-95bd-eb483e8c3978",
      "name": "Extract data from file",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -60,
        3720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.chatInput }}",
                    "rightValue": "={{ \"/start\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e9cd41d3-869f-42ac-8fc1-4fa7cc946c6a"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -640,
        2740
      ],
      "id": "7d975764-9824-49c1-9d96-895a230c0dab",
      "name": "Switch1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "Orchestrator",
        "responseMode": "responseNode",
        "options": {
          "ignoreBots": true
        }
      },
      "id": "0208ff3f-b9d1-4716-82e0-51744c0b2f69",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1580,
        3260
      ],
      "webhookId": "2a6b4dfd-841c-4894-8f86-ef7601bba00e",
      "disabled": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"response\": \"{{$json.output}}\"\n}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "900a9516-f41f-499c-97e4-efb666ecc58f",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1360,
        2460
      ],
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Natural Language Query:\n{{ $json.query }}\n\nSQL Query:",
        "messages": {
          "messageValues": [
            {
              "message": "=## Objective You are a world-class MsSQL developer. You will execute the following query against the USDB database.\n\n---\n\n- Natural Language Query: \n\"What is the earliest and latest datapoints in the dataset?\"\nSQL Query:\nsqlCopySELECT \n    MIN(EarliestDate) AS earliest_date,\n    MAX(LatestDate) AS latest_date\nFROM (\n    SELECT MIN(ChangedOn) AS EarliestDate, MAX(ChangedOn) AS LatestDate FROM dbo.LISTINGS WHERE ChangedOn IS NOT NULL\n    UNION ALL\n    SELECT MIN(SalesDate), MAX(SalesDate) FROM dbo.LISTINGS WHERE SalesDate IS NOT NULL\n    UNION ALL\n    SELECT MIN(CreatedOn), MAX(CreatedOn) FROM dbo.VINS WHERE CreatedOn IS NOT NULL\n    UNION ALL\n    SELECT MIN(SalesDateStart), MAX(SalesDateEnd) FROM dbo.HISTORY WHERE SalesDateStart IS NOT NULL AND SalesDateEnd IS NOT NULL\n) AS DateRanges;\n\n- Natural Language Query: \"Count how many rows in the entire dataset\"\nSQL Query:\nsqlCopySELECT \n    (SELECT COUNT(*) FROM dbo.LISTINGS) +\n    (SELECT COUNT(*) FROM dbo.DEALERS) +\n    (SELECT COUNT(*) FROM dbo.VINS) +\n    (SELECT COUNT(*) FROM dbo.HISTORY) AS total_rows;\n\n- Natural Language Query: \"What are the top 10 most frequent vehicle makes?\"\nSQL Query:\nsqlCopySELECT \n    SpecMake AS make,\n    COUNT(*) AS occurrences\nFROM dbo.LISTINGS\nWHERE SpecMake IS NOT NULL\nGROUP BY SpecMake\nORDER BY occurrences DESC\nLIMIT 10;\n\n\n**Requirements:**\n- Ensure the SQL query is syntactically correct.\n- Do not include any destructive operations (e.g., DROP, DELETE).\n- always use LIKE for filters never explicit names. \n- Dont Limit the data\n- The Current Date = {{ $now }}\n- ONLY RETURN THE SQL QUERY AND NOTHING ELSE"
            }
          ]
        }
      },
      "id": "b2ab04ea-9d4b-4b0d-be37-fa89a16f9912",
      "name": "USDB-SQL-query-Executor",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1520,
        3780
      ],
      "disabled": true
    },
    {
      "parameters": {
        "name": "query_validation",
        "description": "Call this tool to validate that the query will not perform destructive actions.",
        "jsCode": "// Get the SQL query from the previous node\nconst sqlQuery = $json[\"text\"];\n\n// Basic validation to prevent dangerous queries\nconst disallowedPatterns = [\n  /;\\s*--/, // End of statement with comment\n  /DROP\\s+TABLE/i,\n  /DELETE\\s+FROM/i,\n  /UPDATE\\s+/i,\n  /INSERT\\s+INTO/i,\n  /ALTER\\s+TABLE/i,\n];\n\nfor (const pattern of disallowedPatterns) {\n  if (pattern.test(sqlQuery)) {\n    throw new Error(\"Generated SQL query contains disallowed operations.\");\n  }\n}\n\n// If safe, pass the SQL query along\nreturn [{\n  json: { response: JSON.stringify(items[0].json)}\n}];\n// {sqlQuery};\n\n// Parse the query result and return it as a string\n// const queryResult = items[0].json;\n// const resultString = JSON.stringify(queryResult);\n\n// Return the result as a string\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        1340,
        3740
      ],
      "id": "d2753543-31c7-4990-9ea3-81c8eeeabc35",
      "name": "Query_Validation"
    },
    {
      "parameters": {
        "name": "format_response",
        "description": "Call this tool after the execute_query tool has been called to format its response.",
        "jsCode": "// Access the items from the previous node (MySQL node)\nconst queryResults = items.map(item => item.json);\n\n// Check if there are any results\nif (queryResults.length === 0) {\n  return [{ json: { textOutput: \"No results found for your query.\" } }];\n}\n\n// Extract column names (headers)\nconst headers = Object.keys(queryResults[0]);\n\n// Initialize an array to hold formatted lines\nlet lines = [];\n\n// Create a header row (optional)\nlines.push(headers.join(' | '));\nlines.push(headers.map(() => '---').join(' | ')); // For Markdown table formatting\n\n// Iterate over each result item\nqueryResults.forEach(item => {\n  const row = headers.map(header => item[header]);\n  lines.push(row.join(' | '));\n});\n\n// Join all lines into a single string with line breaks\nconst textOutput = lines.join('\\n');\n\n// Return the formatted text as a new field\nreturn [{ json: { textOutput } }];"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        1340,
        3580
      ],
      "id": "05273ace-e56d-41da-93f5-af98cdb8a210",
      "name": "format_response"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User Query:\n{{ $json.chatinput }}",
        "options": {
          "systemMessage": "=# Role\nYou are a world-class MsSQL Developer. \n\n# Task\nI want you to read a user query in natural language, then convert it to an accurate MsSQL SQL query with the correct syntax that retrieves the relevant data from a USDB dataset. Ensure the queries are aligned with user intent, structured correctly, and safe to execute.\n\n# Context\nYou are working with a dataset containing USDB vehicle data, including the following schema:\n{{ $json.schema }}\n\n\n## **Table Overview:**\nUsers may ask various analytical questions related to listings, dealers, VINs, etc. Your role is to accurately interpret the user's intent, convert the query into MsSQL using the provided tool, execute it, and return the relevant insights.\n\n\n# **Detailed Instructions:**\n1. **Understand User Intent**  \n   - Analyze the user's query to determine the required dataset.\n   - Identify filters, date ranges, groupings, and aggregation requirements.\n   - Enrich the user's query. \n\n2. **SQL Query Generation**  \n   - Convert the enriched natural language query into a SQL query.\n   - Pass **only the enriched natural language query and relevant columns & filtering** to the tool to generate the query dynamically.\n   - Ensure accuracy in column selection and handling of nested JSON-like fields.\n3. **Present Results**: Deliver the query results to the user in a concise and easy-to-understand format. Avoid presenting SQL code in your final response.\n4. **Handle Missing Data**: If the requested data doesn't exist or is unavailable, inform the user politely and suggest any alternative queries if possible.\n\n## **Output Requirements**\n- **Concise and Clear Summaries** – Only present the interpreted query results, without exposing SQL code.\n- **Polite Handling of Missing Data** – If no relevant data is found, provide a friendly response with context.\n- **No SQL Code in Responses** – Avoid sharing raw SQL queries unless explicitly requested.\n\n---\n## **Examples**\n### **Example 1**\n**User Query**: \"What are the earliest and latest data points in this dataset?\"  \n**Assistant Response**:  \n- Uses `database_query` to generate the SQL query passing it the knowlege that the dataset comprises of multiple tables, each corresponding to a specific date. For instance, a table named ga_sessions_20170801 contains data for August 1, 2017.\n- Retrieves the results of the earliest and latest table names\n- Responds:  \n  *\"The earliest and latest data points in the dataset range from  August 1, 2016, to August 1, 2017\"*\n\n---\n### **Example 2**\n**User Query**: \"What are the top 5 traffic sources during march 2017?\"  \n**Assistant Response**:  \n- Uses `database_query` to generate the SQL query, passing:  \n  *\"Retrieve the top 5 traffic sources during march 2017 based on the number of visits. Use `trafficSource.source` and count the visits, ordering by highest traffic.\"*\n- Retrieves and processes results.\n- Responds:  \n  *\"The top 5 traffic sources during the month of march 2017 are:  \n    1. Google - X visits  \n    2. Facebook - Y visits  \n    3. Direct - Z visits  \n    ...\"*\n\n\n# Notes\n- You must only use the schema above to correctly identify the column names.\n- If the column name is not clear from user's query, then ask them to clarify.\n- keep the response concise.\n- If the response is not accurate, ask user to clarify.\n- Always call the database query tool before answering, never assume the answer without having the data\n- The Current Date = {{ $now }}",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        300,
        3720
      ],
      "id": "84924176-7a3c-4cab-9cfd-ba7248cd3421",
      "name": "USDB AI Agent1"
    },
    {
      "parameters": {
        "toolDescription": "execute_query",
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"query\": \n\"Find the count of unique dealers in Phoenix, Arizona\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        1520,
        3580
      ],
      "id": "2b19177e-a83e-462b-8a86-49fbc8e0278d",
      "name": "execute_query"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.sqlquery }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 21
            }
          },
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        4280
      ],
      "id": "a7a0fc87-32e9-4e60-83d6-db8da7c69016",
      "name": "Query USDB"
    },
    {
      "parameters": {
        "path": "query_USDB",
        "responseMode": "responseNode",
        "options": {
          "ignoreBots": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -240,
        4100
      ],
      "id": "67036655-68ed-4e0d-9cd9-e62315b92816",
      "name": "quewry_USDB",
      "webhookId": "ee542699-4213-4de5-a73e-61e776148104",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://syc.app.n8n.cloud/webhook/query_USDB",
        "sendBody": true,
        "parametersBody": {
          "values": [
            {}
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        520,
        3920
      ],
      "id": "8fb1d07f-a03b-41ac-a18d-805488b8f0be",
      "name": "USDB_Webhook"
    },
    {
      "parameters": {
        "model": "claude-3-haiku-20240307",
        "options": {
          "thinking": false
        }
      },
      "id": "f637d665-d3e3-49d8-93ba-2bd900696f1c",
      "name": "Anthropic Chat1",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        200,
        3920
      ],
      "credentials": {
        "anthropicApi": {
          "id": "6XoeyrVJuZadyovW",
          "name": "Kris' Anthropic"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -640,
        2940
      ],
      "id": "12c0413e-00c6-4b86-afe2-02c8a664ed17",
      "name": "When chat message received",
      "webhookId": "f0b92997-6084-43dd-914e-55bf2f6b5c28"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=EXEC sp_columns '{{ $json.name }}';"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        120,
        4100
      ],
      "id": "2ec13be2-96ed-4738-bd8f-2e6bb41553e3",
      "name": "Microsoft SQL",
      "credentials": {
        "microsoftSql": {
          "id": "BbAMiDytg4JU7Jas",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT name\nFROM sys.tables"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        0,
        1860
      ],
      "id": "5ad2d466-ec6d-4955-b938-9178744f24fd",
      "name": "Microsoft SQL1",
      "credentials": {
        "microsoftSql": {
          "id": "BbAMiDytg4JU7Jas",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=EXEC sp_columns '{{ $json.name }}';"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        180,
        1860
      ],
      "id": "8c92b24c-3c9d-427a-b7d3-2c71b3add8be",
      "name": "Microsoft SQL2",
      "credentials": {
        "microsoftSql": {
          "id": "BbAMiDytg4JU7Jas",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1280,
        2640
      ],
      "id": "fcf4cb73-c272-4aae-b3b3-d80d69568571",
      "name": "OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.files[0].url_private_download }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "audio"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1460,
        2640
      ],
      "id": "cc6a3a1d-3667-4e67-8d1f-6c4027fd4cde",
      "name": "Dwnld_Audio1",
      "credentials": {
        "slackOAuth2Api": {
          "id": "7VOxhQHkBloxHtkn",
          "name": "syc-n8n"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9569b209-0827-4fcd-96e8-1091a15d68e0",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1380,
        2900
      ],
      "id": "a801bd50-045d-441f-9212-f282af3b2271",
      "name": "Text Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "61c23cad-6c72-464e-9947-b7f309c9b994",
              "leftValue": "={{ $json.user }}",
              "rightValue": "={{\"D089ZDPG57X\"}}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -1900,
        2740
      ],
      "id": "b480e3cc-9cab-4d02-947e-eec7ebf6d125",
      "name": "Filter1"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{\"D089ZDPG57X\"}}",
          "mode": "id"
        },
        "text": "={{ $json.output }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "f28f7710-54e3-4cd7-b47b-72dda3a90c92",
      "name": "Send reply",
      "type": "n8n-nodes-base.slack",
      "position": [
        1360,
        2700
      ],
      "webhookId": "81d9777e-2ea1-4938-966a-e2fe491d0bba",
      "typeVersion": 2.2,
      "credentials": {
        "slackApi": {
          "id": "OjRpDB3gj10WwGnG",
          "name": "SYCn8n Bot Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "channelId": {
          "__rl": true,
          "value": "={{ \"D089ZDPG57X\" }}",
          "mode": "id"
        },
        "options": {
          "resolveIds": false
        }
      },
      "id": "7e788357-6b11-44cc-b45a-9a839ce6baf0",
      "name": "Slack Trigger",
      "type": "n8n-nodes-base.slackTrigger",
      "position": [
        -2080,
        2740
      ],
      "webhookId": "cc2d1f3f-c366-48a5-9285-b424f00504cf",
      "typeVersion": 1,
      "credentials": {
        "slackApi": {
          "id": "OjRpDB3gj10WwGnG",
          "name": "SYCn8n Bot Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://syc.app.n8n.cloud/webhook/USDB_Orchestrator",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=sessionId",
              "value": "={{ $('When chat message received').item.json.sessionId }}"
            },
            {
              "name": "chatInput",
              "value": "={{ $('Switch2').item.json.chatInput }}"
            },
            {
              "name": "action",
              "value": "={{ $('Filter1').item.json.action }}"
            }
          ]
        },
        "options": {
          "lowercaseHeaders": true
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1320,
        3260
      ],
      "id": "63cbff9a-b17b-4a53-8b35-8ad098e8eb65",
      "name": "Call USDB Orchestrator"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1060,
        2740
      ],
      "id": "9071a455-4b46-40b1-b54a-ca6d9ea39b32",
      "name": "Merge"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "584c8c90-4cc3-43ea-aac0-d1762ba79d0d",
                    "leftValue": "{{ $json.files[0].mimetype }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "audio/mp4",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "bb9fc3cb-1c38-4fc3-8ed0-896280711d84"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1ecab1e4-02c7-490e-82e5-f9f701140f00",
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1700,
        2740
      ],
      "id": "fead85ee-e12b-4464-9c64-171333add7e3",
      "name": "Switch2"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-13T07:39:24.180Z",
      "updatedAt": "2025-03-13T07:39:24.180Z",
      "id": "Ub8twoxVAlrzBUUv",
      "name": "Agent"
    }
  ],
  "triggerCount": 4,
  "updatedAt": "2025-04-03T04:30:06.000Z",
  "versionId": "e48b9663-57ad-440e-a358-7b4d44df9391"
}