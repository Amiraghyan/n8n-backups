{
  "active": false,
  "connections": {
    "USDB_Agent_tool": {
      "main": [
        []
      ]
    },
    "OpenRouter Chat": {
      "ai_languageModel": [
        []
      ]
    },
    "Anthropic Chat": {
      "ai_languageModel": [
        []
      ]
    },
    "OpenAI Chat": {
      "ai_languageModel": [
        [
          {
            "node": "USDB_Agent_tool",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat": {
      "ai_languageModel": [
        []
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "Dwnld_Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dwnld_Audio": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "USDB_Agent_tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Out": {
      "main": [
        [
          {
            "node": "USDB_Agent_tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List all tables in a database": {
      "main": [
        [
          {
            "node": "Extract database schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert data to binary": {
      "main": [
        [
          {
            "node": "Save file locally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract SQL query": {
      "main": [
        [
          {
            "node": "Query Validation2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if query exists": {
      "main": [
        [
          {
            "node": "Combine query result and chat answer",
            "type": "main",
            "index": 1
          },
          {
            "node": "SQL template and AI queries",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format query results": {
      "main": [
        []
      ]
    },
    "Combine query result and chat answer": {
      "main": [
        [
          {
            "node": "Prepare final output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Results Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LIST ALL tables": {
      "main": [
        [
          {
            "node": "EXTRACT Schemas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRACT Schemas": {
      "main": [
        [
          {
            "node": "Add table name column",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add table name column": {
      "main": [
        [
          {
            "node": "Convert data to binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USDB AI Agent": {
      "main": [
        [
          {
            "node": "Extract SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat1": {
      "ai_languageModel": [
        [
          {
            "node": "USDB AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Prepare final output": {
      "main": [
        [
          {
            "node": "Stop_Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "LIST ALL tables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "LIST ALL tables",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Load the schema from the local file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save file locally": {
      "main": [
        []
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dwnld_Audio1": {
      "main": [
        [
          {
            "node": "OpenAI2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Out1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Trigger": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        []
      ]
    },
    "Switch2": {
      "main": [
        [],
        [
          {
            "node": "Dwnld_Audio1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start_Time": {
      "main": [
        [
          {
            "node": "Query Templates Matcher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "USDB Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "USDB Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Load the schema from the local file1": {
      "main": [
        [
          {
            "node": "Extract data from file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine schema data and chat input1": {
      "main": [
        [
          {
            "node": "USDB Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract data from file1": {
      "main": [
        [
          {
            "node": "Start_Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USDB Agent1": {
      "main": [
        []
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "USDB AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Results Formatter": {
      "main": [
        [
          {
            "node": "Combine query result and chat answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Templates Matcher": {
      "main": [
        [
          {
            "node": "Template or LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Template or LLM": {
      "main": [
        [
          {
            "node": "SQL template and AI queries",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "USDB AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stop_Time": {
      "main": [
        [
          {
            "node": "Calculate Delta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Query Validation2": {
      "main": [
        [
          {
            "node": "Check if query exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SQL template and AI queries": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Delta": {
      "main": [
        [
          {
            "node": "Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-25T15:31:55.991Z",
  "id": "U0WVICGhaz0o0bKs",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "USDB: SQL Agent",
  "nodes": [
    {
      "parameters": {
        "agent": "sqlAgent",
        "dataSource": "mysql",
        "promptType": "define",
        "text": "={{ $('Switch').item.json.chatInput }}",
        "options": {
          "includedTables": ""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        520,
        1240
      ],
      "id": "8a04c6c0-5e19-4f6d-9b72-77dd92635527",
      "name": "USDB_Agent_tool",
      "credentials": {
        "mySql": {
          "id": "oUon8ECO0bjjL9bn",
          "name": "AISandbox"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "openai/o3-mini",
        "options": {
          "maxTokens": -1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1320,
        2140
      ],
      "id": "e51796f6-7b0c-4125-8a9c-3a4ea6267d4d",
      "name": "OpenRouter Chat",
      "credentials": {
        "openRouterApi": {
          "id": "ru25OpA66L1ExedM",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "maxTokensToSample": 8192
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        1320,
        1840
      ],
      "id": "8f649ac8-d90c-4d7d-9ace-44b55fa13575",
      "name": "Anthropic Chat",
      "credentials": {
        "anthropicApi": {
          "id": "dcLqo62duKhDxGrw",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "model": "o3-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        480,
        1420
      ],
      "id": "28c12df3-7315-4044-8464-1ce3dd682fb4",
      "name": "OpenAI Chat",
      "credentials": {
        "openAiApi": {
          "id": "D09ujHRZlS7g66tq",
          "name": "USDB"
        }
      }
    },
    {
      "parameters": {
        "model": "llama-3.3-70b-versatile",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1320,
        1980
      ],
      "id": "c3d30e45-eb86-47e9-bca7-4a1459088bec",
      "name": "Groq Chat",
      "credentials": {
        "groqApi": {
          "id": "8s1PPRvjrOXCDNtL",
          "name": "n8n_AISandbox"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "61c23cad-6c72-464e-9947-b7f309c9b994",
              "leftValue": "={{ $json.user }}",
              "rightValue": "={{\"U089MNN54NT\"}}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -460,
        1240
      ],
      "id": "dd6c67d8-b244-4fbf-8c22-d9b875bd0b88",
      "name": "Filter"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "584c8c90-4cc3-43ea-aac0-d1762ba79d0d",
                    "leftValue": "{{ $json.files[0].mimetype }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "audio/mp4",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "bb9fc3cb-1c38-4fc3-8ed0-896280711d84"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1ecab1e4-02c7-490e-82e5-f9f701140f00",
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -240,
        1240
      ],
      "id": "c9d64a95-8350-48db-8c5d-8bfa9cb798fa",
      "name": "Switch"
    },
    {
      "parameters": {
        "content": "# SQL AGENT\n\n## Relevant notes \n\nWhen the slack triggers, the I do the following:\n- filter any messages coming from the Slack Bot to avoid creating an infinite loop. The bot user ID I get from the last nodes where n8n responds back to slack\n- check if the message is audio or text.\n- if it is an audio, I need to use the slack credentials based on OAUTH (not API token) to be able to download the audio file.",
        "height": 680,
        "width": 2120,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -940,
        900
      ],
      "id": "81e92f6c-d1d8-4307-9126-357ef8a4a865",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9569b209-0827-4fcd-96e8-1091a15d68e0",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        120,
        1340
      ],
      "id": "1ef659b3-ed5b-47d9-969d-62ca44a06553",
      "name": "Text Out"
    },
    {
      "parameters": {
        "url": "={{ $json.files[0].url_private_download }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "audio"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20,
        1180
      ],
      "id": "238d4e51-2d35-450b-8d86-55b2cb334a43",
      "name": "Dwnld_Audio",
      "credentials": {
        "slackOAuth2Api": {
          "id": "HQneTCU7vTozIws1",
          "name": "Slack Oauth2"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        220,
        1180
      ],
      "id": "dd49724f-0f36-48e5-a2db-3ab63711f2ca",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "D09ujHRZlS7g66tq",
          "name": "USDB"
        }
      }
    },
    {
      "parameters": {},
      "id": "15bb7faf-2cb7-41de-8d1b-c9d403784cae",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1380,
        2940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SHOW TABLES;",
        "options": {}
      },
      "id": "7652c292-2815-4930-8b0b-453bdf7f15f0",
      "name": "List all tables in a database",
      "type": "n8n-nodes-base.mySql",
      "position": [
        440,
        940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "QonuFF6AfGffP6d7",
          "name": "104.167.196.118 : 4000 (3306)"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DESCRIBE {{ $json.Tables_in_usdb }};",
        "options": {}
      },
      "id": "99106b40-f708-4523-937c-4f66ee7a1304",
      "name": "Extract database schema",
      "type": "n8n-nodes-base.mySql",
      "position": [
        620,
        940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "QonuFF6AfGffP6d7",
          "name": "104.167.196.118 : 4000 (3306)"
        }
      }
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "id": "c99eb68b-a0a9-4158-abc8-3f4e67ce4a86",
      "name": "Convert data to binary",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        60,
        2100
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "./usdb_sql.json",
        "options": {}
      },
      "id": "71d64a24-2c33-4de5-9318-3652c6eda29a",
      "name": "Save file locally",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        260,
        2100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebbe194a-4b8b-44c9-ac19-03cf69d353bf",
              "name": "query",
              "type": "string",
              "value": "={{ ($json.output.match(/SELECT[\\s\\S]*?;/i) || [])[0] || \"\" }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "355fb805-03c8-4813-92ae-3057282ebfa8",
      "name": "Extract SQL query",
      "type": "n8n-nodes-base.set",
      "position": [
        840,
        2820
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "2963d04d-9d79-49f9-b52a-dc8732aca781",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.query }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "88bc01ee-6cf3-4a97-bb24-b8cb95610648",
      "name": "Check if query exists",
      "type": "n8n-nodes-base.if",
      "position": [
        1200,
        2820
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "The AI Agent remembers the schema, questions, and final answers, but not data values, since queries run externally. The agent can't access database content. ",
        "height": 108.03673727584527,
        "width": 257.46308756569573,
        "color": 3
      },
      "id": "d709c9eb-6f4a-4029-9955-171ed9150d8e",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -360,
        2940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f944d21f-6aac-4842-8926-4108d6cad4bf",
              "name": "sqloutput",
              "type": "string",
              "value": "={{ Object.keys($jmespath($input.all(),'[].json')[0]).join(' | ') }} \n{{ ($jmespath($input.all(),'[].json')).map(obj => Object.values(obj).join(' | ')).join('\\n') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "25476bed-e33f-422a-81c0-22e111f87284",
      "name": "Format query results",
      "type": "n8n-nodes-base.set",
      "position": [
        2080,
        2440
      ],
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query}}",
        "options": {}
      },
      "id": "8580229a-db8b-4d34-a514-54b30490b921",
      "name": "Run SQL query",
      "type": "n8n-nodes-base.mySql",
      "position": [
        800,
        940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "QonuFF6AfGffP6d7",
          "name": "104.167.196.118 : 4000 (3306)"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aa55e186-1535-4923-aee4-e088ca69575b",
              "name": "output",
              "type": "string",
              "value": "=Question:\n{{ $('When chat message received').item.json.chatInput }}\n\nSQL request:\n{{ $json.query }}\n\nSQL result:\n```markdown\n{{ $json.textOutput }}\n```"
            }
          ]
        },
        "options": {}
      },
      "id": "7ae653ea-0e96-4544-8c22-0b6f57c3e40d",
      "name": "Prepare final output",
      "type": "n8n-nodes-base.set",
      "position": [
        2080,
        2780
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "id": "4bc0b259-4be4-4f0f-9428-d856c570605c",
      "name": "Combine query result and chat answer",
      "type": "n8n-nodes-base.merge",
      "position": [
        1880,
        2780
      ],
      "typeVersion": 3,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {
              "followRedirects": true,
              "maxRedirects": 21
            }
          },
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1540,
        2640
      ],
      "id": "70d3381e-ae22-40fc-8de5-e4e9936b46c5",
      "name": "HTTP Request",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.query }}",
        "options": {}
      },
      "id": "bbc4ae6e-1ad1-4ac1-b6ba-d6ac8a47ca2f",
      "name": "Run SQL query tmplt",
      "type": "n8n-nodes-base.mySql",
      "position": [
        980,
        940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "oUon8ECO0bjjL9bn",
          "name": "AISandbox"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appGV8vCDX8WGdmJG",
          "mode": "list",
          "cachedResultName": "Direct Query",
          "cachedResultUrl": "https://airtable.com/appGV8vCDX8WGdmJG"
        },
        "table": {
          "__rl": true,
          "value": "tblNLhT1EBPCNCxQc",
          "mode": "list",
          "cachedResultName": "Direct Query Executions",
          "cachedResultUrl": "https://airtable.com/appGV8vCDX8WGdmJG/tblNLhT1EBPCNCxQc"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "sessionId": "={{ $('When chat message received').item.json.sessionId }}",
            "chatInput": "={{ $('When chat message received').item.json.chatInput }}",
            "request": "={{ $('Extract SQL query').item.json.query }}",
            "response": "={{ $('Combine query result and chat answer').item.json.textOutput }}",
            "stopTime": "={{ $json.stopTime }}",
            "time": "={{ $json.executionTimeReadable }}",
            "startTime": "={{ $('Template or LLM').item.json.original_input.Start_time }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "startTime",
              "displayName": "startTime",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "chatInput",
              "displayName": "chatInput",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "request",
              "displayName": "request",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "response",
              "displayName": "response",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "stopTime",
              "displayName": "stopTime",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "time",
              "displayName": "time",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Ok",
                  "value": "Ok"
                },
                {
                  "name": "Fail",
                  "value": "Fail"
                }
              ],
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        2260,
        3020
      ],
      "id": "e5981541-bd25-4848-86ab-8db4e9ae11cd",
      "name": "Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "0k6jxJu0tQwdczzt",
          "name": "USDB_Airtable_logs"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=SELECT name\nFROM sys.tables"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 1000000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -540,
        2100
      ],
      "id": "372741d5-17d3-4f90-9b9b-36b07d2c48fc",
      "name": "LIST ALL tables"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://38.107.232.33:4000/mssql/execute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=EXEC sp_columns '{{ $json.name }}';"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 1000000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -340,
        2100
      ],
      "id": "f7d5ab5c-c5d0-4acd-8007-248ff892dbcf",
      "name": "EXTRACT Schemas",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "764176d6-3c89-404d-9c71-301e8a406a68",
              "name": "table",
              "type": "string",
              "value": "={{ $('LIST ALL tables').item.json.Tables_in_usdb }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "7473d5e6-5e1c-49d6-a760-b6b08d535060",
      "name": "Add table name column",
      "type": "n8n-nodes-base.set",
      "position": [
        -140,
        2100
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User Message is:\n{{ $('When chat message received').item.json.chatInput }}\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Role\nYou are an AI assistant who as a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversation and provide responses that are coherent and relevant to the topic at hand. You are capable to fulfill different requests from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. Additionally, you are able to use tools to perform tasks as required.\n\n# Instructions\nGet the user request and translate human natural language and translated into MsSQL queries to use with against the USDB.\nYou will take into consideration the USDB tables when formulating the MsSQL queries. Your goal is to be a useful expert assitant that can aid the user in exploring the USDB by asking question in natural language and developing insights or gathering complex information while asking written or spoken questions. \n\nTake into consideration the USDB Table Schema while formulating the MsSQL queries:\n{{ $('Extract data from file1').item.json.data }}\n\n# Requirements:\n- Ensure the SQL query is syntactically correct.\n- Do not include any destructive operations (e.g., DROP, DELETE).\n- always use LIKE for filters never explicit names. \n- Dont Limit the data\n- The Current Date = {{ $now }}\n- ONLY RETURN THE SQL QUERY AND NOTHING ELSE\n\n# Rules\nWhen generating Microsoft SQL Server (MSSQL) queries:\n1. Always write defensive code that handles NULL values and multiple/empty results\n2. Use appropriate table hints like WITH (NOLOCK) for read operations\n3. For subqueries that might return multiple rows, use IN instead of = or use TOP with ORDER BY\n4. When dealing with dates, use CONVERT or explicit date formats\n5. Include appropriate schema prefixes (dbo.)\n6. Write queries that will not cause timeouts on large tables\n7. Avoid constructs known to cause \"Internal server error\" issues in MSSQL\n\n\n# When to use this tool\nUse this tool when the user asks about:\n- Current date or time\n- Today's date\n- What day of the week it is\n- How many days into the month/year we are\n- Month-to-date or year-to-date timeframes\n- Comparisons to last month or last year\n- Business reporting periods\n- Any time-related calculations\n\n# Example trigger phrases:\n- \"What's today's date?\"\n- \"What day of the week is it?\"\n- \"How many days are we into the month?\"\n- \"What's the month-to-date period?\"\n- \"What's the date range for year-to-date?\"\n- \"How does this month compare to last month?\"\n- \"What's the current month and quarter?\"\n\n# What this tool returns\nThis tool provides comprehensive date and time information including:\n- Current timestamp, date, and time\n- Day, month, year information\n- Week, month, quarter, and year timeframes \n- MTD (Month-to-Date) and YTD (Year-to-Date) periods\n- MOM (Month-over-Month) and YOY (Year-over-Year) comparison dates\n\n# How to use the response\nThe tool returns a JSON object with nested properties. To access specific information:\n- For current date: response.current.date\n- For MTD: response.timeframes.mtd\n- For YOY comparisons: response.comparisons.yoy\n\n# Business context\nThis tool is especially valuable for:\n- Financial reporting periods\n- Sales comparisons across time periods\n- Business analytics and KPI tracking\n- Scheduling and planning activities\n\n# When NOT to use this tool\nDon't use this tool for:\n- Historical dates (dates in the past) that aren't relative to today\n- Future date calculations beyond simple relative periods\n- Complex calendar manipulations\n- Timezone conversions requiring specific rules\n-->\n\n\n<userStyle>\n  Normal\n</userStyle>\n\n\n# Examples\n​ <examples>\n  <example>\n    Natural Language Query: \"What is the earliest and latest datapoints in the dataset?\"\n    SQL Query:\n    SELECT \n      MIN(EarliestDate) AS earliest_date,\n      MAX(LatestDate) AS latest_date\n    FROM (\n      SELECT MIN(ChangedOn) AS EarliestDate, MAX(ChangedOn) AS LatestDate FROM dbo.LISTINGS WITH (NOLOCK) WHERE ChangedOn IS NOT NULL\n      UNION ALL\n      SELECT MIN(SalesDate), MAX(SalesDate) FROM dbo.LISTINGS WITH (NOLOCK) WHERE SalesDate IS NOT NULL\n      UNION ALL\n      SELECT MIN(CreatedOn), MAX(CreatedOn) FROM dbo.VINS WITH (NOLOCK) WHERE CreatedOn IS NOT NULL\n      UNION ALL\n      SELECT MIN(SalesDateStart), MAX(SalesDateEnd) FROM dbo.HISTORY WITH (NOLOCK) WHERE SalesDateStart IS NOT NULL AND SalesDateEnd IS NOT NULL\n    ) AS DateRanges;\n  </example>\n  \n  <example>\n    Natural Language Query: \"Count how many rows in the entire dataset\"\n    SQL Query:\n    SELECT \n      (SELECT COUNT_BIG(*) FROM dbo.LISTINGS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.DEALERS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.VINS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.HISTORY WITH (NOLOCK)) AS total_rows;\n  </example>\n  \n  <example>\n    Natural Language Query: \"What are the top 10 most frequent vehicle makes?\"\n    SQL Query:\n    SELECT TOP 10 WITH TIES\n      SpecMake AS car_make,\n      COUNT_BIG(*) AS occurrences\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE SpecMake IS NOT NULL\n    GROUP BY SpecMake\n    ORDER BY occurrences DESC;\n  </example>\n  \n  <example>\n    Natural Language Query: \"Find all CARMAX sales in 2024\"\n    SQL Query:\n    SELECT COUNT_BIG(*) AS total_sales \n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE DEALERS_ID IN (SELECT DEALERS_ID FROM dbo.DEALERS WITH (NOLOCK) WHERE Name = 'CARMAX') \n      AND SalesDate IS NOT NULL\n      AND SalesDate >= CONVERT(DATE, '2024-01-01') \n      AND SalesDate < CONVERT(DATE, '2025-01-01');\n  </example>\n  \n  <example>\n    Natural Language Query: \"Which states have the most car listings?\"\n    SQL Query:\n    SELECT TOP 10\n      StateCode,\n      COUNT_BIG(*) AS listing_count\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE StateCode IS NOT NULL\n    GROUP BY StateCode\n    ORDER BY listing_count DESC;\n  </example>\n  \n  <example>\n    Natural Language Query: \"What's the average price of Toyota cars by model?\"\n    SQL Query:\n    SELECT \n      SpecModel,\n      AVG(CAST(ListingPrice AS DECIMAL(10,2))) AS avg_price,\n      COUNT_BIG(*) AS sample_size\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE SpecMake = 'Toyota' \n      AND SpecModel IS NOT NULL\n      AND ListingPrice IS NOT NULL\n      AND ListingPrice > 0\n    GROUP BY SpecModel\n    HAVING COUNT_BIG(*) > 5\n    ORDER BY avg_price DESC;\n  </example>\n</examples>\n\n#Additional context\n - date time\n - context about the business\n\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else. Make sure you format markdown tables properly.):\n{{ $('When chat message received').item.json.chatInput }}\n{{ $json.original_input.chatinput }}",
          "returnIntermediateSteps": "={{ true }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        480,
        2820
      ],
      "id": "0a255659-643f-4777-a03f-cae820514dd8",
      "name": "USDB AI Agent"
    },
    {
      "parameters": {
        "content": "# AGENT WITH TOOLS (SQL)\n\n## Run this part only once (READ SCHEMA)\nThis section:\n* loads a list of all tables from the USDB database hosted on 10.20.30.21\n* extracts the database schema for each table and adds the table name\n* converts the schema into a binary JSON format\n* saves the schema `./usdb_mysql.json` file locally\n\n***Now you can use chat to \"talk\" to your data!*** 🎉",
        "height": 486,
        "width": 1665,
        "color": 3
      },
      "id": "89a2c89f-2d85-489e-9370-5316b444295e",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1140,
        1800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "gpt-4-turbo",
        "options": {
          "temperature": 0.1
        }
      },
      "id": "d784c002-8485-4b73-aba9-1f204fa005df",
      "name": "OpenAI Chat1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        420,
        3000
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "D09ujHRZlS7g66tq",
          "name": "USDB"
        }
      }
    },
    {
      "parameters": {
        "content": "### LangChain AI Agent's system prompt is modified.\nIt uses only the database schema to generate SQL queries. The agent creates these queries but does not execute them. Instead, it passes them to subsequent nodes.\n\n**Example:**\n\"Can you show me the list of all German customers?\" \n\nQueries are generated only when necessary; for some requests, a query may not be needed. This is because certain questions can be answered directly without SQL execution.\n\n**Example:**\n\"Can you list me all tables?\"",
        "height": 955,
        "width": 2106,
        "color": 6
      },
      "id": "88bce765-bb6c-43f6-a629-1d9edb4dd47b",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        2320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## On every chat message:\n\n* The workflow gets the data from the local schema file and extracts it as a JSON object. This way, we achieve two important improvements:\n  * faster processing time as we don't need to fetch the schema for each table from a slow remote database\n  * the Agent will know database structure without seeing the actual data\n* DB schema is then converted into a long string, JSON fields from the Chat Trigger are added before they are entered into the Agent node.\n",
        "height": 949,
        "width": 1523,
        "color": 6
      },
      "id": "0eec58c1-30d2-447a-ae82-acb6ff26ca61",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1140,
        2320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "height": 106,
        "width": 2125
      },
      "id": "a236d2c7-c1ba-446c-b950-a871084badb2",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        1640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "",
        "height": 106,
        "width": 2125
      },
      "id": "8b9d4568-c3a9-4e8e-bb74-1b46a594091d",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3480,
        620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -800,
        2120
      ],
      "id": "d47424d7-4908-4742-ab9d-0eee1c36c0b4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.chatInput }}",
                    "rightValue": "={{ \"/start\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e9cd41d3-869f-42ac-8fc1-4fa7cc946c6a"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -800,
        2660
      ],
      "id": "7d975764-9824-49c1-9d96-895a230c0dab",
      "name": "Switch1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1000,
        2880
      ],
      "id": "12c0413e-00c6-4b86-afe2-02c8a664ed17",
      "name": "When chat message received",
      "webhookId": "f0b92997-6084-43dd-914e-55bf2f6b5c28"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "audio",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1560,
        2520
      ],
      "id": "fcf4cb73-c272-4aae-b3b3-d80d69568571",
      "name": "OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.files[0].url_private_download }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "slackOAuth2Api",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "audio"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1720,
        2520
      ],
      "id": "cc6a3a1d-3667-4e67-8d1f-6c4027fd4cde",
      "name": "Dwnld_Audio1",
      "credentials": {
        "slackOAuth2Api": {
          "id": "7VOxhQHkBloxHtkn",
          "name": "syc-n8n"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9569b209-0827-4fcd-96e8-1091a15d68e0",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1640,
        2740
      ],
      "id": "a801bd50-045d-441f-9212-f282af3b2271",
      "name": "Text Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "61c23cad-6c72-464e-9947-b7f309c9b994",
              "leftValue": "={{ $json.user }}",
              "rightValue": "={{\"D089ZDPG57X\"}}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2120,
        2660
      ],
      "id": "b480e3cc-9cab-4d02-947e-eec7ebf6d125",
      "name": "Filter1"
    },
    {
      "parameters": {
        "trigger": [
          "message"
        ],
        "channelId": {
          "__rl": true,
          "value": "={{ \"D089ZDPG57X\" }}",
          "mode": "id"
        },
        "options": {
          "resolveIds": false
        }
      },
      "id": "7e788357-6b11-44cc-b45a-9a839ce6baf0",
      "name": "Slack Trigger",
      "type": "n8n-nodes-base.slackTrigger",
      "position": [
        -2300,
        2660
      ],
      "webhookId": "cc2d1f3f-c366-48a5-9285-b424f00504cf",
      "typeVersion": 1,
      "credentials": {
        "slackApi": {
          "id": "OjRpDB3gj10WwGnG",
          "name": "SYCn8n Bot Token"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1380,
        2660
      ],
      "id": "9071a455-4b46-40b1-b54a-ca6d9ea39b32",
      "name": "Merge"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "584c8c90-4cc3-43ea-aac0-d1762ba79d0d",
                    "leftValue": "{{ $json.files[0].mimetype }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "audio/mp4",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "bb9fc3cb-1c38-4fc3-8ed0-896280711d84"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1ecab1e4-02c7-490e-82e5-f9f701140f00",
                    "leftValue": "={{ $json.files[0].mimetype }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1920,
        2660
      ],
      "id": "fead85ee-e12b-4464-9c64-171333add7e3",
      "name": "Switch2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "82fed747-df46-45df-abaa-0629131fe5db",
              "name": "Start_time",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        2660
      ],
      "id": "2da28234-45ac-492d-b1c2-d81fcda8e815",
      "name": "Start_Time"
    },
    {
      "parameters": {
        "content": "",
        "height": 946,
        "width": 1245
      },
      "id": "93b79683-fc38-40e7-a126-60a89846c018",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2400,
        2320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3000,
        2760
      ],
      "id": "9123ad35-598f-4dff-9392-d5a4c1b93c1e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dbsbEP9NpcetZP6N",
          "name": "Research Assistant"
        }
      }
    },
    {
      "parameters": {
        "content": "## On every chat message:\n\n* The workflow gets the data from the local schema file and extracts it as a JSON object. This way, we achieve two important improvements:\n  * faster processing time as we don't need to fetch the schema for each table from a slow remote database\n  * the Agent will know database structure without seeing the actual data\n* DB schema is then converted into a long string, JSON fields from the Chat Trigger are added before they are entered into the Agent node.\n",
        "height": 669,
        "width": 1243,
        "color": 5
      },
      "id": "0f6674ba-a10c-4662-b9b3-033a94c4e8c0",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2760,
        2220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}",
        "contextWindowLength": 50
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3180,
        2680
      ],
      "id": "7236172e-c21b-4019-9df4-186556d1a231",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "fileSelector": "./usdb_sql.json",
        "options": {}
      },
      "id": "ad8a1cea-1426-4e0e-84e7-1dbd5494ddcf",
      "name": "Load the schema from the local file1",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        -560,
        2660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42abd24e-419a-47d6-bc8b-7146dd0b8314",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $('Switch1').item.json.sessionId }}"
            },
            {
              "id": "39244192-a1a6-42fe-bc75-a6fba1f264df",
              "name": "action",
              "type": "string",
              "value": "={{ $('Switch1').item.json.action }}"
            },
            {
              "id": "f78c57d9-df13-43c7-89a7-5387e528107e",
              "name": "chatinput",
              "type": "string",
              "value": "= {{ $('Switch1').item.json.chatInput }}"
            },
            {
              "id": "e42b39eb-dfbd-48d9-94ed-d658bdd41454",
              "name": "schema",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "22b91826-3682-4278-a069-2b5bfa5ff381",
      "name": "Combine schema data and chat input1",
      "type": "n8n-nodes-base.set",
      "position": [
        2940,
        2480
      ],
      "executeOnce": true,
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "f08802f4-a773-4889-803a-18e09950ab8e",
      "name": "Extract data from file1",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -360,
        2660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=EXEC sp_columns '{{ $json.name }}';"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2260,
        2440
      ],
      "id": "9d4ae333-14dc-4c09-b911-27f963a67e75",
      "name": "Microsoft SQL1",
      "credentials": {
        "microsoftSql": {
          "id": "BbAMiDytg4JU7Jas",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User Query:\n{{ $json.chatinput }}",
        "options": {
          "systemMessage": "=# Role\nYou are a world-class MsSQL Developer. \n\n# Task\nI want you to read a user query in natural language, then convert it to an accurate MsSQL SQL query with the correct syntax that retrieves the relevant data from a USDB dataset. Ensure the queries are aligned with user intent, structured correctly, and safe to execute.\n\n# Context\nYou are working with a dataset containing USDB vehicle data, including the following schema:\n{{ $json.schema }}\n\n\n## **Table Overview:**\nUsers may ask various analytical questions related to listings, dealers, VINs, etc. Your role is to accurately interpret the user's intent, convert the query into MsSQL using the provided tool, execute it, and return the relevant insights.\n\n\n# **Detailed Instructions:**\n1. **Understand User Intent**  \n   - Analyze the user's query to determine the required dataset.\n   - Identify filters, date ranges, groupings, and aggregation requirements.\n   - Enrich the user's query. \n\n2. **SQL Query Generation**  \n   - Convert the enriched natural language query into a SQL query.\n   - Pass **only the enriched natural language query and relevant columns & filtering** to the tool to generate the query dynamically.\n   - Ensure accuracy in column selection and handling of nested JSON-like fields.\n\n3. **Present Results**: Deliver the query results to the user in a concise and easy-to-understand format. Avoid presenting SQL code in your final response.\n\n4. **Handle Missing Data**: If the requested data doesn't exist or is unavailable, inform the user politely and suggest any alternative queries if possible.\n\n## **Output Requirements**\n- **Concise and Clear Summaries** – Only present the interpreted query results, without exposing SQL code.\n- **Polite Handling of Missing Data** – If no relevant data is found, provide a friendly response with context.\n- **No SQL Code in Responses** – Avoid sharing raw SQL queries unless explicitly requested.\n\n---\n​ <examples>\n  <example>\n    Natural Language Query: \"What is the earliest and latest datapoints in the dataset?\"\n    SQL Query:\n    SELECT \n      MIN(EarliestDate) AS earliest_date,\n      MAX(LatestDate) AS latest_date\n    FROM (\n      SELECT MIN(ChangedOn) AS EarliestDate, MAX(ChangedOn) AS LatestDate FROM dbo.LISTINGS WITH (NOLOCK) WHERE ChangedOn IS NOT NULL\n      UNION ALL\n      SELECT MIN(SalesDate), MAX(SalesDate) FROM dbo.LISTINGS WITH (NOLOCK) WHERE SalesDate IS NOT NULL\n      UNION ALL\n      SELECT MIN(CreatedOn), MAX(CreatedOn) FROM dbo.VINS WITH (NOLOCK) WHERE CreatedOn IS NOT NULL\n      UNION ALL\n      SELECT MIN(SalesDateStart), MAX(SalesDateEnd) FROM dbo.HISTORY WITH (NOLOCK) WHERE SalesDateStart IS NOT NULL AND SalesDateEnd IS NOT NULL\n    ) AS DateRanges;\n  </example>\n  \n  <example>\n    Natural Language Query: \"Count how many rows in the entire dataset\"\n    SQL Query:\n    SELECT \n      (SELECT COUNT_BIG(*) FROM dbo.LISTINGS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.DEALERS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.VINS WITH (NOLOCK)) +\n      (SELECT COUNT_BIG(*) FROM dbo.HISTORY WITH (NOLOCK)) AS total_rows;\n  </example>\n  \n  <example>\n    Natural Language Query: \"What are the top 10 most frequent vehicle makes?\"\n    SQL Query:\n    SELECT TOP 10 WITH TIES\n      SpecMake AS car_make,\n      COUNT_BIG(*) AS occurrences\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE SpecMake IS NOT NULL\n    GROUP BY SpecMake\n    ORDER BY occurrences DESC;\n  </example>\n  \n  <example>\n    Natural Language Query: \"Find all CARMAX sales in 2024\"\n    SQL Query:\n    SELECT COUNT_BIG(*) AS total_sales \n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE DEALERS_ID IN (SELECT DEALERS_ID FROM dbo.DEALERS WITH (NOLOCK) WHERE Name = 'CARMAX') \n      AND SalesDate IS NOT NULL\n      AND SalesDate >= CONVERT(DATE, '2024-01-01') \n      AND SalesDate < CONVERT(DATE, '2025-01-01');\n  </example>\n  \n  <example>\n    Natural Language Query: \"Which states have the most car listings?\"\n    SQL Query:\n    SELECT TOP 10\n      StateCode,\n      COUNT_BIG(*) AS listing_count\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE StateCode IS NOT NULL\n    GROUP BY StateCode\n    ORDER BY listing_count DESC;\n  </example>\n  \n  <example>\n    Natural Language Query: \"What's the average price of Toyota cars by model?\"\n    SQL Query:\n    SELECT \n      SpecModel,\n      AVG(CAST(ListingPrice AS DECIMAL(10,2))) AS avg_price,\n      COUNT_BIG(*) AS sample_size\n    FROM dbo.LISTINGS WITH (NOLOCK)\n    WHERE SpecMake = 'Toyota' \n      AND SpecModel IS NOT NULL\n      AND ListingPrice IS NOT NULL\n      AND ListingPrice > 0\n    GROUP BY SpecModel\n    HAVING COUNT_BIG(*) > 5\n    ORDER BY avg_price DESC;\n  </example>\n</examples>\n\n\n\n\n# Notes\n- You must only use the schema above to correctly identify the column names.\n- If the column name is not clear from user's query, then ask them to clarify.\n- keep the response concise.\n- If the response is not accurate, ask user to clarify.\n- Always call the database query tool before answering, never assume the answer without having the data\n- The Current Date = {{ $now }}\n\n",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        3120,
        2480
      ],
      "id": "8d029525-676f-44c0-bb88-4744f7846bc2",
      "name": "USDB Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        560,
        3000
      ],
      "id": "7b9f5a5f-15bb-44b0-91c2-53eed1eacf37",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "jsCode": "// Access the items from the previous node (MySQL node)\nconst queryResults = items.map(item => item.json);\n\n// Check if there are any results\nif (queryResults.length === 0) {\n  return [{ json: { textOutput: \"No results found for your query.\" } }];\n}\n\n// Extract column names (headers)\nconst headers = Object.keys(queryResults[0]);\n\n// Initialize an array to hold formatted lines\nlet lines = [];\n\n// Create a header row\nlines.push(headers.join(' | '));\nlines.push(headers.map(() => '---').join(' | '));\n\n// Detect if this is a comparison query (contains percentage or difference columns)\nconst isComparisonQuery = headers.some(h => \n  h.includes('percent') || h.includes('diff') || h.includes('change'));\n\n// Iterate over each result item\nqueryResults.forEach(item => {\n  const row = headers.map(header => {\n    const value = item[header];\n    \n    // Format numbers with thousands separators\n    if (typeof value === 'number' && !isNaN(value)) {\n      // Format percentages\n      if (header.includes('percent') || header.includes('change')) {\n        return `${(value * 100).toFixed(2)}%`;\n      }\n      // Format currency\n      else if (header.includes('price') || header.includes('cost')) {\n        return `$${value.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;\n      }\n      // Format regular numbers\n      else if (value > 1000) {\n        return value.toLocaleString('en-US');\n      }\n    }\n    \n    return value;\n  });\n  \n  lines.push(row.join(' | '));\n});\n\n// Join all lines into a single string with line breaks\nconst textOutput = lines.join('\\n');\n\n// Return the formatted text as a new field\nreturn [{ json: { textOutput } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        2640
      ],
      "id": "e5ef801c-a5dc-4870-b00c-0cf28cc6483c",
      "name": "Results Formatter"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Template matching function for common dealer queries\nconst templateMatchers = [\n  {\n    // Price adjustment queries\n    pattern: /(how many|how often|number of) times did (.*?) adjust prices? (before selling)? .*?(last month|YTD|last year|last week|last 90 days)/i,\n    templateName: 'price_adjustments',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[2],\n      time_period: matches[4]\n    })\n  },\n  {\n    // Inventory turn rate queries\n    pattern: /(what was|how was) (.*?)('s)? inventory turn rate .*?(last month|YTD|last year|last week|last 90 days)/i,\n    templateName: 'inventory_turn_rate',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[2],\n      time_period: matches[4]\n    })\n  },\n  {\n    // Inventory turn rate comparison\n    pattern: /how did (.*?)('s)? inventory turn rate compare to (brand|non-brand) dealers (last month|YTD|last year|last week|last 90 days)/i,\n    templateName: 'inventory_turn_rate_comparison',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[1],\n      comparison_group: matches[3],\n      time_period: matches[4]\n    })\n  },\n  {\n    // Sales count queries\n    pattern: /how many cars did (.*?) sell (last day|last week|last month|MTD|YTD|MOM|YOY|last 90 days|last 1Y|last 3Y|last 5Y)/i,\n    templateName: 'sales_count',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[1],\n      time_period: matches[2]\n    })\n  },\n  {\n    // Sales velocity queries\n    pattern: /how (fast|quickly) did (.*?) sell (cars|vehicles) (last week|last month|MTD|MOM|YTD|YOY|last 90 days|last 1Y|last 3Y)/i,\n    templateName: 'sales_velocity',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[2],\n      vehicle_type: matches[3],\n      time_period: matches[4]\n    })\n  },\n  {\n    // Market comparison queries\n    pattern: /how did (.*?)('s)? (car sales|sales velocity) compare to (market average|national average|other dealers) (last week|last month|YTD|YOY|last 90 days)/i,\n    templateName: 'market_comparison',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[1],\n      comparison_type: matches[3],\n      comparison_group: matches[4],\n      time_period: matches[5]\n    })\n  },\n  {\n    // Radius comparison\n    pattern: /how did (.*?)('s)? (car sales|sales velocity) compare to (.*?) (within a (\\d+) mile radius) (last week|last month|YTD|YOY|last 90 days)/i,\n    templateName: 'radius_comparison',\n    extractParams: (matches, question) => ({ \n      dealer_name: matches[1],\n      comparison_type: matches[3],\n      dealer_group: matches[4],\n      radius: matches[6],\n      time_period: matches[7]\n    })\n  }\n];\n\n// Query templates with parameterized SQL\nconst queryTemplates = {\n  'price_adjustments': `\n    SELECT \n        d.Name AS DealerName,\n        AVG(CAST(ISNULL(l.PriceChanges, 0) AS FLOAT)) AS AvgPriceAdjustments,\n        COUNT_BIG(*) AS TotalSales\n    FROM \n        dbo.LISTINGS l WITH (NOLOCK)\n        INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n    WHERE \n        d.Name LIKE '%{{dealer_name}}%'\n        AND l.SalesDate IS NOT NULL\n        AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n        AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n    GROUP BY \n        d.Name;\n  `,\n  'inventory_turn_rate': `\n    SELECT \n        d.Name AS DealerName,\n        COUNT_BIG(l.LISTINGS_ID) AS TotalInventory,\n        COUNT_BIG(CASE WHEN l.SalesDate IS NOT NULL THEN 1 END) AS TotalSold,\n        AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell,\n        CAST(COUNT_BIG(CASE WHEN l.SalesDate IS NOT NULL THEN 1 END) * 1.0 / \n            NULLIF(COUNT_BIG(l.LISTINGS_ID), 0) AS DECIMAL(10,2)) AS TurnRate\n    FROM \n        dbo.LISTINGS l WITH (NOLOCK)\n        INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n    WHERE \n        d.Name LIKE '%{{dealer_name}}%'\n        AND l.ChangedOn >= CONVERT(DATE, '{{start_date}}') \n        AND l.ChangedOn < CONVERT(DATE, '{{end_date}}')\n    GROUP BY \n        d.Name;\n  `,\n  'inventory_turn_rate_comparison': `\n    WITH DealerData AS (\n        SELECT \n            d.Name AS DealerName,\n            d.DEALERS_ID,\n            COUNT_BIG(l.LISTINGS_ID) AS TotalInventory,\n            COUNT_BIG(CASE WHEN l.SalesDate IS NOT NULL THEN 1 END) AS TotalSold,\n            AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell,\n            CAST(COUNT_BIG(CASE WHEN l.SalesDate IS NOT NULL THEN 1 END) * 1.0 / \n                NULLIF(COUNT_BIG(l.LISTINGS_ID), 0) AS DECIMAL(10,2)) AS TurnRate,\n            MAX(l.SpecMake) AS MainBrand\n        FROM \n            dbo.LISTINGS l WITH (NOLOCK)\n            INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n        WHERE \n            d.Name LIKE '%{{dealer_name}}%'\n            AND l.ChangedOn >= CONVERT(DATE, '{{start_date}}') \n            AND l.ChangedOn < CONVERT(DATE, '{{end_date}}')\n        GROUP BY \n            d.Name, d.DEALERS_ID\n    ),\n    ComparisonData AS (\n        SELECT \n            {{comparison_select_clause}},\n            COUNT_BIG(l.LISTINGS_ID) AS TotalInventory,\n            COUNT_BIG(CASE WHEN l.SalesDate IS NOT NULL THEN 1 END) AS TotalSold,\n            AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell,\n            CAST(COUNT_BIG(CASE WHEN l.SalesDate IS NOT NULL THEN 1 END) * 1.0 / \n                NULLIF(COUNT_BIG(l.LISTINGS_ID), 0) AS DECIMAL(10,2)) AS TurnRate\n        FROM \n            dbo.LISTINGS l WITH (NOLOCK)\n            INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n            CROSS JOIN DealerData dd\n        WHERE \n            d.DEALERS_ID <> dd.DEALERS_ID\n            {{comparison_where_clause}}\n            AND l.ChangedOn >= CONVERT(DATE, '{{start_date}}') \n            AND l.ChangedOn < CONVERT(DATE, '{{end_date}}')\n        GROUP BY \n            {{comparison_group_clause}}\n    )\n    SELECT \n        dd.DealerName,\n        dd.TurnRate AS DealerTurnRate,\n        AVG(cd.TurnRate) AS ComparisonTurnRate,\n        dd.TurnRate - AVG(cd.TurnRate) AS TurnRateDifference,\n        CASE \n            WHEN AVG(cd.TurnRate) = 0 THEN NULL \n            ELSE (dd.TurnRate - AVG(cd.TurnRate)) / AVG(cd.TurnRate) * 100 \n        END AS PercentDifference\n    FROM \n        DealerData dd\n    CROSS JOIN\n        ComparisonData cd\n    GROUP BY \n        dd.DealerName, dd.TurnRate;\n  `,\n  'sales_count': `\n    SELECT \n        d.Name AS DealerName,\n        COUNT_BIG(*) AS TotalSales\n    FROM \n        dbo.LISTINGS l WITH (NOLOCK)\n        INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n    WHERE \n        d.Name LIKE '%{{dealer_name}}%'\n        AND l.SalesDate IS NOT NULL\n        AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n        AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n    GROUP BY \n        d.Name;\n  `,\n  'sales_velocity': `\n    SELECT \n        d.Name AS DealerName,\n        COUNT_BIG(*) AS TotalSales,\n        AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell\n    FROM \n        dbo.LISTINGS l WITH (NOLOCK)\n        INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n    WHERE \n        d.Name LIKE '%{{dealer_name}}%'\n        AND l.SalesDate IS NOT NULL\n        AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n        AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n    GROUP BY \n        d.Name;\n  `,\n  'market_comparison': `\n    WITH DealerData AS (\n        SELECT \n            d.Name AS DealerName,\n            COUNT_BIG(*) AS TotalSales,\n            AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell\n        FROM \n            dbo.LISTINGS l WITH (NOLOCK)\n            INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n        WHERE \n            d.Name LIKE '%{{dealer_name}}%'\n            AND l.SalesDate IS NOT NULL\n            AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n            AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n        GROUP BY \n            d.Name\n    ),\n    MarketData AS (\n        SELECT \n            COUNT_BIG(*) AS TotalSales,\n            AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell\n        FROM \n            dbo.LISTINGS l WITH (NOLOCK)\n            INNER JOIN dbo.DEALERS d WITH (NOLOCK) ON l.DEALERS_ID = d.DEALERS_ID\n        WHERE \n            l.SalesDate IS NOT NULL\n            AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n            AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n    )\n    SELECT \n        dd.DealerName,\n        dd.TotalSales AS DealerSales,\n        m.TotalSales AS MarketSales,\n        dd.AvgDaysToSell AS DealerAvgDaysToSell,\n        m.AvgDaysToSell AS MarketAvgDaysToSell,\n        dd.AvgDaysToSell - m.AvgDaysToSell AS DaysToSellDifference,\n        CASE \n            WHEN m.AvgDaysToSell = 0 THEN NULL \n            ELSE (dd.AvgDaysToSell - m.AvgDaysToSell) / m.AvgDaysToSell * 100 \n        END AS PercentDifference\n    FROM \n        DealerData dd\n    CROSS JOIN\n        MarketData m;\n  `,\n  'radius_comparison': `\n    WITH DealerLocation AS (\n        SELECT \n            d.DEALERS_ID,\n            d.Name AS DealerName,\n            d.Latitude,\n            d.Longitude\n        FROM \n            dbo.DEALERS d WITH (NOLOCK)\n        WHERE \n            d.Name LIKE '%{{dealer_name}}%'\n            AND d.Latitude IS NOT NULL\n            AND d.Longitude IS NOT NULL\n    ),\n    DealerData AS (\n        SELECT \n            dl.DealerName,\n            COUNT_BIG(*) AS TotalSales,\n            AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell\n        FROM \n            dbo.LISTINGS l WITH (NOLOCK)\n            INNER JOIN DealerLocation dl ON l.DEALERS_ID = dl.DEALERS_ID\n        WHERE \n            l.SalesDate IS NOT NULL\n            AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n            AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n        GROUP BY \n            dl.DealerName\n    ),\n    NearbyDealers AS (\n        SELECT \n            d.DEALERS_ID,\n            d.Name AS DealerName,\n            d.Latitude,\n            d.Longitude,\n            dl.Latitude AS CenterLat,\n            dl.Longitude AS CenterLong,\n            (3959 * ACOS(COS(RADIANS(dl.Latitude)) * COS(RADIANS(d.Latitude)) * COS(RADIANS(d.Longitude) - RADIANS(dl.Longitude)) + SIN(RADIANS(dl.Latitude)) * SIN(RADIANS(d.Latitude)))) AS DistanceMiles\n        FROM \n            dbo.DEALERS d WITH (NOLOCK)\n            CROSS JOIN DealerLocation dl\n        WHERE \n            d.Latitude IS NOT NULL\n            AND d.Longitude IS NOT NULL\n            AND d.Name LIKE '%{{dealer_group}}%'\n            AND d.DEALERS_ID <> dl.DEALERS_ID\n    ),\n    RadiusData AS (\n        SELECT \n            nd.DealerName,\n            nd.DistanceMiles,\n            COUNT_BIG(*) AS TotalSales,\n            AVG(CAST(ISNULL(l.SalesDaysOld, 0) AS FLOAT)) AS AvgDaysToSell\n        FROM \n            dbo.LISTINGS l WITH (NOLOCK)\n            INNER JOIN NearbyDealers nd ON l.DEALERS_ID = nd.DEALERS_ID\n        WHERE \n            nd.DistanceMiles <= {{radius}}\n            AND l.SalesDate IS NOT NULL\n            AND l.SalesDate >= CONVERT(DATE, '{{start_date}}') \n            AND l.SalesDate < CONVERT(DATE, '{{end_date}}')\n        GROUP BY \n            nd.DealerName, nd.DistanceMiles\n    )\n    SELECT \n        dd.DealerName,\n        dd.TotalSales AS DealerSales,\n        AVG(rd.TotalSales) AS AvgRadiusSales,\n        dd.AvgDaysToSell AS DealerAvgDaysToSell,\n        AVG(rd.AvgDaysToSell) AS RadiusAvgDaysToSell,\n        dd.AvgDaysToSell - AVG(rd.AvgDaysToSell) AS DaysToSellDifference,\n        CASE \n            WHEN AVG(rd.AvgDaysToSell) = 0 THEN NULL \n            ELSE (dd.AvgDaysToSell - AVG(rd.AvgDaysToSell)) / AVG(rd.AvgDaysToSell) * 100 \n        END AS PercentDifference,\n        COUNT(rd.DealerName) AS DealersInRadius\n    FROM \n        DealerData dd\n    LEFT JOIN\n        RadiusData rd ON 1=1\n    GROUP BY \n        dd.DealerName, dd.TotalSales, dd.AvgDaysToSell;\n  `\n};\n\n// Get the user's question and current date\nconst userQuestion = $input.item.json.chatinput || \"\";\nconst now = new Date();\n\n// Detect time period and convert to actual dates\nfunction getDateRange(timePeriod) {\n  let startDate, endDate = new Date(now);\n  \n  if (timePeriod.includes('last day')) {\n    startDate = new Date(now);\n    startDate.setDate(startDate.getDate() - 1);\n  } else if (timePeriod.includes('last week')) {\n    startDate = new Date(now);\n    startDate.setDate(startDate.getDate() - 7);\n  } else if (timePeriod.includes('last month')) {\n    startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    endDate = new Date(now.getFullYear(), now.getMonth(), 0);\n  } else if (timePeriod.includes('MTD')) {\n    startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n  } else if (timePeriod.includes('YTD')) {\n    startDate = new Date(now.getFullYear(), 0, 1);\n  } else if (timePeriod.includes('MOM')) {\n    // Month over Month (current month vs previous month)\n    startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    endDate = new Date(now.getFullYear(), now.getMonth(), 0);\n  } else if (timePeriod.includes('YOY')) {\n    // Year over Year (current month this year vs same month last year)\n    startDate = new Date(now.getFullYear() - 1, now.getMonth(), 1);\n    endDate = new Date(now.getFullYear() - 1, now.getMonth() + 1, 0);\n  } else if (timePeriod.includes('last 90 days')) {\n    startDate = new Date(now);\n    startDate.setDate(startDate.getDate() - 90);\n  } else if (timePeriod.includes('last 1Y')) {\n    startDate = new Date(now);\n    startDate.setFullYear(startDate.getFullYear() - 1);\n  } else if (timePeriod.includes('last 3Y')) {\n    startDate = new Date(now);\n    startDate.setFullYear(startDate.getFullYear() - 3);\n  } else if (timePeriod.includes('last 5Y')) {\n    startDate = new Date(now);\n    startDate.setFullYear(startDate.getFullYear() - 5);\n  } else if (timePeriod.includes('last year')) {\n    startDate = new Date(now.getFullYear() - 1, 0, 1);\n    endDate = new Date(now.getFullYear() - 1, 11, 31);\n  } else {\n    // Default to last 30 days\n    startDate = new Date(now);\n    startDate.setDate(startDate.getDate() - 30);\n  }\n  \n  return {\n    start_date: startDate.toISOString().split('T')[0],\n    end_date: endDate.toISOString().split('T')[0]\n  };\n}\n\n// Helper function for comparison clauses\nfunction getComparisonClauses(comparisonGroup, dealerMainBrand) {\n  if (comparisonGroup === 'brand') {\n    return {\n      select: \"d.Name AS ComparisonDealer\",\n      where: `AND l.SpecMake = '${dealerMainBrand}'`,\n      group: \"d.Name\"\n    };\n  } else if (comparisonGroup === 'non-brand') {\n    return {\n      select: \"d.Name AS ComparisonDealer\",\n      where: `AND l.SpecMake <> '${dealerMainBrand}'`,\n      group: \"d.Name\"\n    };\n  } else {\n    return {\n      select: \"'All Dealers' AS ComparisonGroup\",\n      where: \"\",\n      group: \"'All Dealers'\"\n    };\n  }\n}\n\n// Try to match the question to a template\nlet matchedTemplate = null;\nlet templateParams = {};\n\nfor (const matcher of templateMatchers) {\n  const matches = userQuestion.match(matcher.pattern);\n  if (matches) {\n    matchedTemplate = matcher.templateName;\n    templateParams = matcher.extractParams(matches, userQuestion);\n    \n    // Add date params based on detected time period\n    const dateRange = getDateRange(templateParams.time_period || \"last month\");\n    templateParams.start_date = dateRange.start_date;\n    templateParams.end_date = dateRange.end_date;\n    \n    // Special handling for comparison queries\n    if (matchedTemplate === 'inventory_turn_rate_comparison') {\n      const mainBrand = \"Toyota\"; // This should be retrieved dynamically in production\n      const clauses = getComparisonClauses(templateParams.comparison_group, mainBrand);\n      templateParams.comparison_select_clause = clauses.select;\n      templateParams.comparison_where_clause = clauses.where;\n      templateParams.comparison_group_clause = clauses.group;\n    }\n    \n    break;\n  }\n}\n\n// If we matched a template, populate it with parameters\nif (matchedTemplate && queryTemplates[matchedTemplate]) {\n  let query = queryTemplates[matchedTemplate];\n  \n  // Replace template parameters\n  Object.keys(templateParams).forEach(key => {\n    query = query.replace(new RegExp(`{{${key}}}`, 'g'), templateParams[key]);\n  });\n  \n  // Output the populated template\n  return { \n    template_matched: true,\n    template_name: matchedTemplate,\n    template_params: templateParams,\n    query: query.trim(),\n    ...templateParams,\n    original_input: $input.item.json\n  };\n} else {\n  // No template matched, continue with normal LLM-based query generation\n  return { \n    template_matched: false,\n    query: null,\n    original_input: $input.item.json\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        2660
      ],
      "id": "4b524c5c-712a-4891-9b1b-b2140661dc3b",
      "name": "Query Templates Matcher"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.template_matched }}",
                    "rightValue": "=True",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e17b0650-ab6d-4a43-bc41-b8de6acccf31"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Template"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        220,
        2660
      ],
      "id": "407eff01-fba4-4ff5-8184-5691e8763245",
      "name": "Template or LLM"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b2126b70-9ce0-4541-b596-e2e32830bb57",
              "name": "stopTime",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2260,
        2780
      ],
      "id": "6f1c0405-f987-4a7d-993f-c7102b0fafe9",
      "name": "Stop_Time"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Get the SQL query from the previous node\nconst sqlQuery = $json[\"query\"];\n\n// Basic validation to prevent dangerous queries\nconst disallowedPatterns = [\n  /;\\\\s*--/, // End of statement with comment\n  /DROP\\\\s+TABLE/i,\n  /DELETE\\\\s+FROM/i,\n  /UPDATE\\\\s+/i,\n  /INSERT\\\\s+INTO/i,\n  /ALTER\\\\s+TABLE/i,\n];\n\n// Check for dangerous patterns\nfor (const pattern of disallowedPatterns) {\n  if (pattern.test(sqlQuery)) {\n    throw new Error(\"Generated SQL query contains disallowed operations.\");\n  }\n}\n\n// Validate proper JOIN conditions\nif (sqlQuery.includes(\"JOIN\") && !sqlQuery.includes(\"ON \")) {\n  throw new Error(\"JOIN without proper ON clause detected.\");\n}\n\n// Validate ORDER BY clause for TOP queries\nif (sqlQuery.includes(\"TOP \") && !sqlQuery.includes(\"ORDER BY\")) {\n  throw new Error(\"TOP query without ORDER BY clause detected.\");\n}\n\n// Validate date range calculations\nif (sqlQuery.includes(\"DATEADD\") || sqlQuery.includes(\"DATEDIFF\")) {\n  if (!sqlQuery.includes(\"IS NOT NULL\")) {\n    console.log(\"Warning: Date calculation without NULL check detected.\");\n  }\n}\n\n// If safe, pass the SQL query along\nreturn { query: sqlQuery };"
      },
      "id": "6e06e10c-7eff-43ae-a92a-27a1d3a4b2ea",
      "name": "Query Validation2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        2820
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": true
        }
      },
      "id": "93a6dd9d-c845-4816-9471-de0c2707001e",
      "name": "SQL template and AI queries",
      "type": "n8n-nodes-base.merge",
      "position": [
        1340,
        2640
      ],
      "typeVersion": 3,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Get start and stop times\nconst startTime = $('Template or LLM').first()?.json?.original_input?.Start_time;\nconst stopTime = new Date($input.first().json.stopTime); // Convert to Date object\n\n// Calculate the difference in milliseconds\nconst deltaMs = stopTime - startTime;\n\n// Convert to seconds (with 2 decimal places)\nconst deltaSeconds = (deltaMs / 1000).toFixed(2);\n\n// Convert to a more readable format if it's a longer duration\nlet readableDelta;\nif (deltaMs < 1000) {\n  readableDelta = `${deltaMs} ms`;\n} else if (deltaMs < 60000) {\n  readableDelta = `${deltaSeconds} seconds`;\n} else {\n  const minutes = Math.floor(deltaMs / 60000);\n  const seconds = ((deltaMs % 60000) / 1000).toFixed(2);\n  readableDelta = `${minutes} minutes and ${seconds} seconds`;\n}\n\n// Return both the original data and the time measurements\nreturn {\n  ...($input.item.json),\n  stopTime: new Date(stopTime).toISOString(),\n  executionTimeMs: deltaMs,\n  executionTimeSec: parseFloat(deltaSeconds),\n  executionTimeReadable: readableDelta\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        3020
      ],
      "id": "b92ce5de-91de-4155-a700-8fa944856b2b",
      "name": "Calculate Delta"
    }
  ],
  "pinData": {
    "When chat message received": [
      {
        "json": {
          "sessionId": "bc233a1aeae8430084494bb646ce5210",
          "action": "sendMessage",
          "chatInput": "What are the top dealers in Arizona?"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-13T07:39:24.180Z",
      "updatedAt": "2025-03-13T07:39:24.180Z",
      "id": "Ub8twoxVAlrzBUUv",
      "name": "Agent"
    }
  ],
  "triggerCount": 4,
  "updatedAt": "2025-04-08T16:12:01.000Z",
  "versionId": "ad670bce-8925-46d8-93c1-2935314eeef7"
}