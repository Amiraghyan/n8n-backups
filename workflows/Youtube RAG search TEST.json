{
  "active": false,
  "connections": {
    "Video Ref": {
      "main": [
        [
          {
            "node": "Get Video Subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Video": {
      "main": [
        [],
        [
          {
            "node": "Vectorise Subworkflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk Subtitles": {
      "main": [
        []
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Latest Youtube Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Subtitles": {
      "main": [
        [
          {
            "node": "Chunk Subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ignore Already Seen": {
      "main": [
        [
          {
            "node": "For Each Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vectorise Subworkflow": {
      "main": [
        [
          {
            "node": "For Each Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vectorise Subworkflow1": {
      "main": [
        [
          {
            "node": "Video Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Youtube Videos": {
      "main": [
        [
          {
            "node": "Ignore Already Seen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Read_Channels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read_Channels": {
      "main": [
        [
          {
            "node": "Get Latest Youtube Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-04-29T18:40:44.683Z",
  "id": "lmvo17HhxQyBqmip",
  "meta": {
    "templateId": "3288",
    "templateCredsSetupCompleted": true
  },
  "name": "Youtube RAG search TEST",
  "nodes": [
    {
      "parameters": {},
      "id": "fe5bfb5e-8f4b-468a-9bb8-35315a3a7c27",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        940,
        940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"downloadSubtitles\": true,\n  \"hasCC\": false,\n  \"hasLocation\": false,\n  \"hasSubtitles\": false,\n  \"is360\": false,\n  \"is3D\": false,\n  \"is4K\": false,\n  \"isBought\": false,\n  \"isHD\": false,\n  \"isHDR\": false,\n  \"isLive\": false,\n  \"isVR180\": false,\n  \"maxResultStreams\": 0,\n  \"maxResults\": 1,\n  \"maxResultsShorts\": 0,\n  \"preferAutoGeneratedSubtitles\": false,\n  \"saveSubsToKVS\": false,\n  \"startUrls\": [\n    {\n      \"url\": $json.url,\n      \"method\": \"GET\"\n    }\n  ],\n  \"subtitlesFormat\": \"vtt\",\n  \"subtitlesLanguage\": \"en\"\n}\n}}",
        "options": {}
      },
      "id": "d965c924-7e1a-4eec-a209-5632fedd7145",
      "name": "Get Video Subtitles",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2580,
        1040
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "fQaPmY6oVBw9CXvd",
          "name": "VAPI Header Auth"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fa613ce2-3a2f-42e4-9add-88df00efdb85",
              "name": "vtt",
              "type": "array",
              "value": "={{\nArray(\n  Math.ceil($json.subtitles[0].vtt.length/30_000)\n).fill(0)\n  .map((_,idx) => $json.subtitles[0].vtt.substr(idx*30_000,(idx * 30_000) + 30_000))\n}}"
            }
          ]
        },
        "options": {}
      },
      "id": "c49b5f93-b8d0-4e9d-94ad-482db14b5752",
      "name": "Chunk Subtitles",
      "type": "n8n-nodes-base.set",
      "position": [
        2780,
        1040
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "10cb1dd6-071d-4659-bb2f-0d3588ad0fc1",
      "name": "For Each Video",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1640,
        1040
      ],
      "typeVersion": 3
    },
    {
      "parameters": {},
      "id": "c5c48d3b-a117-41f5-a6cd-8ad8e395aced",
      "name": "Video Ref",
      "type": "n8n-nodes-base.noOp",
      "position": [
        2380,
        1040
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{ \"lmvo17HhxQyBqmip\" }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "18c1e669-c2ed-4e45-9fda-577e4e8677eb",
      "name": "Vectorise Subworkflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1860,
        1040
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "eaaf7640-6044-4ef1-97b7-77ac68401c69",
      "name": "Vectorise Subworkflow1",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        2180,
        1040
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                6
              ],
              "triggerAtHour": 6
            }
          ]
        }
      },
      "id": "4509685c-a331-4cca-ba7d-33c4f484e1fa",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        940,
        1120
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "removeItemsSeenInPreviousExecutions",
        "dedupeValue": "={{ $json.id }}",
        "options": {
          "scope": "node"
        }
      },
      "id": "1f780515-3d6c-4f3b-b5eb-d577fe51b117",
      "name": "Ignore Already Seen",
      "type": "n8n-nodes-base.removeDuplicates",
      "position": [
        1440,
        1040
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## 1. Fetch Latest Videos with [Apify.com](https://www.apify.com?fpr=414q6)\n[Learn more about Apify.com](https://www.apify.com?fpr=414q6) - [Youtube Scraper](https://apify.com/streamers/youtube-scraper?fpr=414q6)\n\nIf you want to save serious time and effort and avoid the low usage limits of the official Youtube API, then you probably want to sign-up for a third-party youtube scraper like the ones found on Apify. Here, I'm using a Youtube Scraper to get the latest videos and livestream recordings from the official n8n channel. Running them through a \"remove duplicates\" node ensures they aren't processed more than once.",
        "height": 560,
        "width": 1200,
        "color": 7
      },
      "id": "a2f65143-6824-48a0-87ad-8b45f890becc",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        860,
        760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"dateFilter\": \"year\",\n    \"downloadSubtitles\": false,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": false,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"maxResultStreams\": 0,\n    \"maxResults\": 200,\n    \"maxResultsShorts\": 0,\n    \"oldestPostDate\": \"2024-01-01\",\n    \"preferAutoGeneratedSubtitles\": false,\n    \"saveSubsToKVS\": false,\n    \"startUrls\": [\n        {\n            \"url\": \"{{ $json.channelUrl }}\",\n            \"method\": \"POST\"\n        }\n    ],\n    \"subtitlesLanguage\": \"en\"\n}",
        "options": {}
      },
      "id": "ba9d4798-20c5-47b6-9ad2-fc41bbfebab1",
      "name": "Get Latest Youtube Videos",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1260,
        1040
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "## 2. Get Video Transcript with [Apify.com](https://www.apify.com?fpr=414q6)\n[Learn more about subworkflows](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflowtrigger)\n\n**Note: You won't see this run in editor mode! It runs in the background - see executions tab!**\nI've chosen to use a subworkflow to help with performance as processing transcripts into embeddings tends to accumulate a lot of data client side if done otherwise. Here, we're once again using a Youtube scraper on Apify to download the video transcripts - note that technically, these are auto-generated subtitles but are good enough to serve our needs.",
        "height": 560,
        "width": 860,
        "color": 7
      },
      "id": "3869b148-ef47-4846-9f6c-3e6ed9a29c25",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2100,
        760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "**Fig 1. N8N Video Search Frontend**\n![screenshot of web frontend](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/lqd2giei1ap2owjgbuth#full-width)",
        "height": 420,
        "width": 540,
        "color": 7
      },
      "id": "f0c9a358-e8b8-46d9-9c9b-b70e970acc7c",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1500,
        2280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Try It Out!\n### Ever wanted to build your own RAG search over Youtube videos? Well, now you can! This n8n template shows how you can build a very capable Youtube search engine powered by Apify, Qdrant and your LLM of choice to quickly and efficiently browse over many videos for research or viewing pleasure.\n\nI originally started to template to ask questions on the \"n8n @ scale office-hours\" livestream videos but then extended it to include the latest videos on the official channel.\n\n**Check out a demo here**: [https://jimleuk.app.n8n.cloud/webhook/n8n_videos](https://jimleuk.app.n8n.cloud/webhook/n8n_videos)\n\n### How it works\n* Stage 1 is to collect the Youtube video transcripts into a vector database. For this, I've used Apify to scrape and Qdrant to store.\n* Transcripts are broken down into smaller chunks and carefully tagged with metadata to assist in later search and filtering.\n* Stage 2 is to build a web frontend for the user to query the vectorised transcripts. I'm using a webhook to serve a simple web app and API to dynamically fetch the results.\n* When searching for a video, I've opted to use Qdrant's search groups API which in this use-case, performs better as it returns a wider range of videos results.\n* In the web frontend, when the user clicks on the results, the matching Youtube video plays in an embedded video player.\n\n### How to use\n* Once credentials are all set, first run steps 1 - 3 to populate your vector store.\n* Next, set the workflow to active to expose the web frontend. Visit the webhook  [https://<n8n_url>/webhook/n8n_videos](/webhook/n8n_videos) in your browser to use it.\n* If only for personal use, you may want to remove. the rate limiting mechanism in step 4.\n\n### Customising the template\n* Not interested in official n8n videos? Swap to a different channel.\n* Google Gemini may perform better when extracting from transcripts.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!",
        "height": 1080,
        "width": 440
      },
      "id": "7f9d69d7-536d-4af9-8b3d-162c2cef0554",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.apify.com/v2/acts/streamers~youtube-channel-scraper/run-sync-get-dataset-items?token=apify_api_JhKdeVu3pgj83fvoqQyz4BPOAM2o222xmV0m",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{\n{\n  \"maxResultStreams\": 10,\n  \"maxResults\": 10,\n  \"maxResultsShorts\": 0,\n  \"oldestPostDate\": \"2025-01-01\",\n  \"startUrls\": [\n    {\n      \"url\": \"https://www.youtube.com/@n8n-io\",\n      \"method\": \"GET\"\n    }\n  ]\n}\n}}",
        "options": {}
      },
      "id": "36f17917-33c9-4a71-bc29-3b4c96979b2d",
      "name": "Get Latest Youtube Videos1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1220,
        540
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appR5EaAeG2YmJsoz",
          "mode": "list",
          "cachedResultName": "YT_Content [AAA]",
          "cachedResultUrl": "https://airtable.com/appR5EaAeG2YmJsoz"
        },
        "table": {
          "__rl": true,
          "value": "tblmB1yGomABObnxm",
          "mode": "list",
          "cachedResultName": "Channels",
          "cachedResultUrl": "https://airtable.com/appR5EaAeG2YmJsoz/tblmB1yGomABObnxm"
        },
        "filterByFormula": "{Process_channel} = 'true'",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1100,
        940
      ],
      "id": "5d016865-d2ef-4f3a-b993-4d18621e156f",
      "name": "Read_Channels",
      "executeOnce": false,
      "alwaysOutputData": true,
      "retryOnFail": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "qyFxe22Z4fHSPHn3",
          "name": "Airtable Access Token✔️️"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "clearDeduplicationHistory",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        1460,
        1320
      ],
      "id": "a034c752-fb26-410c-b231-3a2e1cbfa7a0",
      "name": "Remove Duplicates"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-04-29T18:51:04.000Z",
  "versionId": "cb38bc8e-01eb-4e44-9ecc-7286b1b9b63a"
}